Script started on Saturday 26 April 2014 11:48:35 AM IST
]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ git clone https://github.com/m-narayann/arrivu-lms.git[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ccd ..[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[K[K[K[Kscript generate migration change_name _account_slider_url_in_account_statistics[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cgenerate migration change_name_a[1Pccount_slider_url_in_account_statistics[A]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ [C[C[C[C[C[C/generate migration change_name_account_slider_url_in_account_statistics[A]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ [C[C[C[C[C[C[C

ELEARNING: true
LMSENABLED:false
/home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/activesupport/lib/active_support/inflector.rb:3:in `<top (required)>': iconv will be deprecated in the future, use String#encode instead.
NOTE: Gem.source_index is deprecated, use Specification. It will be removed on or after 2011-11-01.
Gem.source_index called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails/gem_dependency.rb:21.
NOTE: Dependency.new w/ a regexp is deprecated.
Dependency.new called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails_generator/lookup.rb:211
NOTE: Gem.cache is deprecated, use Gem::source_index. It will be removed on or after 2011-08-01.
Gem.cache called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails_generator/lookup.rb:212.
NOTE: Gem.source_index is deprecated, use Specification. It will be removed on or after 2011-11-01.
Gem.source_index called from /home/sysadmin/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/site_ruby/1.9.1/rubygems.rb:1175.
NOTE: Gem::SourceIndex#search is deprecated with no replacement. It will be removed on or after 2011-11-01.
Gem::SourceIndex#search called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails/vendor_gem_source_index.rb:119.
NOTE: Gem::SourceIndex#search is deprecated with no replacement. It will be removed on or after 2011-11-01.
Gem::SourceIndex#search called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails/vendor_gem_source_index.rb:119.
NOTE: Gem.cache is deprecated, use Gem::source_index. It will be removed on or after 2011-08-01.
Gem.cache called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails_generator/lookup.rb:234.
NOTE: Gem.source_index is deprecated, use Specification. It will be removed on or after 2011-11-01.
Gem.source_index called from /home/sysadmin/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/site_ruby/1.9.1/rubygems.rb:1175.
NOTE: Gem::SourceIndex#each is deprecated with no replacement. It will be removed on or after 2011-11-01.
Gem::SourceIndex#each called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails/vendor_gem_source_index.rb:123.
NOTE: Gem::SourceIndex#each is deprecated with no replacement. It will be removed on or after 2011-11-01.
Gem::SourceIndex#each called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails/vendor_gem_source_index.rb:124.
      exists  db/migrate
      create  db/migrate/20140426061935_change_name_account_slider_url_in_account_statistics.rb
]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ script/generate[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[H[2J]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ bundle exec rake db:migrate
ELEARNING: true
LMSENABLED:false
ELEARNING: true
LMSENABLED:false
rake aborted!
ChangeNameAccountSliderUrlInAccountStatistics (20140426061935) is not tagged as predeploy or postdeploy!
/home/sysadmin/dev/canvas-lms/config/initializers/active_record.rb:1282:in `load_migration'
/home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/activerecord/lib/active_record/migration.rb:369:in `migration'
/home/sysadmin/dev/canvas-lms/config/initializers/active_record.rb:1276:in `runnable?'
/home/sysadmin/dev/canvas-lms/config/initializers/active_record.rb:1356:in `block in migrate'
/home/sysadmin/dev/canvas-lms/config/initializers/active_record.rb:1343:in `each'
/home/sysadmin/dev/canvas-lms/config/initializers/active_record.rb:1343:in `migrate'
/home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/activerecord/lib/active_record/migration.rb:401:in `up'
/home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/activerecord/lib/active_record/migration.rb:383:in `migrate'
/home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/tasks/databases.rake:112:in `block (2 levels) in <top (required)>'
Tasks: TOP => db:migrate
(See full trace by running task with --trace)
]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ [H[2J]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ bundle exec rake db:migrate
ELEARNING: true
LMSENABLED:false
ELEARNING: true
LMSENABLED:false
==  ChangeNameAccountSliderUrlInAccountStatistics: migrating ==================
-- rename_column(:account_sliders, :account_slider_url, :account_slider_attachment_id)
   -> 0.0220s
==  ChangeNameAccountSliderUrlInAccountStatistics: migrated (0.0221s) =========

]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ git status
On branch home_page_account_sliders
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	[31mmodified:   app/views/jst/HomePages/AccountSliderCollectionView.handlebars[m
	[31mmodified:   app/views/jst/HomePages/AccountStatistics.handlebars[m
	[31mmodified:   app/views/jst/HomePages/IndexView.handlebars[m
	[31mmodified:   public/javascripts/slider.js[m
	[31mmodified:   vendor/plugins/e_learning/app/controllers/sliders_controller.rb[m
	[31mmodified:   vendor/plugins/e_learning/app/models/account_slider.rb[m

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	[31mdb/migrate/20140426061935_change_name_account_slider_url_in_account_statistics.rb[m
	[31mgenerate[m

no changes added to commit (use "git add" and/or "git commit -a")
]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ git add .
]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ git commit -m ""d"e"f"a"u"l"t" "s"l"i"d"e"r" "e"r"r"o"r" " [A]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ci""s" "f"i"x"e"d" "a"n"d" "a"c"c"o"u"n"t" "s"t"a"t"i"s"t"i"x"c"s"[1P"[1P"[1P"c"s" "d"e"s"i"g"n" "f"i"x"e"d"
[home_page_account_sliders e32e2f3] default slider error is fixed and account statistics design fixed
 8 files changed, 62 insertions(+), 20 deletions(-)
 create mode 100644 db/migrate/20140426061935_change_name_account_slider_url_in_account_statistics.rb
 create mode 100644 generate
]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ git psuh origin [K[K[K[K[K[K[K[K[K[K[K[Kpush origin home_page_account_slidders 
Username for 'https://github.com': SaravananNV
Password for 'https://SaravananNV@github.com': 
Counting objects: 1   Counting objects: 138, done.
Delta compression using up to 2 threads.
Compressing objects:   4% (1/22)   Compressing objects:   9% (2/22)   Compressing objects:  13% (3/22)   Compressing objects:  18% (4/22)   Compressing objects:  22% (5/22)   Compressing objects:  27% (6/22)   Compressing objects:  31% (7/22)   Compressing objects:  36% (8/22)   Compressing objects:  40% (9/22)   Compressing objects:  45% (10/22)   Compressing objects:  50% (11/22)   Compressing objects:  54% (12/22)   Compressing objects:  59% (13/22)   Compressing objects:  63% (14/22)   Compressing objects:  68% (15/22)   Compressing objects:  72% (16/22)   Compressing objects:  77% (17/22)   Compressing objects:  81% (18/22)   Compressing objects:  86% (19/22)   Compressing objects:  90% (20/22)   Compressing objects:  95% (21/22)   Compressing objects: 100% (22/22)   Compressing objects: 100% (22/22), done.
Writing objects:   4% (1/24)   Writing objects:   8% (2/24)   Writing objects:  12% (3/24)   Writing objects:  16% (4/24)   Writing objects:  20% (5/24)   Writing objects:  25% (6/24)   Writing objects:  29% (7/24)   Writing objects:  33% (8/24)   Writing objects:  37% (9/24)   Writing objects:  41% (10/24)   Writing objects:  45% (11/24)   Writing objects:  50% (12/24)   Writing objects:  54% (13/24)   Writing objects:  58% (14/24)   Writing objects:  62% (15/24)   Writing objects:  66% (16/24)   Writing objects:  70% (17/24)   Writing objects:  75% (18/24)   Writing objects:  79% (19/24)   Writing objects:  83% (20/24)   Writing objects:  87% (21/24)   Writing objects:  91% (22/24)   Writing objects:  95% (23/24)   Writing objects: 100% (24/24)   Writing objects: 100% (24/24), 2.77 KiB | 0 bytes/s, done.
Total 24 (delta 18), reused 0 (delta 0)
To https://github.com/m-narayan/canvas-lms.git
   655861f..e32e2f3  home_page_account_sliders -> home_page_account_sliders
]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ git status
On branch home_page_account_sliders
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	[31mmodified:   generate[m

no changes added to commit (use "git add" and/or "git commit -a")
]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ git checkout -b popular_course
M	generate
Switched to a new branch 'popular_course'
]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ git branch
  Adding_account_sliders[m
  Adding_course_description[m
  Adding_course_image[m
  Adding_course_price_coffeescript[m
  add_tagging_course[m
  develop[m
  e-learning[m
  home_page[m
  home_page_account_sliders[m
* [32mpopular_course[m
]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ script/generate migraqtion [K[K[K[K[K[Ktion crte[K[K[Kreate_cour se_images
ELEARNING: true
LMSENABLED:false
/home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/activesupport/lib/active_support/inflector.rb:3:in `<top (required)>': iconv will be deprecated in the future, use String#encode instead.
NOTE: Gem.source_index is deprecated, use Specification. It will be removed on or after 2011-11-01.
Gem.source_index called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails/gem_dependency.rb:21.
NOTE: Dependency.new w/ a regexp is deprecated.
Dependency.new called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails_generator/lookup.rb:211
NOTE: Gem.cache is deprecated, use Gem::source_index. It will be removed on or after 2011-08-01.
Gem.cache called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails_generator/lookup.rb:212.
NOTE: Gem.source_index is deprecated, use Specification. It will be removed on or after 2011-11-01.
Gem.source_index called from /home/sysadmin/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/site_ruby/1.9.1/rubygems.rb:1175.
NOTE: Gem::SourceIndex#search is deprecated with no replacement. It will be removed on or after 2011-11-01.
Gem::SourceIndex#search called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails/vendor_gem_source_index.rb:119.
NOTE: Gem::SourceIndex#search is deprecated with no replacement. It will be removed on or after 2011-11-01.
Gem::SourceIndex#search called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails/vendor_gem_source_index.rb:119.
NOTE: Gem.cache is deprecated, use Gem::source_index. It will be removed on or after 2011-08-01.
Gem.cache called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails_generator/lookup.rb:234.
NOTE: Gem.source_index is deprecated, use Specification. It will be removed on or after 2011-11-01.
Gem.source_index called from /home/sysadmin/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/site_ruby/1.9.1/rubygems.rb:1175.
NOTE: Gem::SourceIndex#each is deprecated with no replacement. It will be removed on or after 2011-11-01.
Gem::SourceIndex#each called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails/vendor_gem_source_index.rb:123.
NOTE: Gem::SourceIndex#each is deprecated with no replacement. It will be removed on or after 2011-11-01.
Gem::SourceIndex#each called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails/vendor_gem_source_index.rb:124.
      exists  db/migrate
      create  db/migrate/20140426065602_create_course_images.rb
]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ [H[2J]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ bundle exec rake db:migrate
ELEARNING: true
LMSENABLED:false
ELEARNING: true
LMSENABLED:false
==  CreateCourseImages: migrating =============================================
-- create_table(:course_images)
rake aborted!
An error has occurred, this and all later migrations canceled:

All foreign keys need to be 8-byte integers. course_image_attachment_id looks like a foreign key to me, please add this option: `:limit => 8`/home/sysadmin/dev/canvas-lms/lib/canvas.rb:19:in `active_record_foreign_key_check'
/home/sysadmin/dev/canvas-lms/config/initializers/active_record.rb:1155:in `column_with_foreign_key_check'
(eval):5:in `block in integer'
(eval):5:in `each'
(eval):5:in `integer'
/home/sysadmin/dev/canvas-lms/db/migrate/20140426065602_create_course_images.rb:7:in `block in up'
/home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb:99:in `create_table'
/home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/activerecord/lib/active_record/migration.rb:352:in `block in method_missing'
/home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/activerecord/lib/active_record/migration.rb:328:in `block in say_with_time'
/home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/activerecord/lib/active_record/migration.rb:328:in `say_with_time'
/home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/activerecord/lib/active_record/migration.rb:348:in `method_missing'
/home/sysadmin/dev/canvas-lms/db/migrate/20140426065602_create_course_images.rb:4:in `up'
/home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/activerecord/lib/active_record/migration.rb:282:in `block in migrate'
/home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/activerecord/lib/active_record/migration.rb:282:in `migrate'
/home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/activerecord/lib/active_record/migration.rb:365:in `migrate'
/home/sysadmin/dev/canvas-lms/config/initializers/active_record.rb:1368:in `block (2 levels) in migrate'
/home/sysadmin/dev/canvas-lms/config/initializers/active_record.rb:1380:in `block in ddl_transaction'
/home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:136:in `transaction'
/home/sysadmin/dev/canvas-lms/config/initializers/active_record.rb:1380:in `ddl_transaction'
/home/sysadmin/dev/canvas-lms/config/initializers/active_record.rb:1367:in `block in migrate'
/home/sysadmin/dev/canvas-lms/config/initializers/active_record.rb:1343:in `each'
/home/sysadmin/dev/canvas-lms/config/initializers/active_record.rb:1343:in `migrate'
/home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/activerecord/lib/active_record/migration.rb:401:in `up'
/home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/activerecord/lib/active_record/migration.rb:383:in `migrate'
/home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/tasks/databases.rake:112:in `block (2 levels) in <top (required)>'
Tasks: TOP => db:migrate
(See full trace by running task with --trace)
]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ [H[2J]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ bundle exec rake db:migrate
ELEARNING: true
LMSENABLED:false
ELEARNING: true
LMSENABLED:false
==  CreateCourseImages: migrating =============================================
-- create_table(:course_images)
NOTICE:  CREATE TABLE will create implicit sequence "course_images_id_seq" for serial column "course_images.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "course_images_pkey" for table "course_images"
   -> 0.2265s
==  CreateCourseImages: migrated (0.2266s) ====================================

]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ script/generate model course_image
ELEARNING: true
LMSENABLED:false
/home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/activesupport/lib/active_support/inflector.rb:3:in `<top (required)>': iconv will be deprecated in the future, use String#encode instead.
NOTE: Gem.source_index is deprecated, use Specification. It will be removed on or after 2011-11-01.
Gem.source_index called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails/gem_dependency.rb:21.
NOTE: Dependency.new w/ a regexp is deprecated.
Dependency.new called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails_generator/lookup.rb:211
NOTE: Gem.cache is deprecated, use Gem::source_index. It will be removed on or after 2011-08-01.
Gem.cache called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails_generator/lookup.rb:212.
NOTE: Gem.source_index is deprecated, use Specification. It will be removed on or after 2011-11-01.
Gem.source_index called from /home/sysadmin/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/site_ruby/1.9.1/rubygems.rb:1175.
NOTE: Gem::SourceIndex#search is deprecated with no replacement. It will be removed on or after 2011-11-01.
Gem::SourceIndex#search called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails/vendor_gem_source_index.rb:119.
NOTE: Gem::SourceIndex#search is deprecated with no replacement. It will be removed on or after 2011-11-01.
Gem::SourceIndex#search called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails/vendor_gem_source_index.rb:119.
NOTE: Gem.cache is deprecated, use Gem::source_index. It will be removed on or after 2011-08-01.
Gem.cache called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails_generator/lookup.rb:234.
NOTE: Gem.source_index is deprecated, use Specification. It will be removed on or after 2011-11-01.
Gem.source_index called from /home/sysadmin/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/site_ruby/1.9.1/rubygems.rb:1175.
NOTE: Gem::SourceIndex#each is deprecated with no replacement. It will be removed on or after 2011-11-01.
Gem::SourceIndex#each called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails/vendor_gem_source_index.rb:123.
NOTE: Gem::SourceIndex#each is deprecated with no replacement. It will be removed on or after 2011-11-01.
Gem::SourceIndex#each called from /home/sysadmin/dev/canvas-lms/vendor/bundle/ruby/1.9.1/bundler/gems/rails-e86daf8ff727/railties/lib/rails/vendor_gem_source_index.rb:124.
      exists  app/models/
      exists  test/unit/
      exists  test/fixtures/
      create  app/models/course_image.rb
      create  test/unit/course_image_test.rb
      create  test/fixtures/course_images.yml
      exists  db/migrate
Another migration is already named create_course_images: db/migrate/20140426065602_create_course_images.rb
]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ bundle exec rake db:migrate[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kpsql -U postgres
psql (9.3.4, server 9.2.8)
Type "help" for help.

postgres=# drop datatasebn[K[K canvas_pr[K[Kdevelopment;
ERROR:  syntax error at or near "datatase"
LINE 1: drop datatase canvas_development;
             ^
postgres=# drop datatase canvas_development;[1P[1@b
DROP DATABASE
postgres=# drop database canvas_development;qdevelopment;udevelopment;edevelopment;udevelopment;edevelopment;_development;
DROP DATABASE
postgres=# create database canvas_development;
CREATE DATABASE
postgres=# create database canvas_development;[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K\ud
Invalid command \ud. Try \? for help.
postgres=# \du
                             List of roles
 Role name |                   Attributes                   | Member of 
-----------+------------------------------------------------+-----------
 canvas    | Superuser, Create role, Create DB              | {}
 jigsaw    | Superuser, Create role, Create DB              | {}
 portal    | Create DB                                      | {}
 postgres  | Superuser, Create role, Create DB, Replication | {}
 saran     | Cannot login                                   | {}

postgres=# \l
[?1049h[?1h=                                    List of databases
           Name           |  Owner   | Encoding | Collate | Ctype |   Access pri vileges   
--------------------------+----------+----------+---------+-------+------------- ----------
 canvas_development       | postgres | UTF8     | en_IN   | en_IN | 
 canvas_production        | canvas   | UTF8     | en_IN   | en_IN | 
 canvas_queue_production  | canvas   | UTF8     | en_IN   | en_IN | 
 canvas_test              | canvas   | UTF8     | en_IN   | en_IN | 
 jigsaw_development       | jigsaw   | UTF8     | en_IN   | en_IN | 
 jigsaw_producution       | jigsaw   | UTF8     | en_IN   | en_IN | 
 jigsaw_queue_development | jigsaw   | UTF8     | en_IN   | en_IN | 
 jigsaw_queue_producution | jigsaw   | UTF8     | en_IN   | en_IN | 
 jigsaw_test              | jigsaw   | UTF8     | en_IN   | en_IN | 
 portal_development       | portal   | UTF8     | en_IN   | en_IN | =Tc/portal            +
                          |          |          |         |       | portal=CTc/p ortal
 portal_production        | portal   | UTF8     | en_IN   | en_IN | 
 postgres                 | postgres | UTF8     | en_IN   | en_IN | 
 template0                | postgres | UTF8     | en_IN   | en_IN | =c/postgres           +
                          |          |          |         |       | postgres=CTc :[K[K:[K[K[?1l>[?1049lpostgres=# 
postgres=# alter [4P\lduudcreate database canvas_development;[C[C[C[C[C[C[C[C[C[C[Cdrop database canvas_queue_development;[6Pdevelopment;[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ct[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C\q[Klalter role portal createdb login password 'portal';[C[C[C[C[C[C[C[C[C[C[C\du[Kalter role portal createdb login password 'portal';[C[C[C[C[C[C[C[C[C[C[C\du[Kalter database portal_production owner to portal'[1Portal'[1Prtal'[1Ptal'[1Pal'[1Pl'[1P'[K[C[1P[1P[1P[1P[1P[1P[1@c[1@a[1@n[1@v[1@a[1@s[C[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1@d[1@e[1@v[1@e[1@l[1@o[1@p[1@m[1@e[1@n[1@t[C[C[C[C[C[C[C[C[C[C c a n v a s ; 
ALTER DATABASE
postgres=# \l
[?1049h[?1h=                                    List of databases
           Name           |  Owner   | Encoding | Collate | Ctype |   Access pri vileges   
--------------------------+----------+----------+---------+-------+------------- ----------
 canvas_development       | canvas   | UTF8     | en_IN   | en_IN | 
 canvas_production        | canvas   | UTF8     | en_IN   | en_IN | 
 canvas_queue_production  | canvas   | UTF8     | en_IN   | en_IN | 
 canvas_test              | canvas   | UTF8     | en_IN   | en_IN | 
 jigsaw_development       | jigsaw   | UTF8     | en_IN   | en_IN | 
 jigsaw_producution       | jigsaw   | UTF8     | en_IN   | en_IN | 
 jigsaw_queue_development | jigsaw   | UTF8     | en_IN   | en_IN | 
 jigsaw_queue_producution | jigsaw   | UTF8     | en_IN   | en_IN | 
 jigsaw_test              | jigsaw   | UTF8     | en_IN   | en_IN | 
 portal_development       | portal   | UTF8     | en_IN   | en_IN | =Tc/portal            +
                          |          |          |         |       | portal=CTc/p ortal
 portal_production        | portal   | UTF8     | en_IN   | en_IN | 
 postgres                 | postgres | UTF8     | en_IN   | en_IN | 
 template0                | postgres | UTF8     | en_IN   | en_IN | =c/postgres           +
                          |          |          |         |       | postgres=CTc :[K[K:[K[K:[K11[K/postgres
:[K[K:[K[K[?1l>[?1049lpostgres=# 
postgres=# \q
]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ psql -U postgresscript/generate model course_image[7Pbundle exec rake db:migratescript/generate migration create_coursse_images[A]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ git branch[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ccheckout -b popular_coursestatus[Kpush origin home_page_account_slidders [A]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ [C[C[C[Ccommit -m "default slider error is fixed and account statistics design fixed"[A[C[C[Cpush origin home_page_account_sliders [K[A]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ [C[C[C[Cstatus[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ccheckout -b popular_coursebranch[Kscript/generate migration create_coursse_images[A]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ [10Pbundle exec rake db:migrate
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cscript/generate model course_image[18Ppsql -U postgres
psql (9.3.4, server 9.2.8)
Type "help" for help.

postgres=# [H[2Jpostgres=# \qlalter database canvas_development owner to canvas; [C[C[C[C[C[C[C[C[C[C[C\l[Kduudcreate database canvas_development;qdevelopment;udevelopment;edevelopment;udevelopment;edevelopment;_development;[C[C[C[C[C[C[C[C[C[C[C[C ;o;w;n;e;r; ;c;a;n;v;a;s;
CREATE DATABASE
postgres=# \q
]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ bundle exec rake db:migrate
ELEARNING: true
LMSENABLED:false
ELEARNING: true
LMSENABLED:false
==  InitCanvasDb: migrating ===================================================
-- create_table("abstract_courses", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "abstract_courses_id_seq" for serial column "abstract_courses.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "abstract_courses_pkey" for table "abstract_courses"
   -> 0.1288s
-- add_index("abstract_courses", ["college_id"], {:name=>"index_abstract_courses_on_college_id"})
   -> 0.0418s
-- add_index("abstract_courses", ["department_id"], {:name=>"index_abstract_courses_on_department_id"})
   -> 0.0420s
-- add_index("abstract_courses", ["root_account_id", "sis_source_id"], {:name=>"index_abstract_courses_on_root_account_id_and_sis_source_id"})
   -> 0.0336s
-- add_index("abstract_courses", ["sis_source_id"], {:name=>"index_abstract_courses_on_sis_source_id"})
   -> 0.0339s
-- create_table("account_authorization_configs", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "account_authorization_configs_id_seq" for serial column "account_authorization_configs.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "account_authorization_configs_pkey" for table "account_authorization_configs"
   -> 0.1092s
-- add_index("account_authorization_configs", ["account_id"], {:name=>"index_account_authorization_configs_on_account_id"})
   -> 0.0503s
-- create_table("account_reports")
NOTICE:  CREATE TABLE will create implicit sequence "account_reports_id_seq" for serial column "account_reports.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "account_reports_pkey" for table "account_reports"
   -> 0.1091s
-- create_table("account_users", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "account_users_id_seq" for serial column "account_users.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "account_users_pkey" for table "account_users"
   -> 0.0673s
-- add_index("account_users", ["account_id"], {:name=>"index_account_users_on_account_id"})
   -> 0.0587s
-- add_index("account_users", ["user_id"], {:name=>"index_account_users_on_user_id"})
   -> 0.0754s
-- create_table("accounts", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "accounts_id_seq" for serial column "accounts.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "accounts_pkey" for table "accounts"
   -> 0.1094s
-- add_index("accounts", ["id", "type"], {:name=>"index_accounts_on_id_and_type"})
   -> 0.0419s
-- add_index("accounts", ["name", "parent_account_id"], {:name=>"index_accounts_on_name_and_parent_account_id"})
   -> 0.0436s
-- add_index("accounts", ["parent_account_id", "root_account_id"], {:name=>"index_accounts_on_parent_account_id_and_root_account_id"})
   -> 0.0588s
-- add_index("accounts", ["root_account_id", "sis_source_id"], {:name=>"index_accounts_on_root_account_id_and_sis_source_id"})
   -> 0.0587s
-- add_index("accounts", ["sis_source_id"], {:name=>"index_accounts_on_sis_source_id"})
   -> 0.0587s
-- add_index("accounts", ["type"], {:name=>"index_accounts_on_type"})
   -> 0.0421s
-- create_table("assessment_question_bank_users", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "assessment_question_bank_users_id_seq" for serial column "assessment_question_bank_users.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "assessment_question_bank_users_pkey" for table "assessment_question_bank_users"
   -> 0.0842s
-- add_index("assessment_question_bank_users", ["assessment_question_bank_id"], {:name=>"assessment_qbu_aqb_id"})
   -> 0.0420s
-- add_index("assessment_question_bank_users", ["user_id"], {:name=>"assessment_qbu_u_id"})
   -> 0.0421s
-- create_table("assessment_question_banks", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "assessment_question_banks_id_seq" for serial column "assessment_question_banks.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "assessment_question_banks_pkey" for table "assessment_question_banks"
   -> 0.0844s
-- add_index("assessment_question_banks", ["context_id", "context_type"], {:name=>"index_on_aqb_on_context_id_and_context_type"})
   -> 0.0419s
-- create_table("assessment_questions", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "assessment_questions_id_seq" for serial column "assessment_questions.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "assessment_questions_pkey" for table "assessment_questions"
   -> 0.1510s
-- add_index("assessment_questions", ["assessment_question_bank_id", "position"], {:name=>"question_bank_id_and_position"})
   -> 0.0420s
-- add_index("assessment_questions", ["context_id", "context_type"], {:name=>"index_assessment_questions_on_context_id_and_context_type"})
   -> 0.0420s
-- create_table("assessment_requests", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "assessment_requests_id_seq" for serial column "assessment_requests.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "assessment_requests_pkey" for table "assessment_requests"
   -> 0.1033s
-- add_index("assessment_requests", ["assessor_asset_id", "assessor_asset_type"], {:name=>"aa_id_and_aa_type"})
   -> 0.0662s
-- add_index("assessment_requests", ["assessor_id"], {:name=>"index_assessment_requests_on_assessor_id"})
   -> 0.0420s
-- add_index("assessment_requests", ["asset_id", "asset_type"], {:name=>"index_assessment_requests_on_asset_id_and_asset_type"})
   -> 0.0671s
-- add_index("assessment_requests", ["rubric_assessment_id"], {:name=>"index_assessment_requests_on_rubric_assessment_id"})
   -> 0.0827s
-- add_index("assessment_requests", ["rubric_association_id"], {:name=>"index_assessment_requests_on_rubric_association_id"})
   -> 0.0765s
-- add_index("assessment_requests", ["user_id"], {:name=>"index_assessment_requests_on_user_id"})
   -> 0.0420s
-- create_table("asset_user_accesses", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "asset_user_accesses_id_seq" for serial column "asset_user_accesses.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "asset_user_accesses_pkey" for table "asset_user_accesses"
   -> 0.0844s
-- add_index("asset_user_accesses", ["context_id", "context_type"], {:name=>"index_asset_user_accesses_on_context_id_and_context_type"})
   -> 0.0587s
-- add_index("asset_user_accesses", ["user_id", "asset_code"], {:name=>"index_asset_user_accesses_on_user_id_and_asset_code"})
   -> 0.0337s
-- create_table("assignment_groups", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "assignment_groups_id_seq" for serial column "assignment_groups.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "assignment_groups_pkey" for table "assignment_groups"
   -> 0.0761s
-- add_index("assignment_groups", ["cloned_item_id"], {:name=>"index_assignment_groups_on_cloned_item_id"})
   -> 0.0418s
-- add_index("assignment_groups", ["context_code"], {:name=>"index_assignment_groups_on_context_code"})
   -> 0.0784s
-- add_index("assignment_groups", ["context_id", "context_type"], {:name=>"index_assignment_groups_on_context_id_and_context_type"})
   -> 0.0558s
-- create_table("assignment_reminders", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "assignment_reminders_id_seq" for serial column "assignment_reminders.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "assignment_reminders_pkey" for table "assignment_reminders"
   -> 0.0588s
-- add_index("assignment_reminders", ["assignment_id"], {:name=>"index_assignment_reminders_on_assignment_id"})
   -> 0.0504s
-- add_index("assignment_reminders", ["user_id"], {:name=>"index_assignment_reminders_on_user_id"})
   -> 0.0867s
-- create_table("assignments", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "assignments_id_seq" for serial column "assignments.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "assignments_pkey" for table "assignments"
   -> 0.1080s
-- add_index("assignments", ["assignment_group_id"], {:name=>"index_assignments_on_assignment_group_id"})
   -> 0.0502s
-- add_index("assignments", ["cloned_item_id"], {:name=>"index_assignments_on_cloned_item_id"})
   -> 0.0671s
-- add_index("assignments", ["context_code"], {:name=>"index_assignments_on_context_code"})
   -> 0.0504s
-- add_index("assignments", ["context_id", "context_type"], {:name=>"index_assignments_on_context_id_and_context_type"})
   -> 0.0872s
-- add_index("assignments", ["due_at", "context_code"], {:name=>"index_assignments_on_due_at_and_context_code"})
   -> 0.0472s
-- add_index("assignments", ["grading_standard_id"], {:name=>"index_assignments_on_grading_standard_id"})
   -> 0.0567s
-- add_index("assignments", ["workflow_state"], {:name=>"index_assignments_on_workflow_state"})
   -> 0.0440s
-- create_table("attachment_associations", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "attachment_associations_id_seq" for serial column "attachment_associations.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "attachment_associations_pkey" for table "attachment_associations"
   -> 0.0506s
-- add_index("attachment_associations", ["attachment_id"], {:name=>"index_attachment_associations_on_attachment_id"})
   -> 0.0420s
-- add_index("attachment_associations", ["context_id", "context_type"], {:name=>"attachment_associations_a_id_a_type"})
   -> 0.0588s
-- create_table("attachments", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "attachments_id_seq" for serial column "attachments.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "attachments_pkey" for table "attachments"
   -> 0.1427s
-- add_index("attachments", ["cloned_item_id"], {:name=>"index_attachments_on_cloned_item_id"})
   -> 0.0670s
-- add_index("attachments", ["context_id", "context_type"], {:name=>"index_attachments_on_context_id_and_context_type"})
   -> 0.0702s
-- add_index("attachments", ["enrollment_id"], {:name=>"index_attachments_on_enrollment_id"})
   -> 0.0739s
-- add_index("attachments", ["folder_id"], {:name=>"index_attachments_on_folder_id"})
   -> 0.0671s
-- add_index("attachments", ["md5", "namespace"], {:name=>"index_attachments_on_md5_and_namespace"})
   -> 0.0505s
-- add_index("attachments", ["root_attachment_id"], {:name=>"index_attachments_on_root_attachment_id"})
   -> 0.0584s
-- add_index("attachments", ["scribd_account_id"], {:name=>"index_attachments_on_scribd_account_id"})
   -> 0.0425s
-- add_index("attachments", ["scribd_attempts", "scribd_mime_type_id", "workflow_state"], {:name=>"scribd_attempts_smt_workflow_state"})
   -> 0.0420s
-- add_index("attachments", ["scribd_mime_type_id"], {:name=>"index_attachments_on_scribd_mime_type_id"})
   -> 0.0587s
-- add_index("attachments", ["user_id"], {:name=>"index_attachments_on_user_id"})
   -> 0.0337s
-- add_index("attachments", ["workflow_state", "updated_at"], {:name=>"index_attachments_on_workflow_state_and_updated_at"})
   -> 0.0645s
-- create_table("authorization_codes", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "authorization_codes_id_seq" for serial column "authorization_codes.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "authorization_codes_pkey" for table "authorization_codes"
   -> 0.1036s
-- add_index("authorization_codes", ["account_id"], {:name=>"index_authorization_codes_on_account_id"})
   -> 0.0502s
-- create_table("calendar_events", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "calendar_events_id_seq" for serial column "calendar_events.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "calendar_events_pkey" for table "calendar_events"
   -> 0.1179s
-- add_index("calendar_events", ["cloned_item_id"], {:name=>"index_calendar_events_on_cloned_item_id"})
   -> 0.0502s
-- add_index("calendar_events", ["context_code"], {:name=>"index_calendar_events_on_context_code"})
   -> 0.0670s
-- add_index("calendar_events", ["context_id", "context_type"], {:name=>"index_calendar_events_on_context_id_and_context_type"})
   -> 0.0504s
-- add_index("calendar_events", ["user_id"], {:name=>"index_calendar_events_on_user_id"})
   -> 0.0857s
-- create_table("cloned_items", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "cloned_items_id_seq" for serial column "cloned_items.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "cloned_items_pkey" for table "cloned_items"
   -> 0.0338s
-- add_index("cloned_items", ["original_item_id", "original_item_type"], {:name=>"cloned_items_original_item_id_and_type"})
   -> 0.0336s
-- create_table("collaborations", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "collaborations_id_seq" for serial column "collaborations.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "collaborations_pkey" for table "collaborations"
   -> 0.0677s
-- add_index("collaborations", ["context_id", "context_type"], {:name=>"index_collaborations_on_context_id_and_context_type"})
   -> 0.0504s
-- add_index("collaborations", ["user_id"], {:name=>"index_collaborations_on_user_id"})
   -> 0.0337s
-- create_table("collaborators", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "collaborators_id_seq" for serial column "collaborators.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "collaborators_pkey" for table "collaborators"
   -> 0.0422s
-- add_index("collaborators", ["collaboration_id"], {:name=>"index_collaborators_on_collaboration_id"})
   -> 0.0336s
-- add_index("collaborators", ["user_id"], {:name=>"index_collaborators_on_user_id"})
   -> 0.0420s
-- create_table("communication_channels", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "communication_channels_id_seq" for serial column "communication_channels.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "communication_channels_pkey" for table "communication_channels"
   -> 0.0927s
-- add_index("communication_channels", ["path", "path_type"], {:name=>"index_communication_channels_on_path_and_path_type"})
   -> 0.0420s
-- add_index("communication_channels", ["pseudonym_id"], {:name=>"index_communication_channels_on_pseudonym_id"})
   -> 0.0420s
-- add_index("communication_channels", ["user_id"], {:name=>"index_communication_channels_on_user_id"})
   -> 0.0420s
-- create_table("content_migrations", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "content_migrations_id_seq" for serial column "content_migrations.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "content_migrations_pkey" for table "content_migrations"
   -> 0.1096s
-- create_table("content_tags", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "content_tags_id_seq" for serial column "content_tags.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "content_tags_pkey" for table "content_tags"
   -> 0.2613s
-- add_index("content_tags", ["content_id", "content_type"], {:name=>"index_content_tags_on_content_id_and_content_type"})
   -> 0.0330s
-- add_index("content_tags", ["context_id", "context_type"], {:name=>"index_content_tags_on_context_id_and_context_type"})
   -> 0.0337s
-- add_index("content_tags", ["context_module_id"], {:name=>"index_content_tags_on_context_module_id"})
   -> 0.0337s
-- add_index("content_tags", ["workflow_state"], {:name=>"index_content_tags_on_workflow_state"})
   -> 0.0483s
-- create_table("context_message_participants", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "context_message_participants_id_seq" for serial column "context_message_participants.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "context_message_participants_pkey" for table "context_message_participants"
   -> 0.0442s
-- add_index("context_message_participants", ["context_message_id"], {:name=>"index_context_message_participants_on_context_message_id"})
   -> 0.0336s
-- add_index("context_message_participants", ["user_id"], {:name=>"index_context_message_participants_on_user_id"})
   -> 0.0421s
-- create_table("context_messages", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "context_messages_id_seq" for serial column "context_messages.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "context_messages_pkey" for table "context_messages"
   -> 0.0760s
-- add_index("context_messages", ["context_id", "context_type"], {:name=>"index_context_messages_on_context_id_and_context_type"})
   -> 0.0556s
-- add_index("context_messages", ["root_context_message_id"], {:name=>"index_context_messages_on_root_context_message_id"})
   -> 0.0367s
-- add_index("context_messages", ["user_id"], {:name=>"index_context_messages_on_user_id"})
   -> 0.0504s
-- create_table("context_module_progressions", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "context_module_progressions_id_seq" for serial column "context_module_progressions.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "context_module_progressions_pkey" for table "context_module_progressions"
   -> 0.0844s
-- add_index("context_module_progressions", ["context_module_id"], {:name=>"index_context_module_progressions_on_context_module_id"})
   -> 0.0618s
-- add_index("context_module_progressions", ["user_id", "context_module_id"], {:name=>"u_id_module_id"})
   -> 0.0388s
-- create_table("context_modules", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "context_modules_id_seq" for serial column "context_modules.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "context_modules_pkey" for table "context_modules"
   -> 0.0860s
-- add_index("context_modules", ["context_id", "context_type"], {:name=>"index_context_modules_on_context_id_and_context_type"})
   -> 0.0336s
-- create_table("course_account_associations", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "course_account_associations_id_seq" for serial column "course_account_associations.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "course_account_associations_pkey" for table "course_account_associations"
   -> 0.0421s
-- add_index("course_account_associations", ["account_id", "depth"], {:name=>"index_course_account_associations_on_account_id_and_depth_id"})
   -> 0.0587s
-- add_index("course_account_associations", ["course_id"], {:name=>"index_course_account_associations_on_course_id"})
   -> 0.0421s
-- create_table("course_imports", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "course_imports_id_seq" for serial column "course_imports.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "course_imports_pkey" for table "course_imports"
   -> 0.0760s
-- create_table("course_sections", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "course_sections_id_seq" for serial column "course_sections.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "course_sections_pkey" for table "course_sections"
   -> 0.0985s
-- add_index("course_sections", ["abstract_course_id"], {:name=>"index_course_sections_on_abstract_course_id"})
   -> 0.0362s
-- add_index("course_sections", ["course_id"], {:name=>"index_course_sections_on_course_id"})
   -> 0.0420s
-- add_index("course_sections", ["enrollment_term_id"], {:name=>"index_course_sections_on_enrollment_term_id"})
   -> 0.0505s
-- add_index("course_sections", ["root_account_id", "sis_source_id"], {:name=>"index_course_sections_on_root_account_id_and_sis_source_id"})
   -> 0.0337s
-- add_index("course_sections", ["sis_cross_listed_section_id"], {:name=>"index_course_sections_on_sis_cross_listed_section_id"})
   -> 0.0336s
-- create_table("courses", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "courses_id_seq" for serial column "courses.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "courses_pkey" for table "courses"
   -> 0.1010s
-- add_index("courses", ["abstract_course_id"], {:name=>"index_courses_on_abstract_course_id"})
   -> 0.0434s
-- add_index("courses", ["account_id"], {:name=>"index_courses_on_account_id"})
   -> 0.0338s
-- add_index("courses", ["enrollment_term_id"], {:name=>"index_courses_on_enrollment_term_id"})
   -> 0.0337s
-- add_index("courses", ["grading_standard_id"], {:name=>"index_courses_on_grading_standard_id"})
   -> 0.0501s
-- add_index("courses", ["moved_in_account_structure", "updated_at"], {:name=>"index_courses_on_moved_in_account_structure_and_updated_at"})
   -> 0.0423s
-- add_index("courses", ["root_account_id"], {:name=>"index_courses_on_root_account_id"})
   -> 0.0338s
-- add_index("courses", ["wiki_id"], {:name=>"index_courses_on_wiki_id"})
   -> 0.0419s
-- create_table("custom_field_values", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "custom_field_values_id_seq" for serial column "custom_field_values.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "custom_field_values_pkey" for table "custom_field_values"
   -> 0.0760s
-- create_table("custom_fields", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "custom_fields_id_seq" for serial column "custom_fields.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "custom_fields_pkey" for table "custom_fields"
   -> 0.1008s
-- create_table("delayed_messages", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "delayed_messages_id_seq" for serial column "delayed_messages.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "delayed_messages_pkey" for table "delayed_messages"
   -> 0.1181s
-- add_index("delayed_messages", ["communication_channel_id", "workflow_state", "send_at"], {:name=>"ccid_ws_sa"})
   -> 0.0419s
-- add_index("delayed_messages", ["send_at"], {:name=>"by_sent_at"})
   -> 0.0588s
-- add_index("delayed_messages", ["workflow_state", "send_at"], {:name=>"ws_sa"})
   -> 0.0420s
-- create_table("delayed_notifications", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "delayed_notifications_id_seq" for serial column "delayed_notifications.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "delayed_notifications_pkey" for table "delayed_notifications"
   -> 0.0858s
-- add_index("delayed_notifications", ["workflow_state", "created_at"], {:name=>"index_delayed_notifications_on_workflow_state_and_created_at"})
   -> 0.0419s
-- create_table("developer_keys", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "developer_keys_id_seq" for serial column "developer_keys.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "developer_keys_pkey" for table "developer_keys"
   -> 0.0845s
-- create_table("discussion_entries", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "discussion_entries_id_seq" for serial column "discussion_entries.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "discussion_entries_pkey" for table "discussion_entries"
   -> 0.0675s
-- add_index("discussion_entries", ["attachment_id"], {:name=>"index_discussion_entries_on_attachment_id"})
   -> 0.0586s
-- add_index("discussion_entries", ["discussion_topic_id"], {:name=>"index_discussion_entries_on_discussion_topic_id"})
   -> 0.0482s
-- add_index("discussion_entries", ["user_id"], {:name=>"index_discussion_entries_on_user_id"})
   -> 0.0360s
-- create_table("discussion_topics", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "discussion_topics_id_seq" for serial column "discussion_topics.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "discussion_topics_pkey" for table "discussion_topics"
   -> 0.0760s
-- add_index("discussion_topics", ["attachment_id"], {:name=>"index_discussion_topics_on_attachment_id"})
   -> 0.0419s
-- add_index("discussion_topics", ["cloned_item_id"], {:name=>"index_discussion_topics_on_cloned_item_id"})
   -> 0.0420s
-- add_index("discussion_topics", ["context_code"], {:name=>"index_discussion_topics_on_context_code"})
   -> 0.0624s
-- add_index("discussion_topics", ["context_id", "context_type"], {:name=>"index_discussion_topics_on_context_id_and_context_type"})
   -> 0.0384s
-- add_index("discussion_topics", ["context_id", "position"], {:name=>"index_discussion_topics_on_context_id_and_position"})
   -> 0.0587s
-- add_index("discussion_topics", ["id", "type"], {:name=>"index_discussion_topics_on_id_and_type"})
   -> 0.0923s
-- add_index("discussion_topics", ["root_topic_id"], {:name=>"index_discussion_topics_on_root_topic_id"})
   -> 0.0604s
-- add_index("discussion_topics", ["user_id"], {:name=>"index_discussion_topics_on_user_id"})
   -> 0.0419s
-- add_index("discussion_topics", ["workflow_state"], {:name=>"index_discussion_topics_on_workflow_state"})
   -> 0.0337s
-- create_table("enrollment_dates_overrides", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "enrollment_dates_overrides_id_seq" for serial column "enrollment_dates_overrides.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "enrollment_dates_overrides_pkey" for table "enrollment_dates_overrides"
   -> 0.0761s
-- create_table("enrollment_terms", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "enrollment_terms_id_seq" for serial column "enrollment_terms.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "enrollment_terms_pkey" for table "enrollment_terms"
   -> 0.0903s
-- add_index("enrollment_terms", ["root_account_id", "sis_source_id"], {:name=>"index_enrollment_terms_on_root_account_id_and_sis_source_id"})
   -> 0.0358s
-- add_index("enrollment_terms", ["sis_source_id"], {:name=>"index_enrollment_terms_on_sis_source_id"})
   -> 0.0420s
-- create_table("enrollments", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "enrollments_id_seq" for serial column "enrollments.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "enrollments_pkey" for table "enrollments"
   -> 0.0761s
-- add_index("enrollments", ["course_id", "workflow_state"], {:name=>"index_enrollments_on_course_id_and_workflow_state"})
   -> 0.0419s
-- add_index("enrollments", ["course_section_id"], {:name=>"index_enrollments_on_course_section_id"})
   -> 0.0624s
-- add_index("enrollments", ["id", "type"], {:name=>"index_enrollments_on_id_and_type"})
   -> 0.0384s
-- add_index("enrollments", ["root_account_id"], {:name=>"index_enrollments_on_root_account_id"})
   -> 0.0420s
-- add_index("enrollments", ["sis_source_id"], {:name=>"index_enrollments_on_sis_source_id"})
   -> 0.0421s
-- add_index("enrollments", ["user_id"], {:name=>"index_enrollments_on_user_id"})
   -> 0.0420s
-- add_index("enrollments", ["uuid"], {:name=>"index_enrollments_on_uuid"})
   -> 0.0421s
-- add_index("enrollments", ["workflow_state"], {:name=>"index_enrollments_on_workflow_state"})
   -> 0.0603s
-- create_table("eportfolio_categories", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "eportfolio_categories_id_seq" for serial column "eportfolio_categories.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "eportfolio_categories_pkey" for table "eportfolio_categories"
   -> 0.0758s
-- add_index("eportfolio_categories", ["eportfolio_id"], {:name=>"index_eportfolio_categories_on_eportfolio_id"})
   -> 0.0504s
-- create_table("eportfolio_entries", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "eportfolio_entries_id_seq" for serial column "eportfolio_entries.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "eportfolio_entries_pkey" for table "eportfolio_entries"
   -> 0.0928s
-- add_index("eportfolio_entries", ["eportfolio_category_id"], {:name=>"index_eportfolio_entries_on_eportfolio_category_id"})
   -> 0.0336s
-- add_index("eportfolio_entries", ["eportfolio_id"], {:name=>"index_eportfolio_entries_on_eportfolio_id"})
   -> 0.0337s
-- create_table("eportfolios", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "eportfolios_id_seq" for serial column "eportfolios.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "eportfolios_pkey" for table "eportfolios"
   -> 0.0762s
-- add_index("eportfolios", ["user_id"], {:name=>"index_eportfolios_on_user_id"})
   -> 0.0554s
-- create_table("error_reports", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "error_reports_id_seq" for serial column "error_reports.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "error_reports_pkey" for table "error_reports"
   -> 0.1129s
-- add_index("error_reports", ["created_at"], {:name=>"error_reports_created_at"})
   -> 0.0418s
-- add_index("error_reports", ["zendesk_ticket_id"], {:name=>"index_error_reports_on_zendesk_ticket_id"})
   -> 0.0420s
-- create_table("external_feed_entries", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "external_feed_entries_id_seq" for serial column "external_feed_entries.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "external_feed_entries_pkey" for table "external_feed_entries"
   -> 0.1011s
-- add_index("external_feed_entries", ["asset_id", "asset_type"], {:name=>"index_external_feed_entries_on_asset_id_and_asset_type"})
   -> 0.0434s
-- add_index("external_feed_entries", ["external_feed_id", "uuid"], {:name=>"external_feed_id_uuid"})
   -> 0.0337s
-- add_index("external_feed_entries", ["user_id"], {:name=>"index_external_feed_entries_on_user_id"})
   -> 0.0337s
-- create_table("external_feeds", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "external_feeds_id_seq" for serial column "external_feeds.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "external_feeds_pkey" for table "external_feeds"
   -> 0.0927s
-- add_index("external_feeds", ["context_id", "context_type"], {:name=>"index_external_feeds_on_context_id_and_context_type"})
   -> 0.0420s
-- add_index("external_feeds", ["user_id"], {:name=>"index_external_feeds_on_user_id"})
   -> 0.0420s
-- create_table("folders", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "folders_id_seq" for serial column "folders.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "folders_pkey" for table "folders"
   -> 0.0843s
-- add_index("folders", ["cloned_item_id"], {:name=>"index_folders_on_cloned_item_id"})
   -> 0.0587s
-- add_index("folders", ["context_id", "context_type"], {:name=>"index_folders_on_context_id_and_context_type"})
   -> 0.0420s
-- add_index("folders", ["parent_folder_id"], {:name=>"index_folders_on_parent_folder_id"})
   -> 0.0421s
-- create_table("gradebook_uploads", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "gradebook_uploads_id_seq" for serial column "gradebook_uploads.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "gradebook_uploads_pkey" for table "gradebook_uploads"
   -> 0.0423s
-- add_index("gradebook_uploads", ["context_id", "context_type"], {:name=>"index_gradebook_uploads_on_context_id_and_context_type"})
   -> 0.0621s
-- create_table("grading_standards", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "grading_standards_id_seq" for serial column "grading_standards.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "grading_standards_pkey" for table "grading_standards"
   -> 0.0890s
-- add_index("grading_standards", ["context_code"], {:name=>"index_grading_standards_on_context_code"})
   -> 0.0419s
-- add_index("grading_standards", ["context_id", "context_type"], {:name=>"index_grading_standards_on_context_id_and_context_type"})
   -> 0.0436s
-- add_index("grading_standards", ["user_id"], {:name=>"index_grading_standards_on_user_id"})
   -> 0.0336s
-- create_table("group_memberships", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "group_memberships_id_seq" for serial column "group_memberships.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "group_memberships_pkey" for table "group_memberships"
   -> 0.0844s
-- add_index("group_memberships", ["group_id"], {:name=>"index_group_memberships_on_group_id"})
   -> 0.0419s
-- add_index("group_memberships", ["user_id"], {:name=>"index_group_memberships_on_user_id"})
   -> 0.0420s
-- add_index("group_memberships", ["workflow_state"], {:name=>"index_group_memberships_on_workflow_state"})
   -> 0.0420s
-- create_table("groups", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "groups_id_seq" for serial column "groups.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "groups_pkey" for table "groups"
   -> 0.0927s
-- add_index("groups", ["account_id"], {:name=>"index_groups_on_account_id"})
   -> 0.0419s
-- add_index("groups", ["context_id", "context_type"], {:name=>"index_groups_on_context_id_and_context_type"})
   -> 0.0421s
-- add_index("groups", ["id", "type"], {:name=>"index_groups_on_id_and_type"})
   -> 0.0420s
-- add_index("groups", ["wiki_id"], {:name=>"index_groups_on_wiki_id"})
   -> 0.0420s
-- add_index("groups", ["workflow_state"], {:name=>"index_groups_on_workflow_state"})
   -> 0.0587s
-- create_table("hashtags", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "hashtags_id_seq" for serial column "hashtags.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "hashtags_pkey" for table "hashtags"
   -> 0.0928s
-- create_table("inbox_items", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "inbox_items_id_seq" for serial column "inbox_items.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "inbox_items_pkey" for table "inbox_items"
   -> 0.1028s
-- add_index("inbox_items", ["sender"], {:name=>"index_inbox_items_on_sender"})
   -> 0.0334s
-- add_index("inbox_items", ["sender_id"], {:name=>"index_inbox_items_on_sender_id"})
   -> 0.0336s
-- add_index("inbox_items", ["user_id"], {:name=>"index_inbox_items_on_user_id"})
   -> 0.0338s
-- add_index("inbox_items", ["workflow_state"], {:name=>"index_inbox_items_on_workflow_state"})
   -> 0.0420s
-- create_table("learning_outcome_groups", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "learning_outcome_groups_id_seq" for serial column "learning_outcome_groups.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "learning_outcome_groups_pkey" for table "learning_outcome_groups"
   -> 0.0904s
-- create_table("learning_outcome_results", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "learning_outcome_results_id_seq" for serial column "learning_outcome_results.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "learning_outcome_results_pkey" for table "learning_outcome_results"
   -> 0.0866s
-- add_index("learning_outcome_results", ["user_id", "content_tag_id"], {:name=>"index_learning_outcome_results_on_user_id_and_content_tag_id", :unique=>true})
   -> 0.0419s
-- create_table("learning_outcomes", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "learning_outcomes_id_seq" for serial column "learning_outcomes.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "learning_outcomes_pkey" for table "learning_outcomes"
   -> 0.1052s
-- create_table("mailboxes", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "mailboxes_id_seq" for serial column "mailboxes.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "mailboxes_pkey" for table "mailboxes"
   -> 0.0885s
-- add_index("mailboxes", ["handle"], {:name=>"index_mailboxes_on_handle"})
   -> 0.0422s
-- add_index("mailboxes", ["mailboxable_entity_id", "mailboxable_entity_type"], {:name=>"me_id_and_me_type"})
   -> 0.0419s
-- create_table("mailboxes_pseudonyms", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "mailboxes_pseudonyms_id_seq" for serial column "mailboxes_pseudonyms.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "mailboxes_pseudonyms_pkey" for table "mailboxes_pseudonyms"
   -> 0.0611s
-- create_table("media_objects", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "media_objects_id_seq" for serial column "media_objects.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "media_objects_pkey" for table "media_objects"
   -> 0.0751s
-- add_index("media_objects", ["attachment_id"], {:name=>"index_media_objects_on_attachment_id"})
   -> 0.0337s
-- add_index("media_objects", ["context_id", "context_type"], {:name=>"index_media_objects_on_context_id_and_context_type"})
   -> 0.0421s
-- add_index("media_objects", ["media_id"], {:name=>"index_media_objects_on_media_id"})
   -> 0.0420s
-- create_table("messages", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "messages_id_seq" for serial column "messages.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "messages_pkey" for table "messages"
   -> 0.0927s
-- add_index("messages", ["asset_context_id", "asset_context_type"], {:name=>"index_messages_on_asset_context_id_and_asset_context_type"})
   -> 0.0419s
-- add_index("messages", ["communication_channel_id"], {:name=>"index_messages_on_communication_channel_id"})
   -> 0.0421s
-- add_index("messages", ["context_id", "context_type", "notification_name", "to", "user_id"], {:name=>"existing_undispatched_message"})
   -> 0.0420s
-- add_index("messages", ["notification_id"], {:name=>"index_messages_on_notification_id"})
   -> 0.0422s
-- add_index("messages", ["notification_name", "workflow_state", "created_at"], {:name=>"index_messages_on_notification_name_workflow_state_created_at"})
   -> 0.0587s
-- add_index("messages", ["sent_at", "to_email", "user_id", "notification_category"], {:name=>"index_messages_on_sa_ui_te_nc"})
   -> 0.0420s
-- add_index("messages", ["user_id", "to_email", "dispatch_at"], {:name=>"index_messages_user_id_dispatch_at_to_email"})
   -> 0.0420s
-- add_index("messages", ["workflow_state", "dispatch_at"], {:name=>"index_messages_on_workflow_state_and_dispatch_at"})
   -> 0.0420s
-- create_table("notification_policies", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "notification_policies_id_seq" for serial column "notification_policies.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "notification_policies_pkey" for table "notification_policies"
   -> 0.0422s
-- add_index("notification_policies", ["communication_channel_id"], {:name=>"index_notification_policies_on_communication_channel_id"})
   -> 0.0586s
-- add_index("notification_policies", ["notification_id"], {:name=>"index_notification_policies_on_notification_id"})
   -> 0.0338s
-- add_index("notification_policies", ["user_id"], {:name=>"index_notification_policies_on_user_id"})
   -> 0.0335s
-- create_table("notifications", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "notifications_id_seq" for serial column "notifications.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "notifications_pkey" for table "notifications"
   -> 0.0691s
-- create_table("oauth_requests", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "oauth_requests_id_seq" for serial column "oauth_requests.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "oauth_requests_pkey" for table "oauth_requests"
   -> 0.0927s
-- add_index("oauth_requests", ["user_id"], {:name=>"index_oauth_requests_on_user_id"})
   -> 0.0421s
-- create_table("page_comments", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "page_comments_id_seq" for serial column "page_comments.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "page_comments_pkey" for table "page_comments"
   -> 0.0927s
-- add_index("page_comments", ["page_id", "page_type"], {:name=>"index_page_comments_on_page_id_and_page_type"})
   -> 0.0633s
-- add_index("page_comments", ["user_id"], {:name=>"index_page_comments_on_user_id"})
   -> 0.0375s
-- create_table("page_view_ranges", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "page_view_ranges_id_seq" for serial column "page_view_ranges.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "page_view_ranges_pkey" for table "page_view_ranges"
   -> 0.0843s
-- add_index("page_view_ranges", ["context_id", "context_type", "start_at", "end_at"], {:name=>"by_context_range"})
   -> 0.0419s
-- add_index("page_view_ranges", ["workflow_state", "updated_at"], {:name=>"index_page_view_ranges_on_workflow_state_and_updated_at"})
   -> 0.0420s
-- create_table("page_views", {:id=>false, :force=>true})
   -> 0.0590s
-- execute("ALTER TABLE page_views ADD PRIMARY KEY (request_id)")
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "page_views_pkey" for table "page_views"
   -> 0.0334s
-- add_index("page_views", ["account_id"], {:name=>"index_page_views_on_account_id"})
   -> 0.0338s
-- add_index("page_views", ["asset_user_access_id"], {:name=>"index_page_views_asset_user_access_id"})
   -> 0.0337s
-- add_index("page_views", ["context_type", "context_id"], {:name=>"index_page_views_on_context_type_and_context_id"})
   -> 0.0352s
-- add_index("page_views", ["summarized", "created_at"], {:name=>"index_page_views_summarized_created_at"})
   -> 0.0573s
-- add_index("page_views", ["user_id", "created_at"], {:name=>"index_page_views_on_user_id_and_created_at"})
   -> 0.0352s
-- create_table("plugin_settings", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "plugin_settings_id_seq" for serial column "plugin_settings.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "plugin_settings_pkey" for table "plugin_settings"
   -> 0.0844s
-- add_index("plugin_settings", ["name"], {:name=>"index_plugin_settings_on_name"})
   -> 0.0420s
-- create_table("pseudonyms", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "pseudonyms_id_seq" for serial column "pseudonyms.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "pseudonyms_pkey" for table "pseudonyms"
   -> 0.0928s
-- add_index("pseudonyms", ["account_id", "sis_source_id"], {:name=>"index_pseudonyms_on_account_id_and_sis_source_id"})
   -> 0.0419s
-- add_index("pseudonyms", ["communication_channel_id"], {:name=>"index_pseudonyms_on_communication_channel_id"})
   -> 0.0423s
-- add_index("pseudonyms", ["persistence_token"], {:name=>"index_pseudonyms_on_persistence_token"})
   -> 0.0419s
-- add_index("pseudonyms", ["single_access_token"], {:name=>"index_pseudonyms_on_single_access_token"})
   -> 0.0419s
-- add_index("pseudonyms", ["unique_id"], {:name=>"index_pseudonyms_on_unique_id"})
   -> 0.0695s
-- add_index("pseudonyms", ["user_id"], {:name=>"index_pseudonyms_on_user_id"})
   -> 0.0481s
-- create_table("quiz_groups", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "quiz_groups_id_seq" for serial column "quiz_groups.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "quiz_groups_pkey" for table "quiz_groups"
   -> 0.0677s
-- add_index("quiz_groups", ["quiz_id"], {:name=>"index_quiz_groups_on_quiz_id"})
   -> 0.0419s
-- create_table("quiz_questions", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "quiz_questions_id_seq" for serial column "quiz_questions.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "quiz_questions_pkey" for table "quiz_questions"
   -> 0.0943s
-- add_index("quiz_questions", ["assessment_question_id"], {:name=>"index_quiz_questions_on_assessment_question_id"})
   -> 0.0335s
-- add_index("quiz_questions", ["quiz_group_id"], {:name=>"quiz_questions_quiz_group_id"})
   -> 0.0337s
-- add_index("quiz_questions", ["quiz_id"], {:name=>"index_quiz_questions_on_quiz_id"})
   -> 0.0420s
-- create_table("quiz_submission_snapshots", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "quiz_submission_snapshots_id_seq" for serial column "quiz_submission_snapshots.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "quiz_submission_snapshots_pkey" for table "quiz_submission_snapshots"
   -> 0.0761s
-- add_index("quiz_submission_snapshots", ["quiz_submission_id"], {:name=>"index_quiz_submission_snapshots_on_quiz_submission_id"})
   -> 0.0501s
-- create_table("quiz_submissions", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "quiz_submissions_id_seq" for serial column "quiz_submissions.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "quiz_submissions_pkey" for table "quiz_submissions"
   -> 0.0844s
-- add_index("quiz_submissions", ["quiz_id", "user_id"], {:name=>"index_quiz_submissions_on_quiz_id_and_user_id", :unique=>true})
   -> 0.0419s
-- add_index("quiz_submissions", ["submission_id"], {:name=>"index_quiz_submissions_on_submission_id"})
   -> 0.0420s
-- add_index("quiz_submissions", ["temporary_user_code"], {:name=>"index_quiz_submissions_on_temporary_user_code"})
   -> 0.0588s
-- add_index("quiz_submissions", ["user_id"], {:name=>"index_quiz_submissions_on_user_id"})
   -> 0.0419s
-- create_table("quizzes", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "quizzes_id_seq" for serial column "quizzes.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "quizzes_pkey" for table "quizzes"
   -> 0.0846s
-- add_index("quizzes", ["assignment_id"], {:name=>"index_quizzes_on_assignment_id", :unique=>true})
   -> 0.0420s
-- add_index("quizzes", ["cloned_item_id"], {:name=>"index_quizzes_on_cloned_item_id"})
   -> 0.0586s
-- add_index("quizzes", ["context_id", "context_type"], {:name=>"index_quizzes_on_context_id_and_context_type"})
   -> 0.0435s
-- create_table("report_snapshots", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "report_snapshots_id_seq" for serial column "report_snapshots.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "report_snapshots_pkey" for table "report_snapshots"
   -> 0.1100s
-- create_table("role_overrides", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "role_overrides_id_seq" for serial column "role_overrides.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "role_overrides_pkey" for table "role_overrides"
   -> 0.0926s
-- add_index("role_overrides", ["context_id", "context_type"], {:name=>"index_role_overrides_on_context_id_and_context_type"})
   -> 0.0419s
-- create_table("rubric_assessments", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "rubric_assessments_id_seq" for serial column "rubric_assessments.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "rubric_assessments_pkey" for table "rubric_assessments"
   -> 0.0843s
-- add_index("rubric_assessments", ["artifact_id", "artifact_type"], {:name=>"index_rubric_assessments_on_artifact_id_and_artifact_type"})
   -> 0.0420s
-- add_index("rubric_assessments", ["assessor_id"], {:name=>"index_rubric_assessments_on_assessor_id"})
   -> 0.0587s
-- add_index("rubric_assessments", ["rubric_association_id"], {:name=>"index_rubric_assessments_on_rubric_association_id"})
   -> 0.0420s
-- add_index("rubric_assessments", ["rubric_id"], {:name=>"index_rubric_assessments_on_rubric_id"})
   -> 0.0420s
-- add_index("rubric_assessments", ["user_id"], {:name=>"index_rubric_assessments_on_user_id"})
   -> 0.0421s
-- create_table("rubric_associations", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "rubric_associations_id_seq" for serial column "rubric_associations.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "rubric_associations_pkey" for table "rubric_associations"
   -> 0.1011s
-- add_index("rubric_associations", ["association_id", "association_type"], {:name=>"index_rubric_associations_on_aid_and_atype"})
   -> 0.0420s
-- add_index("rubric_associations", ["context_code"], {:name=>"index_rubric_associations_on_context_code"})
   -> 0.0337s
-- add_index("rubric_associations", ["context_id", "context_type"], {:name=>"index_rubric_associations_on_context_id_and_context_type"})
   -> 0.0437s
-- add_index("rubric_associations", ["rubric_id"], {:name=>"index_rubric_associations_on_rubric_id"})
   -> 0.0337s
-- create_table("rubrics", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "rubrics_id_seq" for serial column "rubrics.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "rubrics_pkey" for table "rubrics"
   -> 0.0928s
-- add_index("rubrics", ["context_code"], {:name=>"index_rubrics_on_context_code"})
   -> 0.0419s
-- add_index("rubrics", ["context_id", "context_type"], {:name=>"index_rubrics_on_context_id_and_context_type"})
   -> 0.0503s
-- add_index("rubrics", ["rubric_id"], {:name=>"index_rubrics_on_rubric_id"})
   -> 0.0505s
-- add_index("rubrics", ["user_id"], {:name=>"index_rubrics_on_user_id"})
   -> 0.0545s
-- create_table("scribd_accounts", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "scribd_accounts_id_seq" for serial column "scribd_accounts.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "scribd_accounts_pkey" for table "scribd_accounts"
   -> 0.0803s
-- add_index("scribd_accounts", ["scribdable_id", "scribdable_type"], {:name=>"index_scribd_accounts_on_scribdable_id_and_scribdable_type"})
   -> 0.0336s
-- create_table("scribd_mime_types", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "scribd_mime_types_id_seq" for serial column "scribd_mime_types.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "scribd_mime_types_pkey" for table "scribd_mime_types"
   -> 0.0843s
-- add_index("scribd_mime_types", ["extension"], {:name=>"index_scribd_mime_types_on_extension"})
   -> 0.0504s
-- create_table("sessions", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "sessions_id_seq" for serial column "sessions.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "sessions_pkey" for table "sessions"
   -> 0.0761s
-- add_index("sessions", ["session_id"], {:name=>"index_sessions_on_session_id"})
   -> 0.0335s
-- add_index("sessions", ["updated_at"], {:name=>"index_sessions_on_updated_at"})
   -> 0.0352s
-- create_table("settings", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "settings_id_seq" for serial column "settings.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "settings_pkey" for table "settings"
   -> 0.2010s
-- create_table("short_message_associations", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "short_message_associations_id_seq" for serial column "short_message_associations.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "short_message_associations_pkey" for table "short_message_associations"
   -> 0.0421s
-- add_index("short_message_associations", ["context_id", "context_type"], {:name=>"index_short_message_associations_on_context_id_and_context_type"})
   -> 0.0558s
-- add_index("short_message_associations", ["short_message_id"], {:name=>"index_short_message_associations_on_short_message_id"})
   -> 0.0366s
-- create_table("short_messages", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "short_messages_id_seq" for serial column "short_messages.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "short_messages_pkey" for table "short_messages"
   -> 0.0843s
-- add_index("short_messages", ["user_id"], {:name=>"index_short_messages_on_user_id"})
   -> 0.0419s
-- create_table("sis_batch_log_entries", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "sis_batch_log_entries_id_seq" for serial column "sis_batch_log_entries.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "sis_batch_log_entries_pkey" for table "sis_batch_log_entries"
   -> 0.1178s
-- create_table("sis_batches", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "sis_batches_id_seq" for serial column "sis_batches.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "sis_batches_pkey" for table "sis_batches"
   -> 0.0841s
-- create_table("sis_cross_listed_sections", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "sis_cross_listed_sections_id_seq" for serial column "sis_cross_listed_sections.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "sis_cross_listed_sections_pkey" for table "sis_cross_listed_sections"
   -> 0.0762s
-- add_index("sis_cross_listed_sections", ["root_account_id", "sis_source_id"], {:name=>"cross_listed_sis_entries"})
   -> 0.0501s
-- create_table("stream_item_instances", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "stream_item_instances_id_seq" for serial column "stream_item_instances.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "stream_item_instances_pkey" for table "stream_item_instances"
   -> 0.0440s
-- create_table("stream_items", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "stream_items_id_seq" for serial column "stream_items.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "stream_items_pkey" for table "stream_items"
   -> 0.0757s
-- add_index("stream_items", ["item_asset_string", "created_at"], {:name=>"index_stream_items_on_item_asset_string_and_created_at"})
   -> 0.0419s
-- add_index("stream_items", ["user_id", "context_code", "created_at"], {:name=>"uid_cc_ca"})
   -> 0.0561s
-- add_index("stream_items", ["user_id", "created_at"], {:name=>"index_stream_items_on_user_id_created_at"})
   -> 0.0422s
-- create_table("submission_comment_participants", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "submission_comment_participants_id_seq" for serial column "submission_comment_participants.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "submission_comment_participants_pkey" for table "submission_comment_participants"
   -> 0.3331s
-- add_index("submission_comment_participants", ["submission_comment_id"], {:name=>"index_submission_comment_participants_on_submission_comment_id"})
   -> 0.0626s
-- add_index("submission_comment_participants", ["user_id"], {:name=>"index_submission_comment_participants_on_user_id"})
   -> 0.0586s
-- create_table("submission_comments", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "submission_comments_id_seq" for serial column "submission_comments.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "submission_comments_pkey" for table "submission_comments"
   -> 0.1122s
-- add_index("submission_comments", ["assessment_request_id"], {:name=>"index_submission_comments_on_assessment_request_id"})
   -> 0.0559s
-- add_index("submission_comments", ["author_id"], {:name=>"index_submission_comments_on_author_id"})
   -> 0.0586s
-- add_index("submission_comments", ["context_id", "context_type"], {:name=>"index_submission_comments_on_context_id_and_context_type"})
   -> 0.0505s
-- add_index("submission_comments", ["recipient_id"], {:name=>"index_submission_comments_on_recipient_id"})
   -> 0.0420s
-- add_index("submission_comments", ["submission_id"], {:name=>"index_submission_comments_on_submission_id"})
   -> 0.0587s
-- create_table("submissions", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "submissions_id_seq" for serial column "submissions.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "submissions_pkey" for table "submissions"
   -> 0.0859s
-- add_index("submissions", ["assignment_id", "submission_type"], {:name=>"index_submissions_on_assignment_id_and_submission_type"})
   -> 0.0503s
-- add_index("submissions", ["attachment_id", "submission_type", "process_attempts"], {:name=>"aid_submission_type_process_attempts"})
   -> 0.0644s
-- add_index("submissions", ["grader_id"], {:name=>"index_submissions_on_grader_id"})
   -> 0.0530s
-- add_index("submissions", ["group_id"], {:name=>"index_submissions_on_group_id"})
   -> 0.0504s
-- add_index("submissions", ["user_id", "assignment_id"], {:name=>"index_submissions_on_user_id_and_assignment_id", :unique=>true})
   -> 0.0588s
-- add_index("submissions", ["user_id"], {:name=>"index_submissions_on_user_id"})
   -> 0.0709s
-- create_table("thumbnails", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "thumbnails_id_seq" for serial column "thumbnails.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "thumbnails_pkey" for table "thumbnails"
   -> 0.0971s
-- add_index("thumbnails", ["parent_id"], {:name=>"index_thumbnails_on_parent_id"})
   -> 0.0337s
-- create_table("user_account_associations", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "user_account_associations_id_seq" for serial column "user_account_associations.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "user_account_associations_pkey" for table "user_account_associations"
   -> 0.0503s
-- add_index("user_account_associations", ["account_id"], {:name=>"index_user_account_associations_on_account_id"})
   -> 0.0690s
-- add_index("user_account_associations", ["user_id"], {:name=>"index_user_account_associations_on_user_id"})
   -> 0.0317s
-- create_table("user_notes", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "user_notes_id_seq" for serial column "user_notes.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "user_notes_pkey" for table "user_notes"
   -> 0.0762s
-- add_index("user_notes", ["user_id", "workflow_state"], {:name=>"index_user_notes_on_user_id_and_workflow_state"})
   -> 0.0336s
-- create_table("user_services", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "user_services_id_seq" for serial column "user_services.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "user_services_pkey" for table "user_services"
   -> 0.0923s
-- add_index("user_services", ["id", "type"], {:name=>"index_user_services_on_id_and_type"})
   -> 0.0441s
-- add_index("user_services", ["user_id"], {:name=>"index_user_services_on_user_id"})
   -> 0.0420s
-- create_table("users", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
   -> 0.0928s
-- add_index("users", ["avatar_state", "avatar_image_updated_at"], {:name=>"index_users_on_avatar_state_and_avatar_image_updated_at"})
   -> 0.0545s
-- add_index("users", ["creation_unique_id", "creation_sis_batch_id"], {:name=>"users_sis_creation"})
   -> 0.0378s
-- add_index("users", ["id", "type"], {:name=>"index_users_on_id_and_type"})
   -> 0.0419s
-- add_index("users", ["moved_in_account_structure"], {:name=>"index_users_on_moved_in_account_structure"})
   -> 0.0421s
-- add_index("users", ["sortable_name"], {:name=>"index_users_on_sortable_name"})
   -> 0.0420s
-- add_index("users", ["uuid"], {:name=>"index_users_on_uuid"})
   -> 0.0421s
-- create_table("versions", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "versions_id_seq" for serial column "versions.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "versions_pkey" for table "versions"
   -> 0.0925s
-- add_index("versions", ["versionable_id", "versionable_type"], {:name=>"index_versions_on_versionable_id_and_versionable_type"})
   -> 0.0420s
-- create_table("web_conference_participants", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "web_conference_participants_id_seq" for serial column "web_conference_participants.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "web_conference_participants_pkey" for table "web_conference_participants"
   -> 0.0760s
-- add_index("web_conference_participants", ["user_id"], {:name=>"index_web_conference_participants_on_user_id"})
   -> 0.0667s
-- add_index("web_conference_participants", ["web_conference_id"], {:name=>"index_web_conference_participants_on_web_conference_id"})
   -> 0.0423s
-- create_table("web_conferences", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "web_conferences_id_seq" for serial column "web_conferences.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "web_conferences_pkey" for table "web_conferences"
   -> 0.0857s
-- add_index("web_conferences", ["context_id", "context_type"], {:name=>"index_web_conferences_on_context_id_and_context_type"})
   -> 0.0337s
-- add_index("web_conferences", ["user_id"], {:name=>"index_web_conferences_on_user_id"})
   -> 0.0336s
-- create_table("wiki_namespaces", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "wiki_namespaces_id_seq" for serial column "wiki_namespaces.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "wiki_namespaces_pkey" for table "wiki_namespaces"
   -> 0.1010s
-- add_index("wiki_namespaces", ["context_id", "context_type"], {:name=>"index_wiki_namespaces_on_context_id_and_context_type"})
   -> 0.0420s
-- add_index("wiki_namespaces", ["wiki_id"], {:name=>"index_wiki_namespaces_on_wiki_id"})
   -> 0.0421s
-- create_table("wiki_page_comments", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "wiki_page_comments_id_seq" for serial column "wiki_page_comments.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "wiki_page_comments_pkey" for table "wiki_page_comments"
   -> 0.0760s
-- add_index("wiki_page_comments", ["wiki_page_id", "workflow_state"], {:name=>"index_wiki_page_comments_on_wiki_page_id_and_workflow_state"})
   -> 0.0586s
-- create_table("wiki_pages", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "wiki_pages_id_seq" for serial column "wiki_pages.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "wiki_pages_pkey" for table "wiki_pages"
   -> 0.0844s
-- add_index("wiki_pages", ["cloned_item_id"], {:name=>"index_wiki_pages_on_cloned_item_id"})
   -> 0.0336s
-- add_index("wiki_pages", ["user_id"], {:name=>"index_wiki_pages_on_user_id"})
   -> 0.0420s
-- add_index("wiki_pages", ["wiki_id"], {:name=>"index_wiki_pages_on_wiki_id"})
   -> 0.0421s
-- create_table("wikis", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "wikis_id_seq" for serial column "wikis.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "wikis_pkey" for table "wikis"
   -> 0.0506s
==  InitCanvasDb: migrated (21.3398s) =========================================

==  CreateDelayedJobs: migrating ==============================================
-- create_table(:delayed_jobs)
NOTICE:  CREATE TABLE will create implicit sequence "delayed_jobs_id_seq" for serial column "delayed_jobs.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "delayed_jobs_pkey" for table "delayed_jobs"
   -> 0.0938s
-- add_index(:delayed_jobs, [:priority, :run_at], {:name=>"delayed_jobs_priority"})
   -> 0.0423s
-- add_index(:delayed_jobs, [:queue], {:name=>"delayed_jobs_queue"})
   -> 0.0839s
==  CreateDelayedJobs: migrated (0.2202s) =====================================

==  AddExtraTimeToQuizSubmissions: migrating ==================================
-- add_column(:quiz_submissions, :extra_time, :integer)
   -> 0.0008s
-- add_column(:quiz_submissions, :manually_unlocked, :boolean)
   -> 0.0004s
==  AddExtraTimeToQuizSubmissions: migrated (0.0014s) =========================

==  AddIpFilterToQuizzes: migrating ===========================================
-- add_column(:quizzes, :ip_filter, :string)
   -> 0.0007s
==  AddIpFilterToQuizzes: migrated (0.0008s) ==================================

==  AddAttachmentToContentMigration: migrating ================================
-- add_column(:content_migrations, :exported_attachment_id, :integer, {:limit=>8})
   -> 0.0007s
==  AddAttachmentToContentMigration: migrated (0.0009s) =======================

==  AddDelayedJobsTag: migrating ==============================================
-- add_column(:delayed_jobs, :tag, :string)
   -> 0.0006s
-- add_index(:delayed_jobs, [:tag])
   -> 0.0354s
==  AddDelayedJobsTag: migrated (0.0362s) =====================================

==  CreateAccountNotifications: migrating =====================================
-- create_table(:account_notifications)
NOTICE:  CREATE TABLE will create implicit sequence "account_notifications_id_seq" for serial column "account_notifications.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "account_notifications_pkey" for table "account_notifications"
   -> 0.0873s
-- add_index(:account_notifications, [:account_id, :start_at])
   -> 0.0419s
==  CreateAccountNotifications: migrated (0.1294s) ============================

==  AddPodcastOptionsToDiscussionTopics: migrating ============================
-- add_column(:discussion_topics, :podcast_enabled, :boolean)
   -> 0.0006s
-- add_column(:discussion_topics, :podcast_has_student_posts, :boolean)
   -> 0.0003s
==  AddPodcastOptionsToDiscussionTopics: migrated (0.0011s) ===================

==  AddRequireInitialPostToDiscussionTopics: migrating ========================
-- add_column(:discussion_topics, :require_initial_post, :boolean)
   -> 0.0005s
==  AddRequireInitialPostToDiscussionTopics: migrated (0.0006s) ===============

==  AddRestrictionOptionsToCoursesAndSections: migrating ======================
-- add_column(:courses, :restrict_enrollments_to_course_dates, :boolean)
   -> 0.0006s
-- add_column(:course_sections, :restrict_enrollments_to_section_dates, :boolean)
   -> 0.0005s
-- add_column(:enrollment_terms, :ignore_term_date_restrictions, :boolean)
   -> 0.0004s
==  AddRestrictionOptionsToCoursesAndSections: migrated (0.0017s) =============

==  ChangeFudgePointsToFloat: migrating =======================================
-- change_column(:quiz_submissions, :fudge_points, :float)
   -> 0.3011s
==  ChangeFudgePointsToFloat: migrated (0.3012s) ==============================

==  AddCrossListingInfo: migrating ============================================
-- add_column(:course_sections, :account_id, :integer, {:limit=>8})
   -> 0.0011s
==  AddCrossListingInfo: migrated (0.0012s) ===================================

==  AddUngradedCountToAssignments: migrating ==================================
-- add_column(:assignments, :needs_grading_count, :integer, {:default=>0})
   -> 0.0012s
-- execute("      UPDATE assignments SET needs_grading_count = COALESCE((\n        SELECT COUNT(*)\n        FROM submissions s\n        INNER JOIN enrollments e ON e.user_id = s.user_id AND e.workflow_state = 'active'\n        WHERE s.assignment_id = assignments.id\n          AND e.course_id = assignments.context_id\n          AND (s.score IS NULL\n            OR NOT grade_matches_current_submission\n            OR s.workflow_state = 'submitted'\n            OR s.workflow_state = 'pending_review'\n          )\n          AND s.submission_type IS NOT NULL\n      ), 0)\n")
   -> 0.0033s
==  AddUngradedCountToAssignments: migrated (0.0046s) =========================

==  CreateContextExternalTools: migrating =====================================
-- create_table(:context_external_tools)
NOTICE:  CREATE TABLE will create implicit sequence "context_external_tools_id_seq" for serial column "context_external_tools.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "context_external_tools_pkey" for table "context_external_tools"
   -> 0.1014s
==  CreateContextExternalTools: migrated (0.1015s) ============================

==  AddAssociatedAssetToLearningOutcomeResults: migrating =====================
-- add_column(:learning_outcome_results, :associated_asset_id, :integer, {:limit=>8})
   -> 0.0006s
-- add_column(:learning_outcome_results, :associated_asset_type, :string)
   -> 0.0003s
-- remove_index(:learning_outcome_results, [:user_id, :content_tag_id])
   -> 0.0151s
-- add_index(:learning_outcome_results, [:user_id, :content_tag_id, :associated_asset_id, :associated_asset_type], {:unique=>true, :name=>"index_learning_outcome_results_association"})
   -> 0.0433s
==  AddAssociatedAssetToLearningOutcomeResults: migrated (0.0596s) ============

==  ChangeContextMessageViewedUserIdsSize: migrating ==========================
-- change_column(:context_messages, :viewed_user_ids, :text)
   -> 0.0006s
==  ChangeContextMessageViewedUserIdsSize: migrated (0.0007s) =================

==  AddStreamItemInstancesIndex: migrating ====================================
-- add_index("stream_item_instances", ["stream_item_id"])
   -> 0.0440s
==  AddStreamItemInstancesIndex: migrated (0.0441s) ===========================

==  AddCreatedAtToPageViewsIndex: migrating ===================================
-- remove_index(:page_views, {:column=>:account_id})
   -> 0.0028s
-- add_index(:page_views, [:account_id, :created_at])
   -> 0.0412s
==  AddCreatedAtToPageViewsIndex: migrated (0.0442s) ==========================

==  UngradedCountTriggers: migrating ==========================================
-- create_trigger("enrollments_after_insert_row_when_new_workflow_state_active__tr", {:generated=>true})
   -> 0.0002s
NOTICE:  trigger "enrollments_after_insert_row_when_new_workflow_state_active__tr" for table "enrollments" does not exist, skipping
NOTICE:  function enrollments_after_insert_row_when_new_workflow_state_active__tr() does not exist, skipping
-- create_trigger("enrollments_after_update_row_when_new_workflow_state_old_wor_tr", {:generated=>true})
   -> 0.0001s
NOTICE:  trigger "enrollments_after_update_row_when_new_workflow_state_old_wor_tr" for table "enrollments" does not exist, skipping
NOTICE:  function enrollments_after_update_row_when_new_workflow_state_old_wor_tr() does not exist, skipping
-- create_trigger("submissions_after_update_row_tr", {:generated=>true})
   -> 0.0001s
NOTICE:  trigger "submissions_after_update_row_when_old_submission_type_is_not_tr" for table "submissions" does not exist, skipping
NOTICE:  function submissions_after_update_row_when_old_submission_type_is_not_tr() does not exist, skipping
==  UngradedCountTriggers: migrated (0.0104s) =================================

==  AddQuizRequireLockdownBrowser: migrating ==================================
-- add_column(:quizzes, :require_lockdown_browser, :boolean)
   -> 0.0007s
==  AddQuizRequireLockdownBrowser: migrated (0.0009s) =========================

==  UngradedCountTriggers2: migrating =========================================
-- drop_trigger("enrollments_after_insert_row_when_new_workflow_state_active__tr", "enrollments", {:generated=>true})
   -> 0.0007s
-- drop_trigger("enrollments_after_update_row_when_new_workflow_state_old_wor_tr", "enrollments", {:generated=>true})
   -> 0.0004s
-- drop_trigger("submissions_after_update_row_tr", "submissions", {:generated=>true})
NOTICE:  trigger "submissions_after_update_row_tr" for table "submissions" does not exist, skipping
NOTICE:  function submissions_after_update_row_tr() does not exist, skipping
   -> 0.0005s
-- drop_trigger("submissions_after_update_row_when_old_submission_type_is_not_tr", "submissions", {:generated=>true})
   -> 0.0004s
-- create_trigger("enrollments_after_insert_row_when_new_workflow_state_active__tr", {:generated=>true, :compatibility=>1})
   -> 0.0001s
NOTICE:  trigger "enrollments_after_insert_row_when_new_workflow_state_active__tr" for table "enrollments" does not exist, skipping
NOTICE:  function enrollments_after_insert_row_when_new_workflow_state_active__tr() does not exist, skipping
-- create_trigger("enrollments_after_update_row_when_new_workflow_state_old_wor_tr", {:generated=>true, :compatibility=>1})
   -> 0.0001s
NOTICE:  trigger "enrollments_after_update_row_when_new_workflow_state_old_wor_tr" for table "enrollments" does not exist, skipping
NOTICE:  function enrollments_after_update_row_when_new_workflow_state_old_wor_tr() does not exist, skipping
-- create_trigger("submissions_after_update_row_tr", {:generated=>true, :compatibility=>1})
   -> 0.0001s
NOTICE:  trigger "submissions_after_update_row_when_old_submission_type_is_not_tr" for table "submissions" does not exist, skipping
NOTICE:  function submissions_after_update_row_when_old_submission_type_is_not_tr() does not exist, skipping
==  UngradedCountTriggers2: migrated (0.0076s) ================================

==  AddPositionToCommunicationChannelIndexes: migrating =======================
-- remove_index(:communication_channels, {:column=>["user_id"]})
   -> 0.0022s
-- add_index(:communication_channels, ["user_id", "position"])
   -> 0.0423s
-- remove_index(:communication_channels, {:column=>["pseudonym_id"]})
   -> 0.0021s
-- add_index(:communication_channels, ["pseudonym_id", "position"])
   -> 0.0399s
==  AddPositionToCommunicationChannelIndexes: migrated (0.0868s) ==============

==  StringColumnsToText: migrating ============================================
-- change_column(:error_reports, :url, :text)
   -> 0.0006s
-- change_column(:error_reports, :message, :text)
   -> 0.0003s
-- change_column(:content_tags, :url, :text)
   -> 0.0005s
-- change_column(:page_views, :user_agent, :text)
   -> 0.0004s
==  StringColumnsToText: migrated (0.0021s) ===================================

==  PostgresCompatFixes: migrating ============================================
-- change_column(:attachments, :size, :bigint)
   -> 0.5270s
-- change_column(:error_reports, :user_agent, :text)
   -> 0.0004s
==  PostgresCompatFixes: migrated (0.5275s) ===================================

==  AddOldMediaIdToMediaComments: migrating ===================================
-- add_column(:media_objects, :old_media_id, :string)
   -> 0.0006s
-- add_index(:media_objects, [:old_media_id])
   -> 0.0418s
==  AddOldMediaIdToMediaComments: migrated (0.0426s) ==========================

==  AllowLongCertificateFingerprint: migrating ================================
-- change_column(:account_authorization_configs, :certificate_fingerprint, :text)
   -> 0.0006s
==  AllowLongCertificateFingerprint: migrated (0.0006s) =======================

==  VarcharsToText: migrating =================================================
-- change_column(:assessment_question_banks, :title, :text)
   -> 0.0004s
-- change_column(:assessment_questions, :name, :text)
   -> 0.0003s
-- change_column(:asset_user_accesses, :display_name, :text)
   -> 0.0003s
-- change_column(:attachments, :display_name, :text)
   -> 0.0003s
-- change_column(:attachments, :filename, :text)
   -> 0.0002s
-- change_column(:content_tags, :title, :text)
   -> 0.0003s
-- change_column(:context_modules, :name, :text)
   -> 0.0003s
-- change_column(:delayed_messages, :name_of_topic, :text)
   -> 0.0003s
-- change_column(:messages, :from_name, :text)
   -> 0.0003s
-- change_column(:messages, :subject, :text)
   -> 0.0003s
-- change_column(:notifications, :sms_body, :text)
   -> 0.0003s
-- change_column(:page_views, :url, :text)
   -> 0.0003s
-- change_column(:users, :features_used, :text)
   -> 0.0004s
-- change_column(:wiki_pages, :url, :text)
   -> 0.0003s
==  VarcharsToText: migrated (0.0049s) ========================================

==  AddContentExport: migrating ===============================================
-- create_table(:content_exports)
NOTICE:  CREATE TABLE will create implicit sequence "content_exports_id_seq" for serial column "content_exports.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "content_exports_pkey" for table "content_exports"
   -> 0.0781s
-- add_index(:content_exports, [:course_id])
   -> 0.0420s
-- add_index(:content_exports, [:user_id])
   -> 0.0337s
==  AddContentExport: migrated (0.1541s) ======================================

==  WebConferenceSettings: migrating ==========================================
-- add_column(:web_conferences, :settings, :text)
   -> 0.0005s
==  WebConferenceSettings: migrated (0.0006s) =================================

==  AddWorkflowStateToGradingStandards: migrating =============================
-- add_column(:grading_standards, :workflow_state, :string)
   -> 0.0005s
==  AddWorkflowStateToGradingStandards: migrated (0.1325s) ====================

==  AddMigrationIdsForCcImporting: migrating ==================================
-- add_column(:context_external_tools, :migration_id, :string)
   -> 0.0004s
-- add_column(:external_feeds, :migration_id, :string)
   -> 0.0003s
-- add_column(:grading_standards, :migration_id, :string)
   -> 0.0003s
-- add_column(:learning_outcome_groups, :migration_id, :string)
   -> 0.0003s
==  AddMigrationIdsForCcImporting: migrated (0.0015s) =========================

==  AddGradePublishingStatusToEnrollments: migrating ==========================
-- add_column(:enrollments, :grade_publishing_status, :string, {:default=>"unpublished"})
   -> 0.0010s
-- add_column(:enrollments, :last_publish_attempt_at, :datetime)
   -> 0.0003s
==  AddGradePublishingStatusToEnrollments: migrated (0.0015s) =================

==  AddMediaCommentToContextMessage: migrating ================================
-- add_column(:context_messages, :media_comment_id, :string)
   -> 0.0005s
-- add_column(:context_messages, :media_comment_type, :string)
   -> 0.0004s
==  AddMediaCommentToContextMessage: migrated (0.0020s) =======================

==  AddLastCourseToCourseSection: migrating ===================================
-- add_column(:course_sections, :last_course_id, :integer, {:limit=>8})
   -> 0.0005s
==  AddLastCourseToCourseSection: migrated (0.0007s) ==========================

==  AddQuizRequireLockdownBrowserForResults: migrating ========================
-- add_column(:quizzes, :require_lockdown_browser_for_results, :boolean)
   -> 0.0005s
==  AddQuizRequireLockdownBrowserForResults: migrated (0.0006s) ===============

==  RenameLastCourseToNonxlistCourseInCourseSection: migrating ================
-- rename_column(:course_sections, :last_course_id, :nonxlist_course_id)
   -> 0.0005s
==  RenameLastCourseToNonxlistCourseInCourseSection: migrated (0.0005s) =======

==  AddDelayedJobsMaxAttempts: migrating ======================================
-- add_column(:delayed_jobs, :max_attempts, :integer)
   -> 0.0006s
==  AddDelayedJobsMaxAttempts: migrated (0.0008s) =============================

==  ExpandContentMigrationMigrationSettings: migrating ========================
-- change_column(:content_migrations, :migration_settings, :text, {:limit=>512000})
   -> 0.0885s
==  ExpandContentMigrationMigrationSettings: migrated (0.0886s) ===============

==  AddDisabledToPluginSettings: migrating ====================================
-- add_column(:plugin_settings, :disabled, :boolean)
   -> 0.0004s
==  AddDisabledToPluginSettings: migrated (0.0005s) ===========================

==  AddThumbnailUuid: migrating ===============================================
-- add_column(:thumbnails, :uuid, :string)
   -> 0.0005s
-- add_index(:thumbnails, [:id, :uuid])
   -> 0.0381s
==  AddThumbnailUuid: migrated (0.0402s) ======================================

==  AddErrorReportsDataHash: migrating ========================================
-- add_column(:error_reports, :data, :text)
   -> 0.0005s
==  AddErrorReportsDataHash: migrated (0.0007s) ===============================

==  AddSisCommunicationChannelToPseudonyms: migrating =========================
-- add_column(:pseudonyms, :sis_communication_channel_id, :integer, {:limit=>8})
   -> 0.0006s
==  AddSisCommunicationChannelToPseudonyms: migrated (0.0008s) ================

==  AddErrorReportCategory: migrating =========================================
-- add_column(:error_reports, :category, :string)
   -> 0.0006s
-- add_index(:error_reports, :category)
   -> 0.0383s
==  AddErrorReportCategory: migrated (0.0392s) ================================

==  AddStreamItemInstanceHidden: migrating ====================================
-- add_column(:stream_item_instances, :hidden, :boolean, {:default=>false, :null=>false})
   -> 0.0015s
-- add_index(:stream_item_instances, ["user_id", "hidden", "id", "stream_item_id"], {:name=>"index_stream_item_instances_global"})
   -> 0.0376s
-- add_index(:stream_item_instances, ["user_id", "context_code", "hidden", "id", "stream_item_id"], {:name=>"index_stream_item_instances_context"})
   -> 0.0336s
==  AddStreamItemInstanceHidden: migrated (0.0730s) ===========================

==  AddTemplateCourseIdToCourses: migrating ===================================
-- add_column(:courses, :template_course_id, :integer, {:limit=>8})
   -> 0.0004s
-- add_index(:courses, [:template_course_id])
   -> 0.0415s
==  AddTemplateCourseIdToCourses: migrated (0.0420s) ==========================

==  CreateDelayedJobsTestStory: migrating =====================================
==  CreateDelayedJobsTestStory: migrated (0.0000s) ============================

==  AddDelayedJobsStrand: migrating ===========================================
-- add_column(:delayed_jobs, :strand, :string)
   -> 0.0007s
-- add_index(:delayed_jobs, :strand)
   -> 0.0413s
==  AddDelayedJobsStrand: migrated (0.0423s) ==================================

==  Conversations: migrating ==================================================
-- create_table("conversations")
NOTICE:  CREATE TABLE will create implicit sequence "conversations_id_seq" for serial column "conversations.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "conversations_pkey" for table "conversations"
   -> 0.0425s
-- add_index("conversations", ["private_hash"], {:unique=>true})
   -> 0.0559s
-- create_table("conversation_participants")
NOTICE:  CREATE TABLE will create implicit sequence "conversation_participants_id_seq" for serial column "conversation_participants.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "conversation_participants_pkey" for table "conversation_participants"
   -> 0.0365s
-- add_index("conversation_participants", ["conversation_id"])
   -> 0.0420s
-- add_index("conversation_participants", ["user_id", "last_message_at"])
   -> 0.0587s
-- create_table("conversation_messages")
NOTICE:  CREATE TABLE will create implicit sequence "conversation_messages_id_seq" for serial column "conversation_messages.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "conversation_messages_pkey" for table "conversation_messages"
   -> 0.0678s
-- add_index("conversation_messages", ["conversation_id", "created_at"])
   -> 0.0586s
-- create_table("conversation_message_participants")
NOTICE:  CREATE TABLE will create implicit sequence "conversation_message_participants_id_seq" for serial column "conversation_message_participants.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "conversation_message_participants_pkey" for table "conversation_message_participants"
   -> 0.0422s
==  Conversations: migrated (0.4048s) =========================================

==  AddSisBatchBatchMode: migrating ===========================================
-- add_column(:sis_batches, :batch_mode, :boolean)
   -> 0.0007s
-- add_column(:sis_batches, :batch_mode_term_id, :integer, {:limit=>8})
   -> 0.0004s
==  AddSisBatchBatchMode: migrated (0.0012s) ==================================

==  CreateAccessTokens: migrating =============================================
-- create_table(:access_tokens)
NOTICE:  CREATE TABLE will create implicit sequence "access_tokens_id_seq" for serial column "access_tokens.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "access_tokens_pkey" for table "access_tokens"
   -> 0.0720s
-- add_index(:access_tokens, [:token], {:unique=>true})
   -> 0.0519s
-- add_column(:developer_keys, :user_id_int, :integer, {:limit=>8})
   -> 0.0005s
-- execute("        UPDATE developer_keys SET user_id_int = CAST(user_id AS INTEGER) WHERE user_id IS NOT NULL\n")
   -> 0.0003s
-- remove_column(:developer_keys, :user_id)
   -> 0.0003s
-- rename_column(:developer_keys, :user_id_int, :user_id)
   -> 0.0002s
-- add_column(:developer_keys, :name, :string)
   -> 0.0003s
==  CreateAccessTokens: migrated (0.1259s) ====================================

==  AddParametersToAccountReports: migrating ==================================
-- add_column(:account_reports, :parameters, :text)
   -> 0.0004s
==  AddParametersToAccountReports: migrated (0.0004s) =========================

==  RemoveQuizDataIds: migrating ==============================================
==  RemoveQuizDataIds: migrated (0.0013s) =====================================

==  CreateTriggerSubmissionsInsert: migrating =================================
-- create_trigger("submissions_after_insert_row_tr", {:generated=>true, :compatibility=>1})
   -> 0.0001s
NOTICE:  trigger "submissions_after_insert_row_when_new_submission_type_is_not_tr" for table "submissions" does not exist, skipping
NOTICE:  function submissions_after_insert_row_when_new_submission_type_is_not_tr() does not exist, skipping
==  CreateTriggerSubmissionsInsert: migrated (0.0028s) ========================

==  CleanupDelayedJobsIndexes: migrating ======================================
-- remove_index(:delayed_jobs, {:name=>"delayed_jobs_queue"})
   -> 0.0021s
-- remove_index(:delayed_jobs, {:name=>"delayed_jobs_priority"})
   -> 0.0014s
==  CleanupDelayedJobsIndexes: migrated (0.0351s) =============================

==  ConversationTweaks: migrating =============================================
-- add_column(:conversation_participants, :last_authored_at, :datetime)
   -> 0.0006s
==  ConversationTweaks: migrated (0.0007s) ====================================

==  AddGroupRootAccount: migrating ============================================
-- add_column(:groups, :root_account_id, :integer, {:limit=>8})
   -> 0.0007s
==  AddGroupRootAccount: migrated (0.0023s) ===================================

==  AddGroupSisColumns: migrating =============================================
-- add_column(:groups, :sis_source_id, :string)
   -> 0.0006s
-- add_column(:groups, :sis_name, :string)
   -> 0.0003s
-- add_column(:groups, :sis_batch_id, :string)
   -> 0.0003s
-- add_column(:group_memberships, :sis_batch_id, :string)
   -> 0.0004s
==  AddGroupSisColumns: migrated (0.0020s) ====================================

==  RefactorAbstractCourses: migrating ========================================
-- remove_column(:course_sections, :abstract_course_id)
   -> 0.0010s
-- remove_index(:abstract_courses, :department_id)
   -> 0.0019s
-- remove_column(:abstract_courses, :college_id)
   -> 0.0004s
-- rename_column(:abstract_courses, :department_id, :account_id)
   -> 0.0002s
-- rename_column(:abstract_courses, :course_code, :short_name)
   -> 0.0002s
-- add_column(:abstract_courses, :enrollment_term_id, :integer, {:limit=>8})
   -> 0.0003s
-- add_column(:abstract_courses, :sis_course_code, :string)
   -> 0.0003s
-- add_column(:abstract_courses, :sis_name, :string)
   -> 0.0002s
-- add_column(:abstract_courses, :workflow_state, :string)
   -> 0.0002s
-- add_index(:abstract_courses, :account_id)
   -> 0.0435s
-- add_index(:abstract_courses, :enrollment_term_id)
   -> 0.0436s
==  RefactorAbstractCourses: migrated (0.1000s) ===============================

==  MessageAttachmentsAndMediaObjects: migrating ==============================
-- add_column(:conversations, :has_attachments, :boolean)
   -> 0.0006s
-- add_column(:conversations, :has_media_objects, :boolean)
   -> 0.0004s
-- add_column(:conversation_participants, :has_attachments, :boolean)
   -> 0.0004s
-- add_column(:conversation_participants, :has_media_objects, :boolean)
   -> 0.0003s
==  MessageAttachmentsAndMediaObjects: migrated (0.0020s) =====================

==  AddStickyXlisting: migrating ==============================================
-- add_column(:course_sections, :sticky_xlist, :boolean)
   -> 0.0007s
==  AddStickyXlisting: migrated (0.0008s) =====================================

==  OptimizeDelayedJobs: migrating ============================================
-- create_table(:failed_jobs)
NOTICE:  CREATE TABLE will create implicit sequence "failed_jobs_id_seq" for serial column "failed_jobs.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "failed_jobs_pkey" for table "failed_jobs"
   -> 0.0762s
-- remove_index(:delayed_jobs, {:name=>"get_delayed_jobs_index"})
   -> 0.0017s
-- remove_index(:delayed_jobs, [:strand])
   -> 0.0011s
-- add_index(:delayed_jobs, ["run_at", "queue", "locked_at", "strand", "priority"], {:name=>"index_delayed_jobs_for_get_next"})
   -> 0.0530s
-- add_index(:delayed_jobs, ["strand", "id"], {:name=>"index_delayed_jobs_on_strand"})
   -> 0.0447s
==  OptimizeDelayedJobs: migrated (0.1783s) ===================================

==  ConvertStorageQuotasToBytes: migrating ====================================
-- change_column("users", :storage_quota, :integer, {:limit=>8})
   -> 0.3224s
-- change_column("accounts", :storage_quota, :integer, {:limit=>8})
   -> 0.3530s
-- change_column("accounts", :default_storage_quota, :integer, {:limit=>8})
   -> 0.3191s
-- change_column("courses", :storage_quota, :integer, {:limit=>8})
   -> 0.4452s
-- change_column("groups", :storage_quota, :integer, {:limit=>8})
   -> 0.2698s
==  ConvertStorageQuotasToBytes: migrated (1.7133s) ===========================

==  DropOldStreamItemIndexes: migrating =======================================
-- remove_index("stream_item_instances", {:name=>"index_stream_item_instances_with_context_code"})
   -> 0.0020s
==  DropOldStreamItemIndexes: migrated (0.0021s) ==============================

==  AddRealUserIdToPageViews: migrating =======================================
-- add_column(:page_views, :real_user_id, :integer, {:limit=>8})
   -> 0.0005s
==  AddRealUserIdToPageViews: migrated (0.0006s) ==============================

==  LocalePrefs: migrating ====================================================
-- add_column(:users, :locale, :string)
   -> 0.0005s
-- add_column(:users, :browser_locale, :string)
   -> 0.0004s
-- add_column(:courses, :locale, :string)
   -> 0.0005s
-- add_column(:accounts, :default_locale, :string)
   -> 0.0005s
==  LocalePrefs: migrated (0.0022s) ===========================================

==  CreateAlerts: migrating ===================================================
-- create_table(:alerts)
NOTICE:  CREATE TABLE will create implicit sequence "alerts_id_seq" for serial column "alerts.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "alerts_pkey" for table "alerts"
   -> 0.0694s
-- create_table(:alert_criteria)
NOTICE:  CREATE TABLE will create implicit sequence "alert_criteria_id_seq" for serial column "alert_criteria.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "alert_criteria_pkey" for table "alert_criteria"
   -> 0.0421s
==  CreateAlerts: migrated (0.1117s) ==========================================

==  MessageCounts: migrating ==================================================
-- add_column(:conversation_participants, :message_count, :int, {:default=>0})
   -> 0.0009s
-- execute("    UPDATE conversation_participants\n    SET message_count = (\n      SELECT COUNT(*)\n      FROM conversation_messages, conversation_message_participants\n      WHERE conversation_messages.conversation_id = conversation_participants.conversation_id\n        AND NOT conversation_messages.generated\n        AND conversation_messages.id = conversation_message_participants.conversation_message_id\n        AND conversation_participant_id = conversation_participants.id\n    )\n")
   -> 0.0011s
==  MessageCounts: migrated (0.0023s) =========================================

==  MessageForwards: migrating ================================================
-- add_column(:conversation_messages, :forwarded_message_ids, :text)
   -> 0.0006s
==  MessageForwards: migrated (0.0007s) =======================================

==  UnreadCounts: migrating ===================================================
-- add_column(:users, :unread_conversations_count, :int, {:default=>0})
   -> 0.0009s
-- execute("    UPDATE users\n    SET unread_conversations_count = (\n      SELECT COUNT(*)\n      FROM conversation_participants\n      WHERE workflow_state = 'unread'\n        AND last_message_at IS NOT NULL\n        AND user_id = users.id\n    )\n")
   -> 0.0009s
==  UnreadCounts: migrated (0.0019s) ==========================================

==  LabelConversations: migrating =============================================
-- add_column(:conversation_participants, :label, :string)
   -> 0.0576s
==  LabelConversations: migrated (0.0578s) ====================================

==  AddDeveloperKeyRedirectUri: migrating =====================================
-- add_column(:developer_keys, :redirect_uri, :string)
   -> 0.0005s
==  AddDeveloperKeyRedirectUri: migrated (0.0005s) ============================

==  FixDuplicateDiscussions: migrating ========================================
==  FixDuplicateDiscussions: migrated (0.0019s) ===============================

==  AddSettingsToCourses: migrating ===========================================
-- add_column(:courses, :settings, :text)
   -> 0.0006s
==  AddSettingsToCourses: migrated (0.0008s) ==================================

==  ConversationsHasAttachmentsNotNull: migrating =============================
-- change_column_null(:conversations, :has_attachments, false, false)
   -> 0.0009s
-- change_column_default(:conversations, :has_attachments, false)
   -> 0.0004s
-- change_column_null(:conversations, :has_media_objects, false, false)
   -> 0.0012s
-- change_column_default(:conversations, :has_media_objects, false)
   -> 0.0004s
-- change_column_null(:conversation_participants, :has_attachments, false, false)
   -> 0.0012s
-- change_column_default(:conversation_participants, :has_attachments, false)
   -> 0.0004s
-- change_column_null(:conversation_participants, :has_media_objects, false, false)
   -> 0.0005s
-- change_column_default(:conversation_participants, :has_media_objects, false)
   -> 0.0004s
==  ConversationsHasAttachmentsNotNull: migrated (0.0110s) ====================

==  NewInboxMediaComments: migrating ==========================================
-- add_column(:conversation_messages, :media_comment_id, :string)
   -> 0.0006s
-- add_column(:conversation_messages, :media_comment_type, :string)
   -> 0.0004s
==  NewInboxMediaComments: migrated (0.0012s) =================================

==  MessageMigration: migrating ===============================================
-- add_index(:conversation_message_participants, [:conversation_participant_id, :conversation_message_id], {:name=>:index_cmp_on_cpi_and_cmi})
   -> 0.0448s
-- add_index(:inbox_items, [:asset_type, :asset_id])
   -> 0.0420s
-- add_column(:conversation_messages, :context_message_id, :integer, {:limit=>8})
   -> 0.0004s
-- add_column(:conversations, :migration_signature, :text)
   -> 0.0416s
-- add_column(:conversations, :tmp_private_hash, :string)
   -> 0.0003s
-- add_column(:conversation_message_participants, :unread, :boolean)
   -> 0.0002s
-- execute("      CREATE TEMPORARY TABLE __migrated_messages AS\n      SELECT\n        id,\n        user_id AS author_id,\n        created_at,\n        CASE WHEN subject IS NULL OR LOWER(SUBSTR(subject, 1, 4)) = 're: ' THEN body ELSE subject || '\n\n' || body END AS body,\n        COALESCE(root_context_message_id, id) AS root_context_message_id,\n        media_comment_id,\n        media_comment_type,\n        ''::TEXT AS signature\n      FROM\n        context_messages\n")
   -> 0.0017s
-- add_index(:__migrated_messages, :id)
   -> 0.0020s
-- execute("      CREATE TEMPORARY TABLE __migrated_message_participants AS\n      SELECT DISTINCT\n        context_message_id AS migrated_message_id,\n        user_id\n      FROM\n        context_message_participants\n")
   -> 0.0007s
-- add_index(:__migrated_message_participants, :migrated_message_id, {:name=>:index_mmp_on_message_id})
   -> 0.0011s
-- execute("        CREATE TEMPORARY TABLE __migrated_message_participant_strings AS\n        SELECT migrated_message_id, STRING_AGG(user_id::TEXT, ',') AS participants, COUNT(DISTINCT user_id) <= 2 AS private\n        FROM (\n          SELECT DISTINCT migrated_message_id, user_id\n          FROM __migrated_message_participants\n          ORDER BY migrated_message_id, user_id\n        ) p\n        GROUP BY migrated_message_id\n")
   -> 0.0014s
-- add_index(:__migrated_message_participant_strings, :migrated_message_id, {:name=>:index_mmps_on_migrated_message_id})
   -> 0.0010s
-- execute("      UPDATE __migrated_messages \n      SET signature = CASE WHEN private THEN '' ELSE root_context_message_id || ':' END || participants\n       FROM __migrated_message_participant_strings\n      WHERE migrated_message_id = __migrated_messages.id\n")
   -> 0.0004s
-- add_index(:__migrated_messages, :signature)
   -> 0.0010s
-- execute("      INSERT INTO conversations(migration_signature, has_attachments, has_media_objects)\n      SELECT DISTINCT signature, FALSE, FALSE\n      FROM __migrated_messages\n")
   -> 0.0003s
-- add_index(:conversations, :migration_signature)
   -> 0.0584s
-- add_index(:conversations, :tmp_private_hash)
   -> 0.0409s
-- execute("      UPDATE conversations \n      SET migration_signature = c2.migration_signature\n       FROM conversations c2\n      WHERE conversations.private_hash = c2.tmp_private_hash\n")
   -> 0.0005s
-- execute("      CREATE TEMPORARY TABLE __existing_private_conversations AS\n      SELECT private_hash FROM conversations WHERE private_hash IS NOT NULL\n")
   -> 0.0006s
-- execute("      DELETE FROM conversations WHERE tmp_private_hash IN (SELECT private_hash FROM __existing_private_conversations)\n")
   -> 0.0003s
-- remove_index(:conversation_participants, {:column=>[:user_id, :last_message_at]})
   -> 0.0013s
-- add_index(:conversation_participants, :user_id)
   -> 0.0390s
-- execute("      INSERT INTO conversation_participants(conversation_id, user_id, subscribed, workflow_state, has_attachments, has_media_objects)\n      SELECT c.id, mp.user_id, TRUE, 'read', FALSE, FALSE\n      FROM __migrated_message_participants mp,\n        (SELECT DISTINCT ON (signature) signature, id FROM __migrated_messages ORDER BY signature, id DESC) AS m,\n        conversations c\n      WHERE migrated_message_id = m.id\n        AND migration_signature = signature\n        AND private_hash IS NULL\n")
   -> 0.0008s
-- execute("      UPDATE conversations\n      SET private_hash = tmp_private_hash\n      WHERE tmp_private_hash IS NOT NULL\n")
   -> 0.0003s
-- execute("      INSERT INTO conversation_messages(conversation_id, author_id, created_at, generated, body, media_comment_id, media_comment_type, context_message_id)\n      SELECT\n        conversations.id,\n        author_id,\n        created_at,\n        FALSE,\n        body,\n        media_comment_id,\n        media_comment_type,\n        __migrated_messages.id\n      FROM\n        __migrated_messages, conversations\n      WHERE\n        signature = migration_signature\n")
   -> 0.0005s
-- execute("      INSERT INTO conversation_message_participants(conversation_message_id, conversation_participant_id, unread)\n      SELECT\n        cm.id,\n        cp.id,\n        ii.workflow_state = 'unread'\n      FROM\n        conversation_messages cm,\n        conversation_participants cp,\n        inbox_items ii\n      WHERE\n        cm.conversation_id = cp.conversation_id\n        AND ii.asset_id = cm.context_message_id\n        AND ii.asset_type = 'ContextMessage'\n        AND ii.user_id = cp.user_id\n        AND ii.workflow_state <> 'deleted'\n")
   -> 0.0013s
-- execute("      INSERT INTO conversation_message_participants(conversation_message_id, conversation_participant_id, unread)\n      SELECT\n        cm.id,\n        cp.id,\n        FALSE\n      FROM\n        conversation_messages cm\n      INNER JOIN\n        conversation_participants cp ON cm.conversation_id = cp.conversation_id AND cm.author_id = cp.user_id\n      LEFT JOIN\n        conversation_message_participants existing ON existing.conversation_message_id = cm.id AND existing.conversation_participant_id = cp.id\n      WHERE\n        cm.context_message_id IS NOT NULL\n        AND existing.id IS NULL\n")
   -> 0.0007s
-- execute("UPDATE inbox_items SET workflow_state = 'retired' WHERE asset_type IN ('ContextMessage', 'SubmissionComment') AND workflow_state = 'read'")
   -> 0.0003s
-- execute("UPDATE inbox_items SET workflow_state = 'retired_unread' WHERE asset_type IN ('ContextMessage', 'SubmissionComment') AND workflow_state = 'unread'")
   -> 0.0003s
-- execute("      UPDATE conversation_participants\n      SET workflow_state = 'unread'\n      WHERE EXISTS (SELECT 1 FROM conversation_message_participants WHERE conversation_participants.id = conversation_participant_id AND unread LIMIT 1)\n")
   -> 0.0004s
-- execute("      UPDATE attachments \n      SET context_id = conversation_messages.id, context_type = 'ConversationMessage'\n      FROM conversation_messages\n      WHERE attachments.context_type = 'ContextMessage' AND conversation_messages.context_message_id = attachments.context_id\n")
   -> 0.0012s
-- execute("      UPDATE conversation_participants\n      SET has_attachments = TRUE\n      WHERE id IN (\n        SELECT conversation_participant_id\n        FROM conversation_message_participants cmp, attachments a\n        WHERE\n          a.context_type = 'ConversationMessage'\n          AND a.context_id = conversation_message_id\n      )\n")
   -> 0.0007s
-- execute("      UPDATE conversations\n      SET has_attachments = TRUE\n      WHERE id IN (\n        SELECT conversation_id\n        FROM conversation_messages cm, attachments a\n        WHERE\n          a.context_type = 'ConversationMessage'\n          AND a.context_id = cm.id\n      )\n")
   -> 0.0006s
-- execute("      UPDATE conversation_participants\n      SET has_media_objects = TRUE\n      WHERE id IN (\n        SELECT conversation_participant_id\n        FROM conversation_message_participants cmp, conversation_messages cm\n        WHERE cmp.conversation_message_id = cm.id AND media_comment_id IS NOT NULL\n      )\n")
   -> 0.0006s
-- execute("      UPDATE conversations\n      SET has_media_objects = TRUE\n      WHERE id IN (\n        SELECT conversation_id\n        FROM conversation_messages\n        WHERE media_comment_id IS NOT NULL\n      )\n")
   -> 0.0004s
-- execute("      CREATE TEMPORARY TABLE __migrated_conversation_stats AS\n      SELECT\n        conversation_participant_id,\n        COUNT(*) AS message_count,\n        MAX(cm.created_at) AS last_message_at,\n        MAX(CASE WHEN cm.author_id = cp.user_id THEN cm.created_at ELSE NULL END) AS last_authored_at\n      FROM conversation_message_participants cmp, conversation_messages cm, conversation_participants cp\n      WHERE conversation_message_id = cm.id AND conversation_participant_id = cp.id\n      GROUP BY conversation_participant_id\n")
   -> 0.0014s
-- add_index(:__migrated_conversation_stats, :conversation_participant_id, {:name=>:index_mcs_on_cpi})
   -> 0.0011s
-- execute("      UPDATE conversation_participants \n      SET message_count = __migrated_conversation_stats.message_count,\n        last_message_at = __migrated_conversation_stats.last_message_at,\n        last_authored_at = __migrated_conversation_stats.last_authored_at\n      FROM __migrated_conversation_stats\n      WHERE conversation_participants.id = conversation_participant_id\n")
   -> 0.0004s
-- add_index(:conversation_participants, [:user_id, :last_message_at])
   -> 0.0701s
-- remove_index(:conversation_participants, {:column=>:user_id})
   -> 0.0015s
-- execute("        UPDATE users\n        SET unread_conversations_count = (SELECT COUNT(*) FROM conversation_participants WHERE workflow_state = 'unread' AND user_id = users.id)\n")
   -> 0.0004s
-- remove_column(:conversations, :migration_signature)
   -> 0.0004s
-- remove_column(:conversations, :tmp_private_hash)
   -> 0.0003s
-- remove_column(:conversation_message_participants, :unread)
   -> 0.0002s
-- execute("DROP TABLE __migrated_messages")
   -> 0.0006s
-- execute("DROP TABLE __migrated_message_participants")
   -> 0.0003s
-- execute("DROP TABLE __migrated_message_participant_strings")
   -> 0.0005s
-- execute("DROP TABLE __existing_private_conversations")
   -> 0.0002s
-- execute("DROP TABLE __migrated_conversation_stats")
   -> 0.0003s
==  MessageMigration: migrated (0.3857s) ======================================

==  SubmissionHasAdminComment: migrating ======================================
-- add_column(:submissions, :has_admin_comment, :boolean, {:default=>false, :null=>false})
   -> 0.0020s
-- execute("      UPDATE submissions SET has_admin_comment=EXISTS(\n        SELECT 1 FROM submission_comments AS sc, assignments AS a, courses AS c, enrollments AS e\n        WHERE sc.submission_id=submissions.id AND a.id = submissions.assignment_id\n          AND c.id = a.context_id AND a.context_type = 'Course' AND e.course_id = c.id\n          AND e.user_id = sc.author_id AND e.workflow_state = 'active'\n          AND e.type IN ('TeacherEnrollment', 'TaEnrollment'))\n")
   -> 0.0037s
==  SubmissionHasAdminComment: migrated (0.0059s) =============================

==  IncreaseFolderNameSize: migrating =========================================
-- change_column(:folders, :full_name, :text)
   -> 0.0006s
==  IncreaseFolderNameSize: migrated (0.0007s) ================================

==  CreateTriggersSubmissionCommentsInsertAndSubmissionCommentsDelete: migrating 
-- create_trigger("submission_comments_after_insert_row_tr", {:generated=>true, :compatibility=>1})
   -> 0.0002s
NOTICE:  trigger "submission_comments_after_insert_row_tr" for table "submission_comments" does not exist, skipping
NOTICE:  function submission_comments_after_insert_row_tr() does not exist, skipping
-- create_trigger("submission_comments_after_delete_row_tr", {:generated=>true, :compatibility=>1})
   -> 0.0001s
NOTICE:  trigger "submission_comments_after_delete_row_tr" for table "submission_comments" does not exist, skipping
NOTICE:  function submission_comments_after_delete_row_tr() does not exist, skipping
==  CreateTriggersSubmissionCommentsInsertAndSubmissionCommentsDelete: migrated (0.0027s) 

==  ContextToConversationNotificationPreferences: migrating ===================
==  ContextToConversationNotificationPreferences: migrated (0.1344s) ==========

==  AddExternalToolFlags: migrating ===========================================
-- add_column(:context_external_tools, :has_user_navigation, :boolean)
   -> 0.0004s
-- add_column(:context_external_tools, :has_course_navigation, :boolean)
   -> 0.0002s
-- add_column(:context_external_tools, :has_account_navigation, :boolean)
   -> 0.0002s
-- add_column(:context_external_tools, :has_resource_selection, :boolean)
   -> 0.0002s
-- add_column(:context_external_tools, :has_editor_button, :boolean)
   -> 0.0002s
-- add_index(:context_external_tools, [:context_id, :context_type, :has_user_navigation], {:name=>"external_tools_user_navigation"})
   -> 0.0330s
-- add_index(:context_external_tools, [:context_id, :context_type, :has_course_navigation], {:name=>"external_tools_course_navigation"})
   -> 0.0337s
-- add_index(:context_external_tools, [:context_id, :context_type, :has_account_navigation], {:name=>"external_tools_account_navigation"})
   -> 0.0336s
-- add_index(:context_external_tools, [:context_id, :context_type, :has_resource_selection], {:name=>"external_tools_resource_selection"})
   -> 0.0422s
-- add_index(:context_external_tools, [:context_id, :context_type, :has_editor_button], {:name=>"external_tools_editor_button"})
   -> 0.0419s
==  AddExternalToolFlags: migrated (0.1865s) ==================================

==  RemoveInactiveEnrollmentState: migrating ==================================
==  RemoveInactiveEnrollmentState: migrated (0.0075s) =========================

==  ConversationMessageContext: migrating =====================================
-- add_column(:conversation_messages, :context_id, :integer, {:limit=>8})
   -> 0.0006s
-- add_column(:conversation_messages, :context_type, :string)
   -> 0.0004s
==  ConversationMessageContext: migrated (0.0012s) ============================

==  AddUsefulIndexes: migrating ===============================================
-- add_index(:courses, :uuid)
   -> 0.0451s
-- add_index(:content_tags, [:associated_asset_id, :associated_asset_type], {:name=>"index_content_tags_on_associated_asset"})
   -> 0.0418s
-- add_index(:discussion_entries, :parent_id)
   -> 0.0420s
-- add_index(:learning_outcomes, [:context_id, :context_type])
   -> 0.0611s
-- add_index(:role_overrides, :context_code)
   -> 0.0397s
==  AddUsefulIndexes: migrated (0.2302s) ======================================

==  QuestionDataLength: migrating =============================================
==  QuestionDataLength: migrated (0.0000s) ====================================

==  AddGradingStandardsVersion: migrating =====================================
-- add_column(:grading_standards, :version, :integer)
   -> 0.0006s
==  AddGradingStandardsVersion: migrated (0.0007s) ============================

==  ConversationsCountFix: migrating ==========================================
-- execute("UPDATE conversation_participants SET workflow_state = 'read' WHERE workflow_state = 'unread' AND last_message_at IS NULL")
   -> 0.0005s
-- execute("    UPDATE users\n    SET unread_conversations_count = (\n      SELECT COUNT(*)\n      FROM conversation_participants\n      WHERE workflow_state = 'unread'\n        AND last_message_at IS NOT NULL\n        AND user_id = users.id\n    )\n")
   -> 0.0004s
==  ConversationsCountFix: migrated (0.0010s) =================================

==  AddReplacementCourseIdToCourses: migrating ================================
-- add_column(:courses, :replacement_course_id, :integer, {:limit=>8})
   -> 0.0006s
==  AddReplacementCourseIdToCourses: migrated (0.0008s) =======================

==  ClearSisWhitespace: migrating =============================================
-- execute("UPDATE pseudonyms SET  unique_id = TRIM(unique_id), sis_source_id = TRIM(sis_source_id), sis_user_id = TRIM(sis_user_id)")
   -> 0.0010s
-- execute("UPDATE users SET  name = TRIM(name), sis_name = TRIM(sis_name)")
   -> 0.0004s
-- execute("UPDATE enrollment_terms SET  name = TRIM(name), sis_name = TRIM(sis_name), sis_source_id = TRIM(sis_source_id)")
   -> 0.0007s
-- execute("UPDATE course_sections SET  name = TRIM(name), sis_name = TRIM(sis_name), sis_source_id = TRIM(sis_source_id)")
   -> 0.0008s
-- execute("UPDATE groups SET  name = TRIM(name), sis_name = TRIM(sis_name), sis_source_id = TRIM(sis_source_id)")
   -> 0.0007s
-- execute("UPDATE courses SET  name = TRIM(name), sis_name = TRIM(sis_name), sis_source_id = TRIM(sis_source_id), course_code = TRIM(course_code), sis_course_code = TRIM(sis_course_code)")
   -> 0.0006s
-- execute("UPDATE abstract_courses SET  name = TRIM(name), sis_name = TRIM(sis_name), sis_source_id = TRIM(sis_source_id), short_name = TRIM(short_name), sis_course_code = TRIM(sis_course_code)")
   -> 0.0007s
-- execute("UPDATE course_sections SET  name = TRIM(name), sis_name = TRIM(sis_name), sis_source_id = TRIM(sis_source_id)")
   -> 0.0008s
-- execute("UPDATE enrollments SET  sis_source_id = TRIM(sis_source_id)")
   -> 0.0004s
-- execute("UPDATE accounts SET  name = TRIM(name), sis_name = TRIM(sis_name), sis_source_id = TRIM(sis_source_id)")
   -> 0.0007s
==  ClearSisWhitespace: migrated (0.0075s) ====================================

==  AddDelayedJobsNextInStrand: migrating =====================================
-- remove_index(:delayed_jobs, {:name=>"index_delayed_jobs_for_get_next"})
   -> 0.0017s
-- add_column(:delayed_jobs, :next_in_strand, :boolean, {:default=>true, :null=>false})
   -> 0.0009s
-- execute("      CREATE FUNCTION delayed_jobs_before_insert_row_tr_fn () RETURNS trigger AS $$\n      BEGIN\n        LOCK delayed_jobs IN SHARE ROW EXCLUSIVE MODE;\n        IF (SELECT 1 FROM delayed_jobs WHERE strand = NEW.strand LIMIT 1) = 1 THEN\n          NEW.next_in_strand := 'f';\n        END IF;\n        RETURN NEW;\n      END;\n      $$ LANGUAGE plpgsql;\n")
   -> 0.0014s
-- execute("CREATE TRIGGER delayed_jobs_before_insert_row_tr BEFORE INSERT ON delayed_jobs FOR EACH ROW WHEN (NEW.strand IS NOT NULL) EXECUTE PROCEDURE delayed_jobs_before_insert_row_tr_fn()")
   -> 0.0006s
-- execute("      CREATE FUNCTION delayed_jobs_after_delete_row_tr_fn () RETURNS trigger AS $$\n      BEGIN\n        UPDATE delayed_jobs SET next_in_strand = 't' WHERE id = (SELECT id FROM delayed_jobs j2 WHERE j2.strand = OLD.strand ORDER BY j2.strand, j2.id ASC LIMIT 1);\n        RETURN OLD;\n      END;\n      $$ LANGUAGE plpgsql;\n")
   -> 0.0003s
-- execute("CREATE TRIGGER delayed_jobs_after_delete_row_tr AFTER DELETE ON delayed_jobs FOR EACH ROW WHEN (OLD.strand IS NOT NULL AND OLD.next_in_strand = 't') EXECUTE PROCEDURE delayed_jobs_after_delete_row_tr_fn()")
   -> 0.0003s
-- execute("UPDATE delayed_jobs SET next_in_strand = 'f' WHERE strand IS NOT NULL AND id <> (SELECT id FROM delayed_jobs j2 WHERE j2.strand = delayed_jobs.strand ORDER BY j2.strand, j2.id ASC LIMIT 1)")
   -> 0.0008s
==  AddDelayedJobsNextInStrand: migrated (0.0431s) ============================

==  DropMailboxes: migrating ==================================================
-- drop_table(:mailboxes)
   -> 0.0019s
-- drop_table(:mailboxes_pseudonyms)
   -> 0.0010s
==  DropMailboxes: migrated (0.0030s) =========================================

==  DropContextCodeFromRoleOverride: migrating ================================
-- remove_index(:role_overrides, :context_code)
   -> 0.0020s
-- remove_column(:role_overrides, :context_code)
   -> 0.0004s
==  DropContextCodeFromRoleOverride: migrated (0.0027s) =======================

==  DropMovedInAccountStructure: migrating ====================================
-- remove_index(:users, :moved_in_account_structure)
   -> 0.0028s
-- remove_column(:users, :moved_in_account_structure)
   -> 0.0006s
-- remove_index(:courses, [:moved_in_account_structure, :updated_at])
   -> 0.0035s
-- remove_column(:courses, :moved_in_account_structure)
   -> 0.0006s
-- remove_column(:accounts, :moved_in_account_structure)
   -> 0.0005s
==  DropMovedInAccountStructure: migrated (0.0084s) ===========================

==  DropTypeFromUsers: migrating ==============================================
-- remove_index(:users, :type)
   -> 0.0022s
-- remove_column(:users, :type)
   -> 0.0007s
==  DropTypeFromUsers: migrated (0.0032s) =====================================

==  AddParametersToCourseImports: migrating ===================================
-- add_column(:course_imports, :parameters, :text)
   -> 0.0006s
==  AddParametersToCourseImports: migrated (0.0007s) ==========================

==  TurnitinSettings: migrating ===============================================
-- add_column(:assignments, :turnitin_settings, :text)
   -> 0.0006s
==  TurnitinSettings: migrated (0.0008s) ======================================

==  RemoveSectionAndHiddenTabsFromCourses: migrating ==========================
-- remove_column(:courses, :section)
   -> 0.0006s
-- remove_column(:courses, :hidden_tabs)
   -> 0.0004s
==  RemoveSectionAndHiddenTabsFromCourses: migrated (0.0012s) =================

==  AddMutedToAssignments: migrating ==========================================
-- add_column(:assignments, :muted, :boolean, {:default=>false})
   -> 0.0010s
==  AddMutedToAssignments: migrated (0.0021s) =================================

==  GenericSisStickinessRefactorColumns: migrating ============================
-- add_column(:abstract_courses, :stuck_sis_fields, :text)
   -> 0.0005s
-- add_column(:accounts, :stuck_sis_fields, :text)
   -> 0.0005s
-- add_column(:courses, :stuck_sis_fields, :text)
   -> 0.0005s
-- add_column(:groups, :stuck_sis_fields, :text)
   -> 0.0004s
-- add_column(:course_sections, :stuck_sis_fields, :text)
   -> 0.0004s
-- add_column(:enrollment_terms, :stuck_sis_fields, :text)
   -> 0.0004s
-- add_column(:users, :stuck_sis_fields, :text)
   -> 0.0005s
==  GenericSisStickinessRefactorColumns: migrated (0.0041s) ===================

==  GenericSisStickinessRefactorData: migrating ===============================
-- execute("      UPDATE abstract_courses SET stuck_sis_fields =\n          (CASE WHEN sis_name <> name THEN\n            (CASE WHEN sis_course_code <> short_name THEN\n              'name,short_name'\n            ELSE\n              'name'\n            END)\n          WHEN sis_course_code <> short_name THEN\n            'short_name'\n          ELSE\n            NULL\n          END);\n")
   -> 0.0004s
-- execute("      UPDATE courses SET stuck_sis_fields =\n          (CASE WHEN sis_name <> name THEN\n            (CASE WHEN sis_course_code <> course_code THEN\n              'name,course_code'\n            ELSE\n              'name'\n            END)\n          WHEN sis_course_code <> course_code THEN\n            'course_code'\n          ELSE\n            NULL\n          END);\n")
   -> 0.0005s
-- execute("      UPDATE course_sections SET stuck_sis_fields =\n          (CASE WHEN sis_name <> name THEN\n            (CASE WHEN sticky_xlist THEN\n              'course_id,name'\n            ELSE\n              'name'\n            END)\n          WHEN sticky_xlist THEN\n            'course_id'\n          ELSE\n            NULL\n          END);\n")
   -> 0.0004s
-- execute("UPDATE accounts SET stuck_sis_fields = 'name' WHERE sis_name <> name;")
   -> 0.0004s
-- execute("UPDATE groups SET stuck_sis_fields = 'name' WHERE sis_name <> name;")
   -> 0.0004s
-- execute("UPDATE enrollment_terms SET stuck_sis_fields = 'name' WHERE sis_name <> name;")
   -> 0.0003s
-- execute("UPDATE users SET stuck_sis_fields = 'name' WHERE sis_name <> name;")
   -> 0.0004s
==  GenericSisStickinessRefactorData: migrated (0.0034s) ======================

==  AddHiddenToSubmissionComments: migrating ==================================
-- add_column(:submission_comments, :hidden, :boolean, {:default=>false})
   -> 0.0009s
==  AddHiddenToSubmissionComments: migrated (0.0103s) =========================

==  RemoveUnusedSisDataFields: migrating ======================================
-- remove_column(:pseudonyms, :sis_update_data)
   -> 0.0011s
-- remove_column(:enrollment_terms, :sis_data)
   -> 0.0003s
==  RemoveUnusedSisDataFields: migrated (0.0015s) =============================

==  AddEnrollmentSisStickiness: migrating =====================================
-- add_column(:enrollments, :stuck_sis_fields, :text)
   -> 0.0004s
==  AddEnrollmentSisStickiness: migrated (0.0004s) ============================

==  AddIndexDiscussionTopicsAssignmentId: migrating ===========================
-- add_index(:discussion_topics, [:assignment_id])
   -> 0.0397s
==  AddIndexDiscussionTopicsAssignmentId: migrated (0.0398s) ==================

==  AddNewTabToContentTags: migrating =========================================
-- add_column(:content_tags, :new_tab, :boolean)
   -> 0.0006s
==  AddNewTabToContentTags: migrated (0.0008s) ================================

==  AddEnrollmentGradePublishingMessage: migrating ============================
-- add_column(:enrollments, :grade_publishing_message, :text)
   -> 0.0007s
==  AddEnrollmentGradePublishingMessage: migrated (0.0009s) ===================

==  UnscribdTextHtmlAttachments: migrating ====================================
==  UnscribdTextHtmlAttachments: migrated (0.0015s) ===========================

==  CreateFavorites: migrating ================================================
-- create_table(:favorites)
NOTICE:  CREATE TABLE will create implicit sequence "favorites_id_seq" for serial column "favorites.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "favorites_pkey" for table "favorites"
   -> 0.0404s
==  CreateFavorites: migrated (0.0406s) =======================================

==  GroupCategoriesMigration: migrating =======================================
-- create_table(:group_categories)
NOTICE:  CREATE TABLE will create implicit sequence "group_categories_id_seq" for serial column "group_categories.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "group_categories_pkey" for table "group_categories"
   -> 0.0903s
-- add_column(:groups, :group_category_id, :integer, {:limit=>8})
   -> 0.0004s
-- add_column(:assignments, :group_category_id, :integer, {:limit=>8})
   -> 0.0003s
==  GroupCategoriesMigration: migrated (0.0913s) ==============================

==  GroupCategoriesDataMigration: migrating ===================================
==  GroupCategoriesDataMigration: migrated (0.0022s) ==========================

==  AddGroupCategoriesSelfSignupMigration: migrating ==========================
-- add_column(:group_categories, :self_signup, :string)
   -> 0.0006s
==  AddGroupCategoriesSelfSignupMigration: migrated (0.0008s) =================

==  AddSisOptions: migrating ==================================================
-- add_column(:sis_batches, :options, :text)
   -> 0.0004s
==  AddSisOptions: migrated (0.0005s) =========================================

==  UpdateTwitterUrlsForHttps: migrating ======================================
==  UpdateTwitterUrlsForHttps: migrated (0.0009s) =============================

==  DropDeletedUniqueIdFromPseudonyms: migrating ==============================
-- remove_column(:pseudonyms, :deleted_unique_id)
   -> 0.0004s
==  DropDeletedUniqueIdFromPseudonyms: migrated (0.0012s) =====================

==  AddPseudonymSisStickiness: migrating ======================================
-- add_column(:pseudonyms, :stuck_sis_fields, :text)
   -> 0.0004s
-- execute("UPDATE pseudonyms SET stuck_sis_fields='unique_id' WHERE sis_source_id<>unique_id")
   -> 0.1193s
==  AddPseudonymSisStickiness: migrated (0.1199s) =============================

==  DropSisSourceIdFromPseudonyms: migrating ==================================
-- remove_column(:pseudonyms, :sis_source_id)
   -> 0.0008s
==  DropSisSourceIdFromPseudonyms: migrated (0.0009s) =========================

==  GroupCategoriesCleanupMigration: migrating ================================
==  GroupCategoriesCleanupMigration: migrated (0.0011s) =======================

==  TurnitinFix: migrating ====================================================
==  TurnitinFix: migrated (0.0021s) ===========================================

==  DropInvitationEmailFromEnrollments: migrating =============================
-- remove_column(:enrollments, :invitation_email)
   -> 0.0007s
==  DropInvitationEmailFromEnrollments: migrated (0.0008s) ====================

==  UpdateSubmittedAtForDiscussionTopics: migrating ===========================
==  UpdateSubmittedAtForDiscussionTopics: migrated (0.0009s) ==================

==  TranslateLinksOnAssessmentQuestions: migrating ============================
==  TranslateLinksOnAssessmentQuestions: migrated (0.0020s) ===================

==  DropEnrollmentIdFromAttachments: migrating ================================
-- remove_index(:attachments, [:enrollment_id])
   -> 0.0040s
-- remove_column(:attachments, :enrollment_id)
   -> 0.0005s
==  DropEnrollmentIdFromAttachments: migrated (0.0047s) =======================

==  AddEncodingToAttachments: migrating =======================================
-- add_column(:attachments, :encoding, :string)
   -> 0.0006s
==  AddEncodingToAttachments: migrated (0.0008s) ==============================

==  DetectAttachmentEncoding: migrating =======================================
==  DetectAttachmentEncoding: migrated (0.0264s) ==============================

==  DeleteSubEntriesOfDeletedDiscussionEntries: migrating =====================
==  DeleteSubEntriesOfDeletedDiscussionEntries: migrated (0.0020s) ============

==  DropNameDetailsFromUsers: migrating =======================================
==  DropNameDetailsFromUsers: migrated (0.1398s) ==============================

==  IndexUserSortableNameCaseInsensitively: migrating =========================
-- remove_index(:users, :sortable_name)
   -> 0.0017s
==  IndexUserSortableNameCaseInsensitively: migrated (0.0440s) ================

==  RestoreUsersSortableName: migrating =======================================
==  RestoreUsersSortableName: migrated (0.0081s) ==============================

==  GrandfatherOpenRegistration: migrating ====================================
==  GrandfatherOpenRegistration: migrated (0.0015s) ===========================

==  EnsureSubmissionsForDiscussions: migrating ================================
==  EnsureSubmissionsForDiscussions: migrated (0.0021s) =======================

==  FixUngradedCounts: migrating ==============================================
-- execute("      UPDATE assignments SET needs_grading_count = COALESCE((\n        SELECT COUNT(DISTINCT s.id)\n        FROM submissions s\n        INNER JOIN enrollments e ON e.user_id = s.user_id AND e.workflow_state = 'active'\n        WHERE s.assignment_id = assignments.id\n          AND e.course_id = assignments.context_id\n          AND s.submission_type IS NOT NULL\n          AND (s.score IS NULL\n            OR NOT grade_matches_current_submission\n            OR s.workflow_state IN ('submitted', 'pending_review')\n          )\n      ), 0)\n")
   -> 0.0009s
==  FixUngradedCounts: migrated (0.0010s) =====================================

==  CleanupQuizQuestionLinks: migrating =======================================
==  CleanupQuizQuestionLinks: migrated (0.0050s) ==============================

==  AddExternalToolCloneId: migrating =========================================
-- add_column(:context_external_tools, :cloned_item_id, :integer, {:limit=>8})
   -> 0.0008s
==  AddExternalToolCloneId: migrated (0.0010s) ================================

==  FavoritesUserIndex: migrating =============================================
-- add_index(:favorites, [:user_id])
   -> 0.0439s
==  FavoritesUserIndex: migrated (0.0440s) ====================================

==  CreateTriggersEnrollmentsInsertAndEnrollmentsUpdate: migrating ============
-- drop_trigger("enrollments_after_insert_row_when_new_workflow_state_active__tr", "enrollments")
   -> 0.0008s
-- drop_trigger("enrollments_after_update_row_when_new_workflow_state_old_wor_tr", "enrollments")
   -> 0.0005s
-- create_trigger("enrollments_after_insert_row_when_new_workflow_state_active__tr", {:generated=>true, :compatibility=>1})
   -> 0.0001s
NOTICE:  trigger "enrollments_after_insert_row_when_new_workflow_state_active__tr" for table "enrollments" does not exist, skipping
NOTICE:  function enrollments_after_insert_row_when_new_workflow_state_active__tr() does not exist, skipping
-- create_trigger("enrollments_after_update_row_when_new_workflow_state_old_wor_tr", {:generated=>true, :compatibility=>1})
   -> 0.0001s
NOTICE:  trigger "enrollments_after_update_row_when_new_workflow_state_old_wor_tr" for table "enrollments" does not exist, skipping
NOTICE:  function enrollments_after_update_row_when_new_workflow_state_old_wor_tr() does not exist, skipping
==  CreateTriggersEnrollmentsInsertAndEnrollmentsUpdate: migrated (0.0052s) ===

==  AddPersistenceTokenTable: migrating =======================================
-- create_table(:session_persistence_tokens)
NOTICE:  CREATE TABLE will create implicit sequence "session_persistence_tokens_id_seq" for serial column "session_persistence_tokens.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "session_persistence_tokens_pkey" for table "session_persistence_tokens"
   -> 0.0990s
-- add_index(:session_persistence_tokens, :pseudonym_id)
   -> 0.0379s
==  AddPersistenceTokenTable: migrated (0.1371s) ==============================

==  DisableOpenRegistrationForDelegatedAuth: migrating ========================
==  DisableOpenRegistrationForDelegatedAuth: migrated (0.4428s) ===============

==  SubmissionPointsPossibleFixColumn: migrating ==============================
-- change_column(:quiz_submissions, :quiz_points_possible, :float)
   -> 0.2737s
==  SubmissionPointsPossibleFixColumn: migrated (0.2738s) =====================

==  SubmissionPointsPossibleFixData: migrating ================================
-- execute("          UPDATE quiz_submissions\n          SET quiz_points_possible = points_possible\n          FROM quizzes\n          WHERE quiz_id = quizzes.id AND quiz_points_possible <> points_possible AND (points_possible < 2147483647 AND quiz_points_possible = CAST(points_possible AS INTEGER) OR points_possible >= 2147483647 AND quiz_points_possible = 2147483647)\n")
   -> 0.0179s
==  SubmissionPointsPossibleFixData: migrated (0.0180s) =======================

==  CreateTriggerQuizSubmissionsUpdate: migrating =============================
-- create_trigger("quiz_submissions_after_update_row_when_new_submission_id_is__tr", {:generated=>true, :compatibility=>1})
   -> 0.0002s
NOTICE:  trigger "quiz_submissions_after_update_row_when_new_submission_id_is__tr" for table "quiz_submissions" does not exist, skipping
NOTICE:  function quiz_submissions_after_update_row_when_new_submission_id_is__tr() does not exist, skipping
==  CreateTriggerQuizSubmissionsUpdate: migrated (0.0019s) ====================

==  FixEnrollmentRootAccountId: migrating =====================================
-- adapter_name()
   -> 0.0000s
-- execute("UPDATE enrollments SET root_account_id = c.root_account_id FROM courses As c WHERE course_id = c.id AND enrollments.root_account_id != c.root_account_id")
   -> 0.0008s
==  FixEnrollmentRootAccountId: migrated (0.0010s) ============================

==  AddMissingTooLongIndexes: migrating =======================================
-- index_exists?("custom_fields", "custom_field_lookup", false)
   -> 0.0010s
-- add_index(:custom_fields, ["scoper_type", "scoper_id", "target_type", "name"], {:name=>"custom_field_lookup"})
   -> 0.0468s
-- index_exists?("learning_outcome_results", "index_learning_outcome_results_association", false)
   -> 0.0014s
-- index_exists?("context_external_tools", "external_tools_user_navigation", false)
   -> 0.0014s
-- index_exists?("context_external_tools", "external_tools_course_navigation", false)
   -> 0.0016s
-- index_exists?("context_external_tools", "external_tools_account_navigation", false)
   -> 0.0014s
-- index_exists?("context_external_tools", "external_tools_resource_selection", false)
   -> 0.0014s
-- index_exists?("context_external_tools", "external_tools_editor_button", false)
   -> 0.0015s
-- index_exists?("stream_item_instances", "index_stream_item_instances_on_user_id_and_id_and_stream_item_id", false)
   -> 0.0011s
-- index_exists?("stream_item_instances", "index_stream_item_instances_with_context_code", false)
   -> 0.0011s
==  AddMissingTooLongIndexes: migrated (0.0595s) ==============================

==  DropSisCrossListedSection: migrating ======================================
-- remove_column(:course_sections, :sis_cross_listed_section_id)
   -> 0.0008s
-- remove_column(:course_sections, :sis_cross_listed_section_sis_batch_id)
   -> 0.0004s
-- drop_table(:sis_cross_listed_sections)
   -> 0.0016s
==  DropSisCrossListedSection: migrated (0.0032s) =============================

==  DropStickyXlistFromCourseSections: migrating ==============================
-- remove_column(:course_sections, :sticky_xlist)
   -> 0.0006s
==  DropStickyXlistFromCourseSections: migrated (0.0007s) =====================

==  FixSpellingOfPrivilegesColumnOnEnrollments: migrating =====================
-- add_column(:enrollments, :limit_privileges_to_course_section, :boolean)
   -> 0.0004s
==  FixSpellingOfPrivilegesColumnOnEnrollments: migrated (0.0006s) ============

==  AddZipFileImports: migrating ==============================================
-- create_table(:zip_file_imports)
NOTICE:  CREATE TABLE will create implicit sequence "zip_file_imports_id_seq" for serial column "zip_file_imports.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "zip_file_imports_pkey" for table "zip_file_imports"
   -> 0.0753s
==  AddZipFileImports: migrated (0.0755s) =====================================

==  RecalculateMutedAssignments: migrating ====================================
==  RecalculateMutedAssignments: migrated (0.0015s) ===========================

==  AppointmentGroups: migrating ==============================================
-- create_table(:appointment_groups)
NOTICE:  CREATE TABLE will create implicit sequence "appointment_groups_id_seq" for serial column "appointment_groups.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "appointment_groups_pkey" for table "appointment_groups"
   -> 0.0763s
-- add_index(:appointment_groups, [:context_id])
   -> 0.0336s
-- add_index(:appointment_groups, [:context_code])
   -> 0.0420s
-- add_column(:calendar_events, :parent_calendar_event_id, :integer, {:limit=>8})
   -> 0.0004s
-- add_index(:calendar_events, [:parent_calendar_event_id])
   -> 0.0628s
-- add_column(:calendar_events, :effective_context_code, :string)
   -> 0.0004s
==  AppointmentGroups: migrated (0.2160s) =====================================

==  AppointmentParticipantVisibility: migrating ===============================
-- add_column(:appointment_groups, :participant_visibility, :string)
   -> 0.0004s
==  AppointmentParticipantVisibility: migrated (0.0004s) ======================

==  IndexCalendarEventsEffectiveContextCode: migrating ========================
==  IndexCalendarEventsEffectiveContextCode: migrated (0.0450s) ===============

==  AddIndexesToPseudonyms: migrating =========================================
-- remove_index(:pseudonyms, :unique_id)
   -> 0.0026s
-- add_index(:pseudonyms, :sis_user_id)
   -> 0.0420s
==  AddIndexesToPseudonyms: migrated (0.0789s) ================================

==  AddCommunicationChannelsIndex: migrating ==================================
-- remove_index(:communication_channels, [:path, :path_type])
   -> 0.0024s
==  AddCommunicationChannelsIndex: migrated (0.0458s) =========================

==  FixAssessmentQuestionsMissingData: migrating ==============================
==  FixAssessmentQuestionsMissingData: migrated (0.0301s) =====================

==  ChangeRubricPointsPossibleToFloat: migrating ==============================
-- change_column(:rubrics, :points_possible, :float)
   -> 0.2830s
==  ChangeRubricPointsPossibleToFloat: migrated (0.2832s) =====================

==  RemoveAttachmentsWithNoScopeFromList: migrating ===========================
==  RemoveAttachmentsWithNoScopeFromList: migrated (0.1424s) ==================

==  FixSisCommunicationChannels: migrating ====================================
==  FixSisCommunicationChannels: migrated (1.1443s) ===========================

==  DropUserCreationColumns: migrating ========================================
-- remove_index(:users, "users_sis_creation")
   -> 0.0020s
-- remove_column(:users, :creation_unique_id)
   -> 0.0007s
-- remove_column(:users, :creation_sis_batch_id)
   -> 0.0004s
-- remove_column(:users, :creation_email)
   -> 0.0004s
==  DropUserCreationColumns: migrated (0.0037s) ===============================

==  DropAccountType: migrating ================================================
-- remove_index(:accounts, [:id, :type])
   -> 0.0029s
-- remove_index(:accounts, :type)
   -> 0.0024s
-- remove_column(:accounts, :type)
   -> 0.0004s
==  DropAccountType: migrated (0.0060s) =======================================

==  DropOldSisStickyColumns: migrating ========================================
-- remove_column(:abstract_courses, :sis_name)
   -> 0.0004s
-- remove_column(:abstract_courses, :sis_course_code)
   -> 0.0002s
-- remove_column(:accounts, :sis_name)
   -> 0.0003s
-- remove_column(:course_sections, :sis_name)
   -> 0.0004s
-- remove_column(:courses, :sis_name)
   -> 0.0003s
-- remove_column(:courses, :sis_course_code)
   -> 0.0003s
-- remove_column(:enrollment_terms, :sis_name)
   -> 0.0003s
-- remove_column(:groups, :sis_name)
   -> 0.0003s
-- remove_column(:users, :sis_name)
   -> 0.0003s
==  DropOldSisStickyColumns: migrated (0.0030s) ===============================

==  ChangeSisBatchIdToInteger: migrating ======================================
-- execute("ALTER TABLE abstract_courses ALTER sis_batch_id TYPE bigint USING CAST(sis_batch_id AS bigint)")
   -> 0.2632s
-- execute("ALTER TABLE accounts ALTER sis_batch_id TYPE bigint USING CAST(sis_batch_id AS bigint)")
   -> 0.2773s
-- execute("ALTER TABLE accounts ALTER current_sis_batch_id TYPE bigint USING CAST(sis_batch_id AS bigint)")
   -> 0.2931s
-- execute("ALTER TABLE accounts ALTER last_successful_sis_batch_id TYPE bigint USING CAST(sis_batch_id AS bigint)")
   -> 0.2633s
-- execute("ALTER TABLE course_sections ALTER sis_batch_id TYPE bigint USING CAST(sis_batch_id AS bigint)")
   -> 0.2288s
-- execute("ALTER TABLE courses ALTER sis_batch_id TYPE bigint USING CAST(sis_batch_id AS bigint)")
   -> 0.4587s
-- execute("ALTER TABLE enrollment_terms ALTER sis_batch_id TYPE bigint USING CAST(sis_batch_id AS bigint)")
   -> 0.1544s
-- execute("ALTER TABLE enrollments ALTER sis_batch_id TYPE bigint USING CAST(sis_batch_id AS bigint)")
   -> 0.4536s
-- execute("ALTER TABLE group_memberships ALTER sis_batch_id TYPE bigint USING CAST(sis_batch_id AS bigint)")
   -> 0.2268s
-- execute("ALTER TABLE groups ALTER sis_batch_id TYPE bigint USING CAST(sis_batch_id AS bigint)")
   -> 0.2711s
-- execute("ALTER TABLE pseudonyms ALTER sis_batch_id TYPE bigint USING CAST(sis_batch_id AS bigint)")
   -> 0.3696s
==  ChangeSisBatchIdToInteger: migrated (3.2605s) =============================

==  SetSamlEntityId: migrating ================================================
==  SetSamlEntityId: migrated (0.0161s) =======================================

==  SubmissionCommentsInConversations: migrating ==============================
-- add_column(:conversation_messages, :asset_id, :integer, {:limit=>8})
   -> 0.0005s
-- add_column(:conversation_messages, :asset_type, :string)
   -> 0.0004s
-- adapter_name()
   -> 0.0000s
-- execute("CREATE INDEX index_conversation_messages_on_asset_id_and_asset_type ON conversation_messages (asset_id, asset_type) WHERE asset_id IS NOT NULL")
   -> 0.0560s
==  SubmissionCommentsInConversations: migrated (0.0573s) =====================

==  RemoveUserIdFromNotificationPolicy: migrating =============================
-- remove_column(:notification_policies, :user_id)
   -> 0.0005s
==  RemoveUserIdFromNotificationPolicy: migrated (0.0006s) ====================

==  DestroyExistingAnonymousFolderDownloads: migrating ========================
==  DestroyExistingAnonymousFolderDownloads: migrated (0.0014s) ===============

==  DropTriggersSubmissionCommentsAndSubmissionComments: migrating ============
-- drop_trigger("submission_comments_after_insert_row_tr", "submission_comments", {:generated=>true})
   -> 0.0007s
-- drop_trigger("submission_comments_after_delete_row_tr", "submission_comments", {:generated=>true})
   -> 0.0005s
==  DropTriggersSubmissionCommentsAndSubmissionComments: migrated (0.0014s) ===

==  ConversationParticipantTags: migrating ====================================
-- add_column(:conversations, :tags, :text)
   -> 0.0005s
-- add_column(:conversation_participants, :tags, :text)
   -> 0.0004s
-- add_column(:conversation_message_participants, :tags, :text)
   -> 0.0410s
==  ConversationParticipantTags: migrated (0.0423s) ===========================

==  IndexCleanupPt1: migrating ================================================
-- execute("create index index_attachments_on_root_attachment_id_not_null on attachments (root_attachment_id) where root_attachment_id is not null")
   -> 0.0488s
-- remove_index("attachments", {:name=>"index_attachments_on_root_attachment_id"})
   -> 0.0028s
-- remove_index("attachments", {:name=>"index_attachments_on_scribd_account_id"})
   -> 0.0023s
-- remove_index("enrollments", {:name=>"index_enrollments_on_sis_source_id"})
   -> 0.0019s
-- remove_index("courses", {:name=>"index_courses_on_grading_standard_id"})
   -> 0.0020s
-- remove_index("courses", {:name=>"index_courses_on_wiki_id"})
   -> 0.0017s
-- remove_index("messages", {:name=>"index_messages_on_asset_context_id_and_asset_context_type"})
   -> 0.0021s
-- remove_index("messages", {:name=>"index_messages_on_notification_name_workflow_state_created_at"})
   -> 0.0020s
-- remove_index("messages", {:name=>"index_messages_on_sa_ui_te_nc"})
   -> 0.0018s
-- remove_index("messages", {:name=>"index_messages_on_workflow_state_and_dispatch_at"})
   -> 0.0017s
-- remove_index("pseudonyms", {:name=>"index_pseudonyms_on_communication_channel_id"})
   -> 0.0017s
-- remove_index("assignment_groups", {:name=>"index_assignment_groups_on_context_code"})
   -> 0.0013s
-- remove_index("assessment_questions", {:name=>"index_assessment_questions_on_context_id_and_context_type"})
   -> 0.0011s
-- remove_index("assignments", {:name=>"index_assignments_on_workflow_state"})
   -> 0.0019s
-- remove_index("submissions", {:name=>"aid_submission_type_process_attempts"})
   -> 0.0018s
-- remove_index("submissions", {:name=>"index_submissions_on_grader_id"})
   -> 0.0016s
-- remove_index("submissions", {:name=>"index_submissions_on_group_id"})
   -> 0.0015s
==  IndexCleanupPt1: migrated (0.0796s) =======================================

==  DropStreamItemsUserId: migrating ==========================================
-- remove_column(:stream_items, :user_id)
   -> 0.0009s
==  DropStreamItemsUserId: migrated (0.0010s) =================================

==  DropCachedS3Url: migrating ================================================
-- remove_column(:attachments, :cached_s3_url)
   -> 0.0005s
-- remove_column(:attachments, :s3_url_cached_at)
   -> 0.0004s
==  DropCachedS3Url: migrated (0.0010s) =======================================

==  CreateTriggersEnrollmentsInsertAndEnrollmentsUpdateAndSubmissionsUpdateAndSubmissionsInsert: migrating 
-- drop_trigger("enrollments_after_insert_row_when_new_workflow_state_active__tr", "enrollments", {:generated=>true})
   -> 0.0006s
-- drop_trigger("enrollments_after_update_row_when_new_workflow_state_old_wor_tr", "enrollments", {:generated=>true})
   -> 0.0005s
-- drop_trigger("submissions_after_update_row_tr", "submissions", {:generated=>true})
NOTICE:  trigger "submissions_after_update_row_tr" for table "submissions" does not exist, skipping
NOTICE:  function submissions_after_update_row_tr() does not exist, skipping
   -> 0.0005s
-- drop_trigger("submissions_after_update_row_when_old_submission_type_is_not_tr", "submissions", {:generated=>true})
   -> 0.0005s
-- drop_trigger("submissions_after_insert_row_tr", "submissions", {:generated=>true})
NOTICE:  trigger "submissions_after_insert_row_tr" for table "submissions" does not exist, skipping
NOTICE:  function submissions_after_insert_row_tr() does not exist, skipping
   -> 0.0005s
-- drop_trigger("submissions_after_insert_row_when_new_submission_type_is_not_tr", "submissions", {:generated=>true})
   -> 0.0004s
-- create_trigger("enrollments_after_insert_row_when_new_workflow_state_active__tr", {:generated=>true, :compatibility=>1})
   -> 0.0002s
NOTICE:  trigger "enrollments_after_insert_row_when_new_workflow_state_active__tr" for table "enrollments" does not exist, skipping
NOTICE:  function enrollments_after_insert_row_when_new_workflow_state_active__tr() does not exist, skipping
-- create_trigger("enrollments_after_update_row_when_new_workflow_state_old_wor_tr", {:generated=>true, :compatibility=>1})
   -> 0.0002s
NOTICE:  trigger "enrollments_after_update_row_when_new_workflow_state_old_wor_tr" for table "enrollments" does not exist, skipping
NOTICE:  function enrollments_after_update_row_when_new_workflow_state_old_wor_tr() does not exist, skipping
-- create_trigger("submissions_after_update_row_tr", {:generated=>true, :compatibility=>1})
   -> 0.0002s
NOTICE:  trigger "submissions_after_update_row_when_old_submission_type_is_not_tr" for table "submissions" does not exist, skipping
NOTICE:  function submissions_after_update_row_when_old_submission_type_is_not_tr() does not exist, skipping
-- create_trigger("submissions_after_insert_row_tr", {:generated=>true, :compatibility=>1})
   -> 0.0002s
NOTICE:  trigger "submissions_after_insert_row_when_new_submission_type_is_not_tr" for table "submissions" does not exist, skipping
NOTICE:  function submissions_after_insert_row_when_new_submission_type_is_not_tr() does not exist, skipping
==  CreateTriggersEnrollmentsInsertAndEnrollmentsUpdateAndSubmissionsUpdateAndSubmissionsInsert: migrated (0.0112s) 

==  ConversationDataUpdate: migrating =========================================
==  ConversationDataUpdate: migrated (0.0008s) ================================

==  LabelsToStars: migrating ==================================================
==  LabelsToStars: migrated (0.1300s) =========================================

==  AddSamlRequestedAuthnContext: migrating ===================================
-- add_column(:account_authorization_configs, :requested_authn_context, :string)
   -> 0.0005s
==  AddSamlRequestedAuthnContext: migrated (0.0016s) ==========================

==  ConversationParticipantVisibleLastAuthoredAt: migrating ===================
-- add_column(:conversation_participants, :visible_last_authored_at, :datetime)
   -> 0.0007s
==  ConversationParticipantVisibleLastAuthoredAt: migrated (0.0009s) ==========

==  PopulateVisibleLastAuthoredAt: migrating ==================================
-- execute("      UPDATE conversation_participants\n      SET visible_last_authored_at = (\n        SELECT MAX(created_at)\n        FROM conversation_messages, conversation_message_participants\n        WHERE conversation_messages.conversation_id = conversation_participants.conversation_id\n          AND conversation_messages.author_id = conversation_participants.user_id\n          AND conversation_message_participants.conversation_message_id = conversation_messages.id\n          AND conversation_message_participants.conversation_participant_id = conversation_participants.id\n          AND NOT generated\n      )\n")
   -> 0.0011s
==  PopulateVisibleLastAuthoredAt: migrated (0.0013s) =========================

==  PurgeDuplicateDeletedSisEnrollments: migrating ============================
==  PurgeDuplicateDeletedSisEnrollments: migrated (0.0074s) ===================

==  RemoveDuplicateEnrollmentsFromSections: migrating =========================
-- Deleted 0 duplicate enrollments
==  RemoveDuplicateEnrollmentsFromSections: migrated (0.0006s) ================

==  AddEmptyTags: migrating ===================================================
-- execute("UPDATE conversations SET tags = '' WHERE tags IS NULL")
   -> 0.0002s
-- execute("UPDATE conversation_participants SET tags = '' WHERE tags IS NULL")
   -> 0.0002s
==  AddEmptyTags: migrated (0.0006s) ==========================================

==  SubmissionCommentConversationFix: migrating ===============================
==  SubmissionCommentConversationFix: migrated (0.0010s) ======================

==  CreateDiscussionEntryParticipants: migrating ==============================
-- create_table("discussion_entry_participants")
NOTICE:  CREATE TABLE will create implicit sequence "discussion_entry_participants_id_seq" for serial column "discussion_entry_participants.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "discussion_entry_participants_pkey" for table "discussion_entry_participants"
   -> 0.0421s
-- create_table("discussion_topic_participants")
NOTICE:  CREATE TABLE will create implicit sequence "discussion_topic_participants_id_seq" for serial column "discussion_topic_participants.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "discussion_topic_participants_pkey" for table "discussion_topic_participants"
   -> 0.0352s
-- add_index("discussion_entry_participants", ["discussion_entry_id", "user_id"], {:name=>"index_entry_participant_on_entry_id_and_user_id", :unique=>true})
   -> 0.0633s
-- add_index("discussion_topic_participants", ["discussion_topic_id", "user_id"], {:name=>"index_topic_participant_on_topic_id_and_user_id", :unique=>true})
   -> 0.0458s
==  CreateDiscussionEntryParticipants: migrated (0.1868s) =====================

==  RemoveDuplicateSubmissionMessages: migrating ==============================
==  RemoveDuplicateSubmissionMessages: migrated (0.0109s) =====================

==  RemoveExtraneousConversationTags: migrating ===============================
-- execute("UPDATE conversation_participants SET tags = '' WHERE last_message_at IS NULL AND message_count = 0 AND tags <> ''")
   -> 0.0004s
==  RemoveExtraneousConversationTags: migrated (0.0279s) ======================

==  FixZeroPointPassFailScores: migrating =====================================
==  FixZeroPointPassFailScores: migrated (0.0025s) ============================

==  RemoveIrrelevantSubmissionMessages: migrating =============================
==  RemoveIrrelevantSubmissionMessages: migrated (0.0014s) ====================

==  CreateAppointmentGroupSubContexts: migrating ==============================
-- create_table(:appointment_group_sub_contexts)
NOTICE:  CREATE TABLE will create implicit sequence "appointment_group_sub_contexts_id_seq" for serial column "appointment_group_sub_contexts.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "appointment_group_sub_contexts_pkey" for table "appointment_group_sub_contexts"
   -> 0.0933s
-- add_index(:appointment_group_sub_contexts, :id)
   -> 0.0335s
==  CreateAppointmentGroupSubContexts: migrated (0.1368s) =====================

==  AcceptPendingGroupMemberships: migrating ==================================
==  AcceptPendingGroupMemberships: migrated (0.1281s) =========================

==  FixUserMergeConversations: migrating ======================================
==  FixUserMergeConversations: migrated (0.0007s) =============================

==  SetBlankSisUserIdsToNull: migrating =======================================
==  SetBlankSisUserIdsToNull: migrated (0.0012s) ==============================

==  RemoveDeletedUserAccountAssociations: migrating ===========================
==  RemoveDeletedUserAccountAssociations: migrated (0.0054s) ==================

==  AddAssetContextToDelayedNotification: migrating ===========================
-- add_column(:delayed_notifications, :asset_context_type, :string)
   -> 0.0006s
-- add_column(:delayed_notifications, :asset_context_id, :integer, {:limit=>8})
   -> 0.0004s
==  AddAssetContextToDelayedNotification: migrated (0.0013s) ==================

==  EscapeAttachmentFilenamesForS3: migrating =================================
==  EscapeAttachmentFilenamesForS3: migrated (0.0021s) ========================

==  UseAssetUserAccessLastAccess: migrating ===================================
==  UseAssetUserAccessLastAccess: migrated (0.0135s) ==========================

==  RemoveUnusedNotificationPolicies: migrating ===============================
==  RemoveUnusedNotificationPolicies: migrated (0.0067s) ======================

==  RemoveUnusedNotifications: migrating ======================================
==  RemoveUnusedNotifications: migrated (0.0013s) =============================

==  ConversationMessageAttachmentIds: migrating ===============================
-- add_column(:conversation_messages, :attachment_ids, :text)
   -> 0.0005s
==  ConversationMessageAttachmentIds: migrated (0.0007s) ======================

==  ReassociateConversationAttachments: migrating =============================
==  ReassociateConversationAttachments: migrated (0.1326s) ====================

==  AddManuallySetScoreOnQuizSubmission: migrating ============================
-- add_column(:quiz_submissions, :manually_scored, :boolean)
   -> 0.0006s
==  AddManuallySetScoreOnQuizSubmission: migrated (0.0007s) ===================

==  CreateTriggersEnrollmentsInsertAndEnrollmentsUpdateAndSubmissionsUpdateAndSubmissionsInsert1: migrating 
-- drop_trigger("enrollments_after_insert_row_when_new_workflow_state_active__tr", "enrollments", {:generated=>true})
   -> 0.0007s
-- drop_trigger("enrollments_after_update_row_when_new_workflow_state_old_wor_tr", "enrollments", {:generated=>true})
   -> 0.0006s
-- drop_trigger("submissions_after_update_row_tr", "submissions", {:generated=>true})
NOTICE:  trigger "submissions_after_update_row_tr" for table "submissions" does not exist, skipping
NOTICE:  function submissions_after_update_row_tr() does not exist, skipping
   -> 0.0005s
-- drop_trigger("submissions_after_update_row_when_old_submission_type_is_not_tr", "submissions", {:generated=>true})
   -> 0.0005s
-- drop_trigger("submissions_after_insert_row_tr", "submissions", {:generated=>true})
NOTICE:  trigger "submissions_after_insert_row_tr" for table "submissions" does not exist, skipping
NOTICE:  function submissions_after_insert_row_tr() does not exist, skipping
   -> 0.0005s
-- drop_trigger("submissions_after_insert_row_when_new_submission_type_is_not_tr", "submissions", {:generated=>true})
   -> 0.0005s
-- create_trigger("enrollments_after_insert_row_when_new_workflow_state_active__tr", {:generated=>true, :compatibility=>1})
   -> 0.0002s
NOTICE:  trigger "enrollments_after_insert_row_when_new_workflow_state_active__tr" for table "enrollments" does not exist, skipping
NOTICE:  function enrollments_after_insert_row_when_new_workflow_state_active__tr() does not exist, skipping
-- create_trigger("enrollments_after_update_row_when_new_workflow_state_old_wor_tr", {:generated=>true, :compatibility=>1})
   -> 0.0002s
NOTICE:  trigger "enrollments_after_update_row_when_new_workflow_state_old_wor_tr" for table "enrollments" does not exist, skipping
NOTICE:  function enrollments_after_update_row_when_new_workflow_state_old_wor_tr() does not exist, skipping
-- create_trigger("submissions_after_update_row_tr", {:generated=>true, :compatibility=>1})
   -> 0.0002s
NOTICE:  trigger "submissions_after_update_row_when_old_submission_type_is_not_tr" for table "submissions" does not exist, skipping
NOTICE:  function submissions_after_update_row_when_old_submission_type_is_not_tr() does not exist, skipping
-- create_trigger("submissions_after_insert_row_tr", {:generated=>true, :compatibility=>1})
   -> 0.0001s
NOTICE:  trigger "submissions_after_insert_row_when_new_submission_type_is_not_tr" for table "submissions" does not exist, skipping
NOTICE:  function submissions_after_insert_row_when_new_submission_type_is_not_tr() does not exist, skipping
==  CreateTriggersEnrollmentsInsertAndEnrollmentsUpdateAndSubmissionsUpdateAndSubmissionsInsert1: migrated (0.0114s) 

==  AddAccountAuthorizationConfigLastFailure: migrating =======================
-- add_column(:account_authorization_configs, :last_timeout_failure, :datetime)
   -> 0.0005s
==  AddAccountAuthorizationConfigLastFailure: migrated (0.0006s) ==============

==  AddDiscussionEntryThreading: migrating ====================================
-- add_column(:discussion_entries, :root_entry_id, :integer, {:limit=>8})
   -> 0.0005s
-- add_column(:discussion_entries, :depth, :integer)
   -> 0.0005s
-- add_index(:discussion_entries, [:root_entry_id, :workflow_state, :created_at], {:name=>"index_discussion_entries_root_entry"})
   -> 0.0381s
==  AddDiscussionEntryThreading: migrated (0.0394s) ===========================

==  SetDiscussionEntryRootIds: migrating ======================================
==  SetDiscussionEntryRootIds: migrated (0.0019s) =============================

==  FixUngradedCountsIncludeQuizEssays: migrating =============================
==  FixUngradedCountsIncludeQuizEssays: migrated (0.0028s) ====================

==  DropReallyOldUnusedColumns: migrating =====================================
==  DropReallyOldUnusedColumns: migrated (1.0502s) ============================

==  RemoveDuplicateNotificationPolicies: migrating ============================
==  RemoveDuplicateNotificationPolicies: migrated (0.0027s) ===================

==  AddMaterializedDiscussions: migrating =====================================
-- create_table(:discussion_topic_materialized_views, {:id=>false})
   -> 0.0649s
-- add_index(:discussion_topic_materialized_views, :discussion_topic_id, {:unique=>true, :name=>"index_discussion_topic_materialized_views"})
   -> 0.0335s
==  AddMaterializedDiscussions: migrated (0.0986s) ============================

==  CreateAppointmentGroupContexts: migrating =================================
-- create_table(:appointment_group_contexts)
NOTICE:  CREATE TABLE will create implicit sequence "appointment_group_contexts_id_seq" for serial column "appointment_group_contexts.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "appointment_group_contexts_pkey" for table "appointment_group_contexts"
   -> 0.0745s
==  CreateAppointmentGroupContexts: migrated (0.0746s) ========================

==  DropPageViewRanges: migrating =============================================
-- drop_table(:page_view_ranges)
   -> 0.0019s
==  DropPageViewRanges: migrated (0.0020s) ====================================

==  ExcludeDeletedEntriesFromUnreadCount: migrating ===========================
==  ExcludeDeletedEntriesFromUnreadCount: migrated (0.1573s) ==================

==  ReintroduceDeletedEntriesToUnreadCount: migrating =========================
==  ReintroduceDeletedEntriesToUnreadCount: migrated (0.0023s) ================

==  AddDiscussionTopicsThreadedFlag: migrating ================================
-- add_column(:discussion_topics, :threaded, :boolean)
   -> 0.0004s
==  AddDiscussionTopicsThreadedFlag: migrated (0.0004s) =======================

==  AddAccountIdToReportSnapshots: migrating ==================================
-- add_column(:report_snapshots, :account_id, :integer, {:limit=>8})
   -> 0.0004s
==  AddAccountIdToReportSnapshots: migrated (0.0004s) =========================

==  BreakDownDetailedReportSnapshots: migrating ===============================
==  BreakDownDetailedReportSnapshots: migrated (0.0080s) ======================

==  AddParticipantsPerAppointmentToCalendarEvents: migrating ==================
-- change_table(:calendar_events)
   -> 0.0011s
==  AddParticipantsPerAppointmentToCalendarEvents: migrated (0.0013s) =========

==  AddSourceCourseToContentMigration: migrating ==============================
-- add_column(:content_migrations, :source_course_id, :integer, {:limit=>8})
   -> 0.0006s
==  AddSourceCourseToContentMigration: migrated (0.0007s) =====================

==  AddContentMigrationToContentExport: migrating =============================
-- add_column(:content_exports, :content_migration_id, :integer, {:limit=>8})
   -> 0.0005s
==  AddContentMigrationToContentExport: migrated (0.0006s) ====================

==  AddDiscussionTopicType: migrating =========================================
-- remove_column(:discussion_topics, :threaded)
   -> 0.0005s
-- add_column(:discussion_topics, :discussion_type, :string)
   -> 0.0004s
==  AddDiscussionTopicType: migrated (0.0011s) ================================

==  AddUpdatedAtToEntryIndex: migrating =======================================
-- add_column(:discussion_topic_materialized_views, :generation_started_at, :timestamp)
   -> 0.0006s
-- add_index(:discussion_entries, [:discussion_topic_id, :updated_at, :created_at], {:name=>"index_discussion_entries_for_topic"})
   -> 0.0407s
-- remove_index(:discussion_entries, {:name=>"index_discussion_entries_on_discussion_topic_id"})
   -> 0.0027s
==  AddUpdatedAtToEntryIndex: migrated (0.0443s) ==============================

==  AddPublicDescriptionToCourses: migrating ==================================
-- add_column(:courses, :public_description, :text)
   -> 0.0006s
==  AddPublicDescriptionToCourses: migrated (0.0007s) =========================

==  AddConversationRootAccountIds: migrating ==================================
-- add_column(:conversations, :root_account_ids, :text)
   -> 0.0004s
==  AddConversationRootAccountIds: migrated (0.0005s) =========================

==  PopulateConversationRootAccountIds: migrating =============================
==  PopulateConversationRootAccountIds: migrated (0.0107s) ====================

==  AddPseudonymToStudentViewStudents: migrating ==============================
==  AddPseudonymToStudentViewStudents: migrated (0.0034s) =====================

==  FixUserMergeConversations2: migrating =====================================
==  FixUserMergeConversations2: migrated (0.0006s) ============================

==  AddAssignmentLock: migrating ==============================================
-- add_column(:assignments, :freeze_on_copy, :boolean)
   -> 0.0006s
-- add_column(:assignments, :copied, :boolean)
   -> 0.0004s
==  AddAssignmentLock: migrated (0.0011s) =====================================

==  AddAccountAuthorizationConfigLoginAttribute: migrating ====================
-- add_column(:account_authorization_configs, :login_attribute, :text)
   -> 0.0005s
==  AddAccountAuthorizationConfigLoginAttribute: migrated (0.0006s) ===========

==  DropReallyOldUnusedColumns2: migrating ====================================
==  DropReallyOldUnusedColumns2: migrated (0.2996s) ===========================

==  AddCollections: migrating =================================================
-- create_table(:collections)
NOTICE:  CREATE TABLE will create implicit sequence "collections_id_seq" for serial column "collections.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "collections_pkey" for table "collections"
   -> 0.1016s
-- add_index(:collections, [:context_id, :context_type, :workflow_state, :visibility], {:name=>"index_collections_for_finding"})
   -> 0.0418s
-- create_table(:collection_items)
NOTICE:  CREATE TABLE will create implicit sequence "collection_items_id_seq" for serial column "collection_items.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "collection_items_pkey" for table "collection_items"
   -> 0.1010s
-- add_index(:collection_items, [:collection_id, :workflow_state])
   -> 0.0420s
-- add_index(:collection_items, [:collection_item_data_id, :workflow_state], {:name=>"index_collection_items_on_data_id"})
   -> 0.0338s
-- create_table(:collection_item_datas)
NOTICE:  CREATE TABLE will create implicit sequence "collection_item_datas_id_seq" for serial column "collection_item_datas.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "collection_item_datas_pkey" for table "collection_item_datas"
   -> 0.0844s
-- create_table(:collection_item_upvotes)
NOTICE:  CREATE TABLE will create implicit sequence "collection_item_upvotes_id_seq" for serial column "collection_item_upvotes.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "collection_item_upvotes_pkey" for table "collection_item_upvotes"
   -> 0.0588s
-- add_index(:collection_item_upvotes, [:collection_item_data_id, :user_id], {:unique=>true, :name=>"index_collection_item_upvotes_join"})
   -> 0.0419s
==  AddCollections: migrated (0.5058s) ========================================

==  RemoveExtraneousConversationTags2: migrating ==============================
==  RemoveExtraneousConversationTags2: migrated (0.0016s) =====================

==  MoveMigrationNotificationsToSeparateCategory: migrating ===================
==  MoveMigrationNotificationsToSeparateCategory: migrated (0.0008s) ==========

==  MigrateAppointmentGroupContexts: migrating ================================
==  MigrateAppointmentGroupContexts: migrated (0.0041s) =======================

==  FixNeedsGradingCountTriggers: migrating ===================================
-- drop_trigger("enrollments_after_insert_row_when_new_workflow_state_active__tr", "enrollments", {:generated=>true})
   -> 0.0005s
-- drop_trigger("enrollments_after_update_row_when_new_workflow_state_old_wor_tr", "enrollments", {:generated=>true})
   -> 0.0004s
-- drop_trigger("submissions_after_insert_row_tr", "submissions", {:generated=>true})
NOTICE:  trigger "submissions_after_insert_row_tr" for table "submissions" does not exist, skipping
NOTICE:  function submissions_after_insert_row_tr() does not exist, skipping
   -> 0.0005s
-- drop_trigger("submissions_after_insert_row_when_new_submission_type_is_not_tr", "submissions", {:generated=>true})
   -> 0.0005s
-- drop_trigger("submissions_after_update_row_tr", "submissions", {:generated=>true})
NOTICE:  trigger "submissions_after_update_row_tr" for table "submissions" does not exist, skipping
NOTICE:  function submissions_after_update_row_tr() does not exist, skipping
   -> 0.0005s
-- drop_trigger("submissions_after_update_row_when_old_submission_type_is_not_tr", "submissions", {:generated=>true})
   -> 0.0005s
-- create_trigger("enrollments_after_insert_row_when_new_type_in_studentenrollm_tr", {:generated=>true, :compatibility=>1})
   -> 0.0002s
NOTICE:  trigger "enrollments_after_insert_row_when_new_type_in_studentenrollm_tr" for table "enrollments" does not exist, skipping
NOTICE:  function enrollments_after_insert_row_when_new_type_in_studentenrollm_tr() does not exist, skipping
-- create_trigger("enrollments_after_update_row_when_new_type_in_studentenrollm_tr", {:generated=>true, :compatibility=>1})
   -> 0.0001s
NOTICE:  trigger "enrollments_after_update_row_when_new_type_in_studentenrollm_tr" for table "enrollments" does not exist, skipping
NOTICE:  function enrollments_after_update_row_when_new_type_in_studentenrollm_tr() does not exist, skipping
-- create_trigger("submissions_after_insert_row_tr", {:generated=>true, :compatibility=>1})
   -> 0.0002s
NOTICE:  trigger "submissions_after_insert_row_when_new_submission_type_is_not_tr" for table "submissions" does not exist, skipping
NOTICE:  function submissions_after_insert_row_when_new_submission_type_is_not_tr() does not exist, skipping
-- create_trigger("submissions_after_update_row_tr", {:generated=>true, :compatibility=>1})
   -> 0.0002s
NOTICE:  trigger "submissions_after_update_row_when_new_submission_type_is_not_tr" for table "submissions" does not exist, skipping
NOTICE:  function submissions_after_update_row_when_new_submission_type_is_not_tr() does not exist, skipping
==  FixNeedsGradingCountTriggers: migrated (0.0114s) ==========================

==  ResetUngradedCounts: migrating ============================================
==  ResetUngradedCounts: migrated (0.0028s) ===================================

==  AddConversationBatches: migrating =========================================
-- create_table(:conversation_batches)
NOTICE:  CREATE TABLE will create implicit sequence "conversation_batches_id_seq" for serial column "conversation_batches.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "conversation_batches_pkey" for table "conversation_batches"
   -> 0.0969s
-- add_index(:conversation_batches, [:user_id, :workflow_state])
   -> 0.0336s
==  AddConversationBatches: migrated (0.1308s) ================================

==  SwitchToIcuSortableName: migrating ========================================
-- execute("CREATE EXTENSION IF NOT EXISTS pg_collkey")
-- remove_index(:users, :sortable_name)
   -> 0.0060s
-- execute("CREATE INDEX CONCURRENTLY index_users_on_sortable_name ON users (CAST(LOWER(sortable_name) AS bytea))")
   -> 0.0916s
==  SwitchToIcuSortableName: migrated (0.2486s) ===============================

==  FixUserConversationsCountsForAll: migrating ===============================
==  FixUserConversationsCountsForAll: migrated (0.0051s) ======================

==  AddToolIdToExternalTools: migrating =======================================
-- add_column(:context_external_tools, :tool_id, :string)
   -> 0.0006s
-- add_index(:context_external_tools, [:tool_id])
   -> 0.0391s
-- add_column(:developer_keys, :tool_id, :string)
   -> 0.0006s
-- add_index(:developer_keys, [:tool_id], {:unique=>true})
   -> 0.0559s
==  AddToolIdToExternalTools: migrated (0.0965s) ==============================

==  DelayedJobsDeleteTriggerLockForUpdate: migrating ==========================
-- execute("      CREATE OR REPLACE FUNCTION delayed_jobs_after_delete_row_tr_fn () RETURNS trigger AS $$\n      BEGIN\n        UPDATE delayed_jobs SET next_in_strand = 't' WHERE id = (SELECT id FROM delayed_jobs j2 WHERE j2.strand = OLD.strand ORDER BY j2.strand, j2.id ASC LIMIT 1 FOR UPDATE);\n        RETURN OLD;\n      END;\n      $$ LANGUAGE plpgsql;\n")
   -> 0.0007s
==  DelayedJobsDeleteTriggerLockForUpdate: migrated (0.0008s) =================

==  UpdateCollectionItemImageColumns: migrating ===============================
-- add_column(:collection_item_datas, :image_pending, :boolean)
   -> 0.0007s
-- add_column(:collection_item_datas, :image_attachment_id, :integer, {:limit=>8})
   -> 0.0004s
-- add_column(:collection_item_datas, :image_url, :text)
   -> 0.0004s
-- add_column(:collection_items, :user_id, :integer, {:limit=>8})
   -> 0.0004s
-- remove_column(:collection_items, :image_attachment_id)
   -> 0.0006s
-- remove_column(:collection_items, :image_url)
   -> 0.0004s
-- add_foreign_key(:collection_items, :users)
   -> 0.0025s
-- add_foreign_key(:collection_items, :collections)
   -> 0.0019s
==  UpdateCollectionItemImageColumns: migrated (0.0080s) ======================

==  AddBioToUser: migrating ===================================================
-- add_column(:users, :bio, :text)
   -> 0.0006s
==  AddBioToUser: migrated (0.0007s) ==========================================

==  AddIconUrlToDeveloperKeys: migrating ======================================
-- add_column(:developer_keys, :icon_url, :string)
   -> 0.0005s
==  AddIconUrlToDeveloperKeys: migrated (0.0006s) =============================

==  AddUserObservers: migrating ===============================================
-- create_table(:user_observers)
NOTICE:  CREATE TABLE will create implicit sequence "user_observers_id_seq" for serial column "user_observers.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "user_observers_pkey" for table "user_observers"
   -> 0.0577s
-- add_index(:user_observers, [:user_id, :observer_id], {:unique=>true})
   -> 0.0580s
-- add_index(:user_observers, :observer_id)
   -> 0.0583s
-- add_index(:enrollments, [:associated_user_id], {:algorithm=>:concurrently, :where=>"associated_user_id IS NOT NULL"})
   -> 0.1252s
==  AddUserObservers: migrated (0.2997s) ======================================

==  AddModeratorFlagToGroupMemberships: migrating =============================
-- add_column(:group_memberships, :moderator, :boolean)
   -> 0.0006s
==  AddModeratorFlagToGroupMemberships: migrated (0.0007s) ====================

==  AddCourseSelfEnrollmentCode: migrating ====================================
-- add_column(:courses, :self_enrollment_code, :string)
   -> 0.0074s
-- add_index(:courses, [:self_enrollment_code], {:unique=>true, :algorithm=>:concurrently, :where=>"self_enrollment_code IS NOT NULL"})
   -> 0.0748s
==  AddCourseSelfEnrollmentCode: migrated (0.0824s) ===========================

==  AddCollectionItemHtmlPreview: migrating ===================================
-- add_column(:collection_item_datas, :html_preview, :text)
   -> 0.0005s
==  AddCollectionItemHtmlPreview: migrated (0.0006s) ==========================

==  AddUniqueIndexOnThumbnails: migrating =====================================
-- add_index(:thumbnails, [:parent_id, :thumbnail], {:unique=>true, :name=>"index_thumbnails_size"})
   -> 0.0384s
==  AddUniqueIndexOnThumbnails: migrated (0.0385s) ============================

==  DropReallyOldUnusedColumns3: migrating ====================================
==  DropReallyOldUnusedColumns3: migrated (0.1565s) ===========================

==  AddPublicColumnToUser: migrating ==========================================
-- add_column(:users, :public, :boolean)
   -> 0.0006s
==  AddPublicColumnToUser: migrated (0.0007s) =================================

==  LengthenExternalFeedEntriesUrl: migrating =================================
-- change_column(:external_feed_entries, :url, :string, {:limit=>4096})
   -> 0.0006s
==  LengthenExternalFeedEntriesUrl: migrated (0.0008s) ========================

==  AddUserBirthdate: migrating ===============================================
-- add_column(:users, :birthdate, :datetime)
   -> 0.0005s
==  AddUserBirthdate: migrated (0.0006s) ======================================

==  LengthenContextExternalToolsUrl: migrating ================================
-- change_column(:context_external_tools, :url, :string, {:limit=>4096})
   -> 0.0004s
==  LengthenContextExternalToolsUrl: migrated (0.0005s) =======================

==  AddUserFollowsTable: migrating ============================================
-- create_table(:user_follows)
NOTICE:  CREATE TABLE will create implicit sequence "user_follows_id_seq" for serial column "user_follows.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "user_follows_pkey" for table "user_follows"
   -> 0.0741s
-- add_index(:user_follows, [:following_user_id, :followed_item_type, :followed_item_id], {:unique=>true, :name=>"index_user_follows_unique"})
   -> 0.0320s
-- add_index(:user_follows, [:followed_item_id, :followed_item_type], {:name=>"index_user_follows_inverse"})
   -> 0.0337s
==  AddUserFollowsTable: migrated (0.1401s) ===================================

==  AddCoursesSisSourceIdIndex: migrating =====================================
-- add_index(:courses, :sis_source_id, {:algorithm=>:concurrently})
   -> 0.0819s
==  AddCoursesSisSourceIdIndex: migrated (0.0821s) ============================

==  DropCollectionItemUserFk: migrating =======================================
-- remove_foreign_key(:collection_items, :users)
   -> 0.0012s
==  DropCollectionItemUserFk: migrated (0.0013s) ==============================

==  AddDescriptionToGroups: migrating =========================================
-- add_column(:groups, :description, :text)
   -> 0.0005s
==  AddDescriptionToGroups: migrated (0.0006s) ================================

==  DropPsqlJobsPopFn: migrating ==============================================
NOTICE:  function pop_from_delayed_jobs(pg_catalog.varchar,pg_catalog.varchar,pg_catalog.int4,pg_catalog.int4,pg_catalog.timestamp) does not exist, skipping
==  DropPsqlJobsPopFn: migrated (0.0003s) =====================================

==  UpdateCollectionItemColumns: migrating ====================================
-- rename_column(:collection_items, :description, :user_comment)
   -> 0.0004s
-- add_column(:collection_item_datas, :title, :string)
   -> 0.0005s
-- add_column(:collection_item_datas, :description, :text)
   -> 0.0003s
==  UpdateCollectionItemColumns: migrated (0.0015s) ===========================

==  AddAvatarImageToGroups: migrating =========================================
-- add_column(:groups, :avatar_attachment_id, :integer, {:limit=>8})
   -> 0.0006s
==  AddAvatarImageToGroups: migrated (0.0007s) ================================

==  DropTriggersForCollections: migrating =====================================
-- drop_trigger("collection_items_after_insert_row_tr", "collection_items", {:generated=>true})
NOTICE:  trigger "collection_items_after_insert_row_tr" for table "collection_items" does not exist, skipping
NOTICE:  function collection_items_after_insert_row_tr() does not exist, skipping
   -> 0.0006s
-- drop_trigger("collection_items_after_insert_row_when_new_workflow_state_ac_tr", "collection_items", {:generated=>true})
NOTICE:  trigger "collection_items_after_insert_row_when_new_workflow_state_ac_tr" for table "collection_items" does not exist, skipping
NOTICE:  function collection_items_after_insert_row_when_new_workflow_state_ac_tr() does not exist, skipping
   -> 0.0004s
-- drop_trigger("collection_items_after_update_row_tr", "collection_items", {:generated=>true})
NOTICE:  trigger "collection_items_after_update_row_tr" for table "collection_items" does not exist, skipping
NOTICE:  function collection_items_after_update_row_tr() does not exist, skipping
   -> 0.0004s
-- drop_trigger("collection_items_after_update_row_when_new_workflow_state_ol_tr", "collection_items", {:generated=>true})
NOTICE:  trigger "collection_items_after_update_row_when_new_workflow_state_ol_tr" for table "collection_items" does not exist, skipping
NOTICE:  function collection_items_after_update_row_when_new_workflow_state_ol_tr() does not exist, skipping
   -> 0.0004s
-- drop_trigger("collection_items_after_delete_row_tr", "collection_items", {:generated=>true})
NOTICE:  trigger "collection_items_after_delete_row_tr" for table "collection_items" does not exist, skipping
NOTICE:  function collection_items_after_delete_row_tr() does not exist, skipping
   -> 0.0004s
-- drop_trigger("collection_items_after_delete_row_when_old_workflow_state_ac_tr", "collection_items", {:generated=>true})
NOTICE:  trigger "collection_items_after_delete_row_when_old_workflow_state_ac_tr" for table "collection_items" does not exist, skipping
NOTICE:  function collection_items_after_delete_row_when_old_workflow_state_ac_tr() does not exist, skipping
   -> 0.0004s
-- drop_trigger("collection_item_upvotes_after_insert_row_tr", "collection_item_upvotes", {:generated=>true})
NOTICE:  trigger "collection_item_upvotes_after_insert_row_tr" for table "collection_item_upvotes" does not exist, skipping
NOTICE:  function collection_item_upvotes_after_insert_row_tr() does not exist, skipping
   -> 0.0004s
-- drop_trigger("collection_item_upvotes_after_delete_row_tr", "collection_item_upvotes", {:generated=>true})
NOTICE:  trigger "collection_item_upvotes_after_delete_row_tr" for table "collection_item_upvotes" does not exist, skipping
NOTICE:  function collection_item_upvotes_after_delete_row_tr() does not exist, skipping
   -> 0.0004s
==  DropTriggersForCollections: migrated (0.0037s) ============================

==  MoveContentExportNotificationsToMigrationCategory: migrating ==============
==  MoveContentExportNotificationsToMigrationCategory: migrated (0.0033s) =====

==  RemoveUnusedGroupsColumns: migrating ======================================
-- remove_column(:groups, :type)
   -> 0.0007s
-- remove_column(:groups, :groupable_id)
   -> 0.0003s
-- remove_column(:groups, :groupable_type)
   -> 0.0003s
==  RemoveUnusedGroupsColumns: migrated (0.0017s) =============================

==  DelayedJobsUseAdvisoryLocks: migrating ====================================
-- execute("      CREATE FUNCTION half_md5_as_bigint(strand varchar) RETURNS bigint AS $$\n      DECLARE\n        strand_md5 bytea;\n      BEGIN\n        strand_md5 := decode(md5(strand), 'hex');\n        RETURN (CAST(get_byte(strand_md5, 0) AS bigint) << 56) +\n                                  (CAST(get_byte(strand_md5, 1) AS bigint) << 48) +\n                                  (CAST(get_byte(strand_md5, 2) AS bigint) << 40) +\n                                  (CAST(get_byte(strand_md5, 3) AS bigint) << 32) +\n                                  (CAST(get_byte(strand_md5, 4) AS bigint) << 24) +\n                                  (get_byte(strand_md5, 5) << 16) +\n                                  (get_byte(strand_md5, 6) << 8) +\n                                   get_byte(strand_md5, 7);\n      END;\n      $$ LANGUAGE plpgsql;\n")
   -> 0.0015s
-- execute("      CREATE OR REPLACE FUNCTION delayed_jobs_before_insert_row_tr_fn () RETURNS trigger AS $$\n      BEGIN\n        PERFORM pg_advisory_xact_lock(half_md5_as_bigint(NEW.strand));\n        IF (SELECT 1 FROM delayed_jobs WHERE strand = NEW.strand LIMIT 1) = 1 THEN\n          NEW.next_in_strand := 'f';\n        END IF;\n        RETURN NEW;\n      END;\n      $$ LANGUAGE plpgsql;\n")
   -> 0.0004s
-- execute("      CREATE OR REPLACE FUNCTION delayed_jobs_after_delete_row_tr_fn () RETURNS trigger AS $$\n      BEGIN\n        PERFORM pg_advisory_xact_lock(half_md5_as_bigint(OLD.strand));\n        UPDATE delayed_jobs SET next_in_strand = 't' WHERE id = (SELECT id FROM delayed_jobs j2 WHERE j2.strand = OLD.strand ORDER BY j2.strand, j2.id ASC LIMIT 1 FOR UPDATE);\n        RETURN OLD;\n      END;\n      $$ LANGUAGE plpgsql;\n")
   -> 0.0003s
==  DelayedJobsUseAdvisoryLocks: migrated (0.0026s) ===========================

==  IndexJobsOnLockedBy: migrating ============================================
-- add_index(:delayed_jobs, :locked_by, {:algorithm=>:concurrently, :where=>"locked_by IS NOT NULL"})
   -> 0.0739s
==  IndexJobsOnLockedBy: migrated (0.0740s) ===================================

==  AddAggregateCountsToCollections: migrating ================================
-- add_column(:collections, :followers_count, :integer, {:default=>0})
   -> 0.0011s
-- add_column(:collections, :items_count, :integer, {:default=>0})
   -> 0.0008s
==  AddAggregateCountsToCollections: migrated (0.0021s) =======================

==  CreateCollectionItemsCountAndFollowersCountTriggers: migrating ============
-- create_trigger("collection_items_after_insert_row_tr", {:generated=>true, :compatibility=>1})
   -> 0.0002s
NOTICE:  trigger "collection_items_after_insert_row_when_new_workflow_state_ac_tr" for table "collection_items" does not exist, skipping
NOTICE:  function collection_items_after_insert_row_when_new_workflow_state_ac_tr() does not exist, skipping
-- create_trigger("collection_items_after_update_row_tr", {:generated=>true, :compatibility=>1})
   -> 0.0001s
NOTICE:  trigger "collection_items_after_update_row_when_new_workflow_state_ol_tr" for table "collection_items" does not exist, skipping
NOTICE:  function collection_items_after_update_row_when_new_workflow_state_ol_tr() does not exist, skipping
-- create_trigger("collection_items_after_delete_row_tr", {:generated=>true, :compatibility=>1})
   -> 0.0001s
NOTICE:  trigger "collection_items_after_delete_row_when_old_workflow_state_ac_tr" for table "collection_items" does not exist, skipping
NOTICE:  function collection_items_after_delete_row_when_old_workflow_state_ac_tr() does not exist, skipping
-- create_trigger("user_follows_after_insert_row_tr", {:generated=>true, :compatibility=>1})
   -> 0.0001s
NOTICE:  trigger "user_follows_after_insert_row_when_new_followed_item_type_co_tr" for table "user_follows" does not exist, skipping
NOTICE:  function user_follows_after_insert_row_when_new_followed_item_type_co_tr() does not exist, skipping
-- create_trigger("user_follows_after_delete_row_tr", {:generated=>true, :compatibility=>1})
   -> 0.0001s
NOTICE:  trigger "user_follows_after_delete_row_when_old_followed_item_type_co_tr" for table "user_follows" does not exist, skipping
NOTICE:  function user_follows_after_delete_row_when_old_followed_item_type_co_tr() does not exist, skipping
==  CreateCollectionItemsCountAndFollowersCountTriggers: migrated (0.0100s) ===

==  CountExistingCollectionItemsAndFollowers: migrating =======================
==  CountExistingCollectionItemsAndFollowers: migrated (0.1391s) ==============

==  AddJobsRunAtIndex: migrating ==============================================
-- add_index(:delayed_jobs, ["run_at", "tag"], {:algorithm=>:concurrently})
   -> 0.0739s
==  AddJobsRunAtIndex: migrated (0.0741s) =====================================

==  DropSisBatchLogEntries: migrating =========================================
-- drop_table(:sis_batch_log_entries)
   -> 0.0015s
==  DropSisBatchLogEntries: migrated (0.0016s) ================================

==  DropSectionOrganizationNameAndLongSectionCodeFromCourseSections: migrating 
-- remove_column(:course_sections, :section_organization_name)
   -> 0.0006s
-- remove_column(:course_sections, :long_section_code)
   -> 0.0004s
==  DropSectionOrganizationNameAndLongSectionCodeFromCourseSections: migrated (0.0012s) 

==  RemoveDuplicateGroupDiscussions: migrating ================================
==  RemoveDuplicateGroupDiscussions: migrated (0.0029s) =======================

==  AddUniqueIndexToDiscussionTopics: migrating ===============================
-- add_index(:discussion_topics, [:context_id, :context_type, :root_topic_id], {:unique=>true, :algorithm=>:concurrently, :name=>"index_discussion_topics_unique_subtopic_per_context"})
   -> 0.0737s
-- remove_index(:discussion_topics, {:name=>"index_discussion_topics_on_context_id_and_context_type"})
   -> 0.0083s
==  AddUniqueIndexToDiscussionTopics: migrated (0.0822s) ======================

==  AddSisBatchesIndex: migrating =============================================
-- remove_index(:sis_batches, {:name=>"index_sis_batches_for_accounts"})
   -> 0.0010s
-- add_index(:sis_batches, [:account_id, :created_at], {:algorithm=>:concurrently, :where=>"workflow_state='created'", :name=>"index_sis_batches_pending_for_accounts"})
   -> 0.0872s
-- add_index(:sis_batches, [:account_id, :created_at], {:algorithm=>:concurrently, :name=>"index_sis_batches_account_id_created_at"})
   -> 0.0915s
==  AddSisBatchesIndex: migrated (0.1800s) ====================================

==  MigrateToLimitPrivilegesToCourseSection: migrating ========================
==  MigrateToLimitPrivilegesToCourseSection: migrated (0.0050s) ===============

==  DropLimitPrivelegesToCourseSectionFromEnrollments: migrating ==============
-- remove_column(:enrollments, :limit_priveleges_to_course_section)
   -> 0.0005s
==  DropLimitPrivelegesToCourseSectionFromEnrollments: migrated (0.0006s) =====

==  FixDefaultLimitPrivilegesToCourseSection: migrating =======================
==  FixDefaultLimitPrivilegesToCourseSection: migrated (0.0009s) ==============

==  AddBasicIndicesToGroupCategories: migrating ===============================
-- add_index(:group_categories, [:context_id, :context_type], {:name=>"index_group_categories_on_context"})
   -> 0.0357s
-- add_index(:group_categories, :role, {:name=>"index_group_categories_on_role"})
   -> 0.0336s
==  AddBasicIndicesToGroupCategories: migrated (0.0696s) ======================

==  ConstrainAssignmentGroupCategoryIds: migrating ============================
-- add_foreign_key(:assignments, :group_categories)
   -> 0.0024s
==  ConstrainAssignmentGroupCategoryIds: migrated (0.0035s) ===================

==  AddConversationMessageProperties: migrating ===============================
-- add_column(:conversation_messages, :has_attachments, :boolean)
   -> 0.0005s
-- add_column(:conversation_messages, :has_media_objects, :boolean)
   -> 0.0004s
==  AddConversationMessageProperties: migrated (0.0012s) ======================

==  AddHomeworkSubmissionForExternalTools: migrating ==========================
-- add_column(:context_external_tools, :has_homework_submission, :boolean)
   -> 0.0006s
==  AddHomeworkSubmissionForExternalTools: migrated (0.0007s) =================

==  AddDefaultUserStorageQuota: migrating =====================================
-- add_column(:accounts, :default_user_storage_quota, :bigint)
   -> 0.0005s
==  AddDefaultUserStorageQuota: migrated (0.0007s) ============================

==  PopulateConversationMessageProperties: migrating ==========================
==  PopulateConversationMessageProperties: migrated (0.0040s) =================

==  AddUniqueIndexOnFavorites: migrating ======================================
-- add_index(:favorites, [:user_id, :context_id, :context_type], {:unique=>true, :name=>"index_favorites_unique_user_object"})
   -> 0.0397s
==  AddUniqueIndexOnFavorites: migrated (0.0447s) =============================

==  AddAttachmentIndexesForSorting: migrating =================================
-- execute("CREATE INDEX CONCURRENTLY index_attachments_on_folder_id_and_file_state_and_display_name ON attachments (folder_id, file_state, CAST(LOWER(replace(display_name, '\\', '\\\\')) AS bytea)) WHERE folder_id IS NOT NULL")
   -> 0.0735s
-- add_index(:attachments, [:folder_id, :file_state, :position], {:algorithm=>:concurrently})
   -> 0.0749s
-- remove_index(:attachments, :folder_id)
   -> 0.0083s
==  AddAttachmentIndexesForSorting: migrated (0.1574s) ========================

==  UpdateSortableNameIndex: migrating ========================================
-- remove_index(:users, :sortable_name)
   -> 0.0044s
-- execute("CREATE INDEX CONCURRENTLY index_users_on_sortable_name ON users (CAST(LOWER(replace(sortable_name, '\\', '\\\\')) AS bytea))")
   -> 0.0749s
==  UpdateSortableNameIndex: migrated (0.0801s) ===============================

==  DropUserBio: migrating ====================================================
-- remove_column(:users, :bio)
   -> 0.0012s
==  DropUserBio: migrated (0.0013s) ===========================================

==  CreateUserProfilesTable: migrating ========================================
-- create_table(:user_profiles)
NOTICE:  CREATE TABLE will create implicit sequence "user_profiles_id_seq" for serial column "user_profiles.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "user_profiles_pkey" for table "user_profiles"
   -> 0.0907s
==  CreateUserProfilesTable: migrated (0.0908s) ===============================

==  AddVisibilityToUserServices: migrating ====================================
-- add_column(:user_services, :visible, :boolean)
   -> 0.0005s
==  AddVisibilityToUserServices: migrated (0.0006s) ===========================

==  AddFileNotifications: migrating ===========================================
==  AddFileNotifications: migrated (0.4361s) ==================================

==  AddNeedNotifyColumnToAttachments: migrating ===============================
-- add_column(:attachments, :need_notify, :boolean)
   -> 0.0074s
==  AddNeedNotifyColumnToAttachments: migrated (0.0076s) ======================

==  IndexCourseSectionsNonxlistCourse: migrating ==============================
-- add_index(:course_sections, [:nonxlist_course_id], {:name=>"index_course_sections_on_nonxlist_course", :algorithm=>:concurrently, :where=>"nonxlist_course_id IS NOT NULL"})
   -> 0.0968s
==  IndexCourseSectionsNonxlistCourse: migrated (0.0969s) =====================

==  CreateUserProfileLinksTable: migrating ====================================
-- create_table(:user_profile_links)
NOTICE:  CREATE TABLE will create implicit sequence "user_profile_links_id_seq" for serial column "user_profile_links.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "user_profile_links_pkey" for table "user_profile_links"
   -> 0.0903s
==  CreateUserProfileLinksTable: migrated (0.0904s) ===========================

==  RemoveContextModuleAssociationIdFromContentTags: migrating ================
-- remove_column(:content_tags, :context_module_association_id)
   -> 0.0007s
==  RemoveContextModuleAssociationIdFromContentTags: migrated (0.0008s) =======

==  UniquifyWikis: migrating ==================================================
==  UniquifyWikis: migrated (0.0006s) =========================================

==  DropWikiNamespaces: migrating =============================================
-- drop_table(:wiki_namespaces)
   -> 0.0017s
==  DropWikiNamespaces: migrated (0.0018s) ====================================

==  FixNeedNotifyIndexCondition: migrating ====================================
-- execute("DROP INDEX IF EXISTS index_attachments_on_need_notify")
NOTICE:  index "index_attachments_on_need_notify" does not exist, skipping
   -> 0.0004s
-- add_index(:attachments, :need_notify, {:algorithm=>:concurrently, :where=>"need_notify"})
   -> 0.0811s
==  FixNeedNotifyIndexCondition: migrated (0.0818s) ===========================

==  AddUniqueIndexOnNotifications: migrating ==================================
-- add_index(:notifications, [:name], {:unique=>true, :name=>"index_notifications_unique_on_name"})
   -> 0.0540s
==  AddUniqueIndexOnNotifications: migrated (0.0550s) =========================

==  AddOtpToUsers: migrating ==================================================
-- add_column(:users, :otp_secret_key_enc, :string)
   -> 0.0005s
-- add_column(:users, :otp_secret_key_salt, :string)
   -> 0.0003s
-- add_column(:users, :otp_communication_channel_id, :integer, {:limit=>8})
   -> 0.0003s
==  AddOtpToUsers: migrated (0.0012s) =========================================

==  AddCrocodoc: migrating ====================================================
-- create_table(:crocodoc_documents)
NOTICE:  CREATE TABLE will create implicit sequence "crocodoc_documents_id_seq" for serial column "crocodoc_documents.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "crocodoc_documents_pkey" for table "crocodoc_documents"
   -> 0.0711s
-- add_index(:crocodoc_documents, :uuid)
   -> 0.0336s
-- add_index(:crocodoc_documents, :attachment_id)
   -> 0.0336s
-- add_index(:crocodoc_documents, :process_state)
   -> 0.0337s
==  AddCrocodoc: migrated (0.1724s) ===========================================

==  AddInitialEnrollmentType: migrating =======================================
-- add_column(:users, :initial_enrollment_type, :string)
   -> 0.0072s
==  AddInitialEnrollmentType: migrated (0.0073s) ==============================

==  AddUploadErrorCodeToAttachments: migrating ================================
-- add_column(:attachments, :upload_error_message, :string)
   -> 0.0005s
==  AddUploadErrorCodeToAttachments: migrated (0.0006s) =======================

==  ChangeAuthOverTlsToString: migrating ======================================
-- change_column(:account_authorization_configs, :auth_over_tls, :string)
   -> 0.1349s
==  ChangeAuthOverTlsToString: migrated (0.1350s) =============================

==  FixProfilePictures: migrating =============================================
==  FixProfilePictures: migrated (0.0397s) ====================================

==  AddOutcomeStandardsColumns: migrating =====================================
-- add_column(:learning_outcomes, :vendor_guid, :string)
   -> 0.0005s
-- add_column(:learning_outcomes, :low_grade, :string)
   -> 0.0004s
-- add_column(:learning_outcomes, :high_grade, :string)
   -> 0.0004s
-- add_index(:learning_outcomes, :vendor_guid, {:name=>"index_learning_outcomes_on_vendor_guid"})
   -> 0.0557s
-- add_column(:learning_outcome_groups, :vendor_guid, :string)
   -> 0.0005s
-- add_column(:learning_outcome_groups, :low_grade, :string)
   -> 0.0004s
-- add_column(:learning_outcome_groups, :high_grade, :string)
   -> 0.0002s
-- add_index(:learning_outcome_groups, :vendor_guid, {:name=>"index_learning_outcome_groups_on_vendor_guid"})
   -> 0.0407s
==  AddOutcomeStandardsColumns: migrated (0.0994s) ============================

==  AddCrocodocIdToUsers: migrating ===========================================
-- add_column(:users, :crocodoc_id, :int)
   -> 0.0006s
==  AddCrocodocIdToUsers: migrated (0.0097s) ==================================

==  LengthenOauthReturnUrl: migrating =========================================
-- change_column(:oauth_requests, :return_url, :string, {:limit=>4096})
   -> 0.0006s
==  LengthenOauthReturnUrl: migrated (0.0007s) ================================

==  RemoveBogusEnrollmentAssociatedUserIds: migrating =========================
==  RemoveBogusEnrollmentAssociatedUserIds: migrated (0.0025s) ================

==  DropHashtags: migrating ===================================================
-- drop_table(:short_message_associations)
   -> 0.0026s
-- drop_table(:short_messages)
   -> 0.0016s
-- drop_table(:hashtags)
   -> 0.0014s
-- remove_column(:courses, :hashtag)
   -> 0.0005s
==  DropHashtags: migrated (0.0066s) ==========================================

==  AddSamlProperties: migrating ==============================================
-- add_column(:account_authorization_configs, :idp_entity_id, :string)
   -> 0.0006s
-- add_column(:account_authorization_configs, :position, :integer)
   -> 0.0005s
-- execute("        UPDATE account_authorization_configs aac\n        SET position =\n          CASE WHEN (SELECT count(*) FROM account_authorization_configs WHERE account_id = aac.account_id) > 1\n            THEN aac.id\n            ELSE 1\n          END;\n")
   -> 0.0006s
==  AddSamlProperties: migrated (0.0022s) =====================================

==  CreateContentParticipationCounts: migrating ===============================
-- create_table("content_participation_counts")
NOTICE:  CREATE TABLE will create implicit sequence "content_participation_counts_id_seq" for serial column "content_participation_counts.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "content_participation_counts_pkey" for table "content_participation_counts"
   -> 0.0840s
-- add_index("content_participation_counts", ["context_id", "context_type", "user_id", "content_type"], {:name=>"index_content_participation_counts_uniquely", :unique=>true})
   -> 0.0419s
==  CreateContentParticipationCounts: migrated (0.1261s) ======================

==  CreateMediaTracks: migrating ==============================================
-- create_table(:media_tracks)
NOTICE:  CREATE TABLE will create implicit sequence "media_tracks_id_seq" for serial column "media_tracks.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "media_tracks_pkey" for table "media_tracks"
   -> 0.0781s
-- add_index(:media_tracks, [:media_object_id, :locale], {:name=>"media_object_id_locale"})
   -> 0.0334s
==  CreateMediaTracks: migrated (0.1117s) =====================================

==  CreateContentParticipations: migrating ====================================
-- create_table("content_participations")
NOTICE:  CREATE TABLE will create implicit sequence "content_participations_id_seq" for serial column "content_participations.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "content_participations_pkey" for table "content_participations"
   -> 0.0709s
-- add_index("content_participations", ["content_id", "content_type", "user_id"], {:name=>"index_content_participations_uniquely", :unique=>true})
   -> 0.0503s
==  CreateContentParticipations: migrated (0.1214s) ===========================

==  LengthenProfileLinksUrl: migrating ========================================
-- change_column(:user_profile_links, :url, :string, {:limit=>4096})
   -> 0.0007s
==  LengthenProfileLinksUrl: migrated (0.0008s) ===============================

==  ChangeDelayedJobsHandlerToText: migrating =================================
-- change_column(:delayed_jobs, :handler, :text)
   -> 0.0005s
==  ChangeDelayedJobsHandlerToText: migrated (0.0006s) ========================

==  AssignmentOverrideMigration: migrating ====================================
-- create_table(:assignment_overrides)
NOTICE:  CREATE TABLE will create implicit sequence "assignment_overrides_id_seq" for serial column "assignment_overrides.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "assignment_overrides_pkey" for table "assignment_overrides"
   -> 0.0721s
-- add_index(:assignment_overrides, [:assignment_id, :set_type, :set_id], {:name=>"index_assignment_overrides_on_assignment_and_set", :unique=>true, :where=>"workflow_state='active' and set_id is not null"})
   -> 0.0417s
-- add_foreign_key(:assignment_overrides, :assignments)
   -> 0.0018s
-- create_table(:assignment_override_students)
NOTICE:  CREATE TABLE will create implicit sequence "assignment_override_students_id_seq" for serial column "assignment_override_students.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "assignment_override_students_pkey" for table "assignment_override_students"
   -> 0.0403s
-- add_index(:assignment_override_students, [:assignment_id, :user_id], {:unique=>true})
   -> 0.0504s
-- add_index(:assignment_override_students, :assignment_override_id)
   -> 0.0587s
-- add_foreign_key(:assignment_override_students, :assignments)
   -> 0.0016s
-- add_foreign_key(:assignment_override_students, :assignment_overrides)
   -> 0.0012s
-- add_foreign_key(:assignment_override_students, :users)
   -> 0.0016s
==  AssignmentOverrideMigration: migrated (0.2699s) ===========================

==  CreateTriggersEnrollmentsInsertAndEnrollmentsUpdateAndSubmissionsInsertAndSubmissionsUpdate1: migrating 
-- drop_trigger("enrollments_after_insert_row_when_new_type_in_studentenrollm_tr", "enrollments", {:generated=>true})
   -> 0.0008s
-- drop_trigger("enrollments_after_update_row_when_new_type_in_studentenrollm_tr", "enrollments", {:generated=>true})
   -> 0.0005s
-- drop_trigger("submissions_after_insert_row_tr", "submissions", {:generated=>true})
NOTICE:  trigger "submissions_after_insert_row_tr" for table "submissions" does not exist, skipping
NOTICE:  function submissions_after_insert_row_tr() does not exist, skipping
   -> 0.0005s
-- drop_trigger("submissions_after_insert_row_when_new_submission_type_is_not_tr", "submissions", {:generated=>true})
   -> 0.0005s
-- drop_trigger("submissions_after_update_row_tr", "submissions", {:generated=>true})
NOTICE:  trigger "submissions_after_update_row_tr" for table "submissions" does not exist, skipping
NOTICE:  function submissions_after_update_row_tr() does not exist, skipping
   -> 0.0005s
-- drop_trigger("submissions_after_update_row_when_new_submission_type_is_not_tr", "submissions", {:generated=>true})
   -> 0.0004s
-- create_trigger("enrollments_after_insert_row_when_new_type_in_studentenrollm_tr", {:generated=>true, :compatibility=>1})
   -> 0.0001s
NOTICE:  trigger "enrollments_after_insert_row_when_new_type_in_studentenrollm_tr" for table "enrollments" does not exist, skipping
NOTICE:  function enrollments_after_insert_row_when_new_type_in_studentenrollm_tr() does not exist, skipping
-- create_trigger("enrollments_after_update_row_when_new_type_in_studentenrollm_tr", {:generated=>true, :compatibility=>1})
   -> 0.0001s
NOTICE:  trigger "enrollments_after_update_row_when_new_type_in_studentenrollm_tr" for table "enrollments" does not exist, skipping
NOTICE:  function enrollments_after_update_row_when_new_type_in_studentenrollm_tr() does not exist, skipping
-- create_trigger("submissions_after_insert_row_tr", {:generated=>true, :compatibility=>1})
   -> 0.0001s
NOTICE:  trigger "submissions_after_insert_row_when_new_submission_type_is_not_tr" for table "submissions" does not exist, skipping
NOTICE:  function submissions_after_insert_row_when_new_submission_type_is_not_tr() does not exist, skipping
-- create_trigger("submissions_after_update_row_tr", {:generated=>true, :compatibility=>1})
   -> 0.0001s
NOTICE:  trigger "submissions_after_update_row_when_new_submission_type_is_not_tr" for table "submissions" does not exist, skipping
NOTICE:  function submissions_after_update_row_when_new_submission_type_is_not_tr() does not exist, skipping
==  CreateTriggersEnrollmentsInsertAndEnrollmentsUpdateAndSubmissionsInsertAndSubmissionsUpdate1: migrated (0.0120s) 

==  FixBulkMessageAttachments: migrating ======================================
==  FixBulkMessageAttachments: migrated (0.0089s) =============================

==  AssignmentOverrideIndexesMigration: migrating =============================
-- add_index(:assignment_overrides, [:set_type, :set_id])
   -> 0.0380s
-- add_index(:assignment_override_students, :user_id)
   -> 0.0420s
==  AssignmentOverrideIndexesMigration: migrated (0.0802s) ====================

==  AddAccessTokenCryptedToken: migrating =====================================
-- add_column(:access_tokens, :crypted_token, :string)
   -> 0.0006s
-- add_column(:access_tokens, :token_hint, :string)
   -> 0.0004s
-- add_index(:access_tokens, [:crypted_token], {:unique=>true})
   -> 0.0386s
==  AddAccessTokenCryptedToken: migrated (0.0400s) ============================

==  HashAccessTokens: migrating ===============================================
==  HashAccessTokens: migrated (0.0064s) ======================================

==  AddWorkflowStateToStreamItemInstances: migrating ==========================
-- add_column(:stream_item_instances, :workflow_state, :string)
   -> 0.0384s
==  AddWorkflowStateToStreamItemInstances: migrated (0.0386s) =================

==  RemoveAssignmentReminders: migrating ======================================
-- drop_table(:assignment_reminders)
   -> 0.0015s
-- remove_column(:assignments, :reminders_created_for_due_at)
   -> 0.0005s
-- remove_column(:assignments, :publishing_reminder_sent)
   -> 0.0006s
==  RemoveAssignmentReminders: migrated (0.0028s) =============================

==  AddAssignmentDueDateOverrideNotifications: migrating ======================
==  AddAssignmentDueDateOverrideNotifications: migrated (0.0045s) =============

==  FixRootOutcomeGroupTitles: migrating ======================================
==  FixRootOutcomeGroupTitles: migrated (0.1264s) =============================

==  AddOneQuestionAtATimeToQuiz: migrating ====================================
-- add_column(:quizzes, :one_question_at_a_time, :boolean)
   -> 0.0004s
==  AddOneQuestionAtATimeToQuiz: migrated (0.0005s) ===========================

==  AddCantGoBackToQuiz: migrating ============================================
-- add_column(:quizzes, :cant_go_back, :boolean)
   -> 0.0006s
==  AddCantGoBackToQuiz: migrated (0.0007s) ===================================

==  AddActualAssociationColumnsToStreamItems: migrating =======================
-- add_column(:stream_items, :context_type, :string)
   -> 0.0073s
-- add_column(:stream_items, :context_id, :integer, {:limit=>8})
   -> 0.0081s
-- add_column(:stream_items, :asset_type, :string)
   -> 0.0083s
-- add_column(:stream_items, :asset_id, :integer, {:limit=>8})
   -> 0.0082s
-- add_column(:stream_item_instances, :context_type, :string)
   -> 0.0083s
-- add_column(:stream_item_instances, :context_id, :integer, {:limit=>8})
   -> 0.0082s
-- add_index(:stream_items, [:asset_type, :asset_id], {:unique=>true, :algorithm=>:concurrently})
   -> 0.0750s
-- add_index(:stream_item_instances, [:context_type, :context_id], {:algorithm=>:concurrently})
   -> 0.0666s
==  AddActualAssociationColumnsToStreamItems: migrated (0.1907s) ==============

==  PopulateStreamItemAssociations: migrating =================================
==  PopulateStreamItemAssociations: migrated (0.0160s) ========================

==  AddHttpMethodToPageViews: migrating =======================================
-- add_column(:page_views, :http_method, :string)
   -> 0.0004s
==  AddHttpMethodToPageViews: migrated (0.0006s) ==============================

==  DropStreamItemAssetStringColumns: migrating ===============================
-- remove_columns(:stream_items, :context_code, :item_asset_string)
   -> 0.0007s
-- remove_column(:stream_item_instances, :context_code)
   -> 0.0005s
==  DropStreamItemAssetStringColumns: migrated (0.0014s) ======================

==  CreateRoles: migrating ====================================================
-- add_column(:enrollments, :role_name, :string)
   -> 0.0008s
-- create_table(:roles)
NOTICE:  CREATE TABLE will create implicit sequence "roles_id_seq" for serial column "roles.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "roles_pkey" for table "roles"
   -> 0.0766s
-- add_foreign_key(:roles, :accounts)
   -> 0.0017s
-- add_index(:roles, [:name], {:name=>"index_roles_on_name"})
   -> 0.0402s
-- add_index(:roles, [:account_id], {:name=>"index_roles_on_account_id"})
   -> 0.0588s
==  CreateRoles: migrated (0.1785s) ===========================================

==  DropAccessTokensPlaintextToken: migrating =================================
-- remove_column(:access_tokens, :token)
   -> 0.0005s
==  DropAccessTokensPlaintextToken: migrated (0.0006s) ========================

==  AddRoleRootAccountId: migrating ===========================================
-- add_column(:roles, :root_account_id, :integer, {:limit=>8})
   -> 0.0006s
-- add_index(:roles, [:root_account_id], {:name=>"index_roles_on_root_account_id"})
   -> 0.0364s
==  AddRoleRootAccountId: migrated (0.0373s) ==================================

==  GrandfatherDefaultAccountInvitationPreviews: migrating ====================
==  GrandfatherDefaultAccountInvitationPreviews: migrated (0.5824s) ===========

==  MoveAccountMembershipTypes: migrating =====================================
==  MoveAccountMembershipTypes: migrated (0.1554s) ============================

==  CreateTriggersEnrollmentsInsertAndEnrollmentsUpdate2: migrating ===========
-- drop_trigger("enrollments_after_insert_row_when_new_type_in_studentenrollm_tr", "enrollments", {:generated=>true})
   -> 0.0008s
-- drop_trigger("enrollments_after_update_row_when_new_type_in_studentenrollm_tr", "enrollments", {:generated=>true})
   -> 0.0005s
-- create_trigger("enrollments_after_insert_row_when_new_type_in_studentenrollm_tr", {:generated=>true, :compatibility=>1})
   -> 0.0001s
NOTICE:  trigger "enrollments_after_insert_row_when_new_type_in_studentenrollm_tr" for table "enrollments" does not exist, skipping
NOTICE:  function enrollments_after_insert_row_when_new_type_in_studentenrollm_tr() does not exist, skipping
-- create_trigger("enrollments_after_update_row_when_new_type_in_studentenrollm_tr", {:generated=>true, :compatibility=>1})
   -> 0.0001s
NOTICE:  trigger "enrollments_after_update_row_when_new_type_in_studentenrollm_tr" for table "enrollments" does not exist, skipping
NOTICE:  function enrollments_after_update_row_when_new_type_in_studentenrollm_tr() does not exist, skipping
==  CreateTriggersEnrollmentsInsertAndEnrollmentsUpdate2: migrated (0.0055s) ==

==  AddUniqueIndexOnRoleName: migrating =======================================
-- add_index(:roles, [:account_id, :name], {:unique=>true, :name=>"index_roles_unique_account_name"})
   -> 0.0635s
==  AddUniqueIndexOnRoleName: migrated (0.0720s) ==============================

==  AddLateColumnToSubmissions: migrating =====================================
-- add_column(:submissions, :late, :boolean)
   -> 0.0006s
==  AddLateColumnToSubmissions: migrated (0.0007s) ============================

==  AddAppliesToToRoleOverrides: migrating ====================================
-- add_column(:role_overrides, :applies_to_self, :boolean, {:default=>true, :null=>false})
   -> 0.0014s
-- add_column(:role_overrides, :applies_to_descendants, :boolean, {:default=>true, :null=>false})
   -> 0.0012s
==  AddAppliesToToRoleOverrides: migrated (0.0028s) ===========================

==  AddQuizIdToAssignmentOverrides: migrating =================================
-- add_column(:assignment_overrides, :quiz_id, :integer, {:limit=>8})
   -> 0.0005s
-- add_column(:assignment_overrides, :quiz_version, :integer)
   -> 0.0005s
-- add_index(:assignment_overrides, :quiz_id)
   -> 0.0378s
-- change_column(:assignment_overrides, :assignment_id, :integer, {:limit=>8, :null=>true})
   -> 0.0428s
-- change_column(:assignment_overrides, :assignment_version, :integer, {:null=>true})
   -> 0.0005s
==  AddQuizIdToAssignmentOverrides: migrated (0.0826s) ========================

==  AddQuizIdToAssignmentOverrideStudents: migrating ==========================
-- add_column(:assignment_override_students, :quiz_id, :integer, {:limit=>8})
   -> 0.0006s
-- add_index(:assignment_override_students, :quiz_id)
   -> 0.0387s
-- change_column(:assignment_override_students, :assignment_id, :integer, {:limit=>8, :null=>true})
   -> 0.0018s
==  AddQuizIdToAssignmentOverrideStudents: migrated (0.0413s) =================

==  AddSelfEnrollmentLimit: migrating =========================================
-- add_column(:courses, :self_enrollment_limit, :integer)
   -> 0.0008s
==  AddSelfEnrollmentLimit: migrated (0.0009s) ================================

==  AddGroupIdToCollaborators: migrating ======================================
-- add_column(:collaborators, :group_id, :integer, {:limit=>8})
   -> 0.0004s
-- add_index(:collaborators, [:group_id], {:name=>"index_collaborators_on_group_id"})
   -> 0.0399s
==  AddGroupIdToCollaborators: migrated (0.0405s) =============================

==  AddGistIndexForUserSearch: migrating ======================================
-- execute("create extension if not exists pg_trgm;")
==  AddGistIndexForUserSearch: migrated (0.0014s) =============================

==  AddUserIdToConversationMessageParticipants: migrating =====================
-- add_column(:conversation_message_participants, :user_id, :integer, {:limit=>8})
   -> 0.0051s
-- add_index(:conversation_message_participants, [:user_id, :conversation_message_id], {:name=>"index_conversation_message_participants_on_uid_and_message_id", :unique=>true, :algorithm=>:concurrently})
   -> 0.0833s
==  AddUserIdToConversationMessageParticipants: migrated (0.0886s) ============

==  GrandfatherDefaultAccountSelfRegistration: migrating ======================
==  GrandfatherDefaultAccountSelfRegistration: migrated (0.0001s) =============

==  PopulateConversationMessageParticipantUserIds: migrating ==================
==  PopulateConversationMessageParticipantUserIds: migrated (0.0108s) =========

==  AddRootAccountIdsToConversationParticipant: migrating =====================
-- add_column(:conversation_participants, :root_account_ids, :text)
   -> 0.0005s
==  AddRootAccountIdsToConversationParticipant: migrated (0.0006s) ============

==  PopulateConversationParticipantRootAccountIds: migrating ==================
==  PopulateConversationParticipantRootAccountIds: migrated (0.0046s) =========

==  CreateProgresses: migrating ===============================================
-- create_table(:progresses)
NOTICE:  CREATE TABLE will create implicit sequence "progresses_id_seq" for serial column "progresses.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "progresses_pkey" for table "progresses"
   -> 0.0852s
-- add_index(:progresses, [:context_id, :context_type], {:name=>"index_progresses_on_context_id_and_context_type"})
   -> 0.0420s
-- add_index(:progresses, [:user_id], {:name=>"index_progresses_on_user_id"})
   -> 0.0466s
==  CreateProgresses: migrated (0.1741s) ======================================

==  AddProfiles: migrating ====================================================
-- create_table(:profiles)
NOTICE:  CREATE TABLE will create implicit sequence "profiles_id_seq" for serial column "profiles.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "profiles_pkey" for table "profiles"
   -> 0.0699s
-- add_foreign_key(:profiles, :accounts, {:column=>"root_account_id"})
   -> 0.0018s
-- add_index(:profiles, [:root_account_id, :path], {:unique=>true})
   -> 0.0400s
-- add_index(:profiles, [:context_type, :context_id], {:unique=>true})
   -> 0.0337s
==  AddProfiles: migrated (0.1459s) ===========================================

==  MakeConversationParticipantsIndexUnique: migrating ========================
-- add_index(:conversation_participants, [:conversation_id, :user_id], {:unique=>true, :algorithm=>:concurrently})
   -> 0.0872s
-- remove_index(:conversation_participants, [:conversation_id])
   -> 0.1364s
==  MakeConversationParticipantsIndexUnique: migrated (0.2239s) ===============

==  AddPrivateHashToConversationParticipants: migrating =======================
-- add_column(:conversation_participants, :private_hash, :string)
   -> 0.0050s
-- add_index(:conversation_participants, [:private_hash, :user_id], {:where=>"private_hash IS NOT NULL", :unique=>true, :algorithm=>:concurrently})
   -> 0.0832s
==  AddPrivateHashToConversationParticipants: migrated (0.0884s) ==============

==  PopulateConversationParticipantPrivateHash: migrating =====================
==  PopulateConversationParticipantPrivateHash: migrated (0.0039s) ============

==  RemoveMultipleRootFolders: migrating ======================================
-- add_index(:folders, [:context_id, :context_type], {:unique=>true, :name=>"index_folders_on_context_id_and_context_type_for_root_folders", :algorithm=>:concurrently, :where=>"parent_folder_id IS NULL AND workflow_state<>'deleted'"})
   -> 0.0777s
==  RemoveMultipleRootFolders: migrated (0.0823s) =============================

==  DropAllowStudentAssignmentEditsFromCourses: migrating =====================
-- remove_column(:courses, :allow_student_assignment_edits)
   -> 0.0006s
==  DropAllowStudentAssignmentEditsFromCourses: migrated (0.0008s) ============

==  CleanUpUserAccountAssociations: migrating =================================
-- add_index(:user_account_associations, [:user_id, :account_id], {:unique=>true, :algorithm=>:concurrently})
   -> 0.0632s
-- remove_index(:user_account_associations, :user_id)
   -> 0.0082s
==  CleanUpUserAccountAssociations: migrated (0.0740s) ========================

==  AddIndexOnConversationMessagesAuthorId: migrating =========================
-- add_index(:conversation_messages, :author_id, {:algorithm=>:concurrently})
   -> 0.0726s
==  AddIndexOnConversationMessagesAuthorId: migrated (0.0727s) ================

==  DropContextMessages: migrating ============================================
-- remove_column(:conversation_messages, :context_message_id)
   -> 0.0006s
-- drop_table(:context_messages)
   -> 0.0018s
==  DropContextMessages: migrated (0.0026s) ===================================

==  DropAccountIdFromCourseSections: migrating ================================
-- remove_column(:course_sections, :account_id)
   -> 0.0006s
==  DropAccountIdFromCourseSections: migrated (0.0007s) =======================

==  AddUniqueIndexOnCourseAccountAssociations: migrating ======================
-- add_index(:course_account_associations, [:course_id, :course_section_id, :account_id], {:unique=>true, :algorithm=>:concurrently, :name=>"index_caa_on_course_id_and_section_id_and_account_id"})
   -> 0.0671s
-- remove_index(:course_account_associations, :course_id)
   -> 0.0081s
==  AddUniqueIndexOnCourseAccountAssociations: migrated (0.0822s) =============

==  RecalculateCourseAccountAssociations: migrating ===========================
==  RecalculateCourseAccountAssociations: migrated (0.0049s) ==================

==  AddIgnores: migrating =====================================================
-- create_table(:ignores)
NOTICE:  CREATE TABLE will create implicit sequence "ignores_id_seq" for serial column "ignores.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "ignores_pkey" for table "ignores"
   -> 0.0988s
-- add_index(:ignores, [:asset_id, :asset_type, :user_id, :purpose], {:unique=>true, :name=>"index_ignores_on_asset_and_user_id_and_purpose"})
   -> 0.0432s
-- add_foreign_key(:ignores, :users)
   -> 0.0022s
==  AddIgnores: migrated (0.1445s) ============================================

==  PreMigrateIgnores: migrating ==============================================
==  PreMigrateIgnores: migrated (0.0037s) =====================================

==  PostMigrateIgnores: migrating =============================================
==  PostMigrateIgnores: migrated (0.0012s) ====================================

==  AddManageRubricsPermission: migrating =====================================
==  AddManageRubricsPermission: migrated (0.1364s) ============================

==  DropBodyAndSmsBodyColumns: migrating ======================================
-- remove_column(:notifications, :body)
   -> 0.0004s
-- remove_column(:notifications, :sms_body)
   -> 0.0003s
==  DropBodyAndSmsBodyColumns: migrated (0.0011s) =============================

==  AddMessagesHtmlBody: migrating ============================================
-- add_column(:messages, :html_body, :text)
   -> 0.0004s
==  AddMessagesHtmlBody: migrated (0.0005s) ===================================

==  AddScopesToAccessToken: migrating =========================================
-- add_column(:access_tokens, :scopes, :text)
   -> 0.0006s
-- add_column(:access_tokens, :remember_access, :boolean)
   -> 0.0004s
==  AddScopesToAccessToken: migrated (0.0012s) ================================

==  AddEnrollmentLastActivityAt: migrating ====================================
-- add_column(:enrollments, :last_activity_at, :datetime)
   -> 0.0006s
==  AddEnrollmentLastActivityAt: migrated (0.0007s) ===========================

==  AddIndexToContentTagsLearningOutcomeId: migrating =========================
-- add_index(:content_tags, :learning_outcome_id, {:algorithm=>:concurrently, :where=>"learning_outcome_id IS NOT NULL"})
   -> 0.0824s
==  AddIndexToContentTagsLearningOutcomeId: migrated (0.0827s) ================

==  AddLtiAccountGuid: migrating ==============================================
-- add_column(:accounts, :lti_guid, :string)
   -> 0.0006s
==  AddLtiAccountGuid: migrated (0.0007s) =====================================

==  GenerateOldAccountOpaqueIDs: migrating ====================================
==  GenerateOldAccountOpaqueIDs: migrated (0.1595s) ===========================

==  FixMediaRecordingSubmissionTypes: migrating ===============================
==  FixMediaRecordingSubmissionTypes: migrated (0.0292s) ======================

==  AddMessageAccountId: migrating ============================================
-- add_column(:messages, :root_account_id, :integer, {:limit=>8})
   -> 0.0072s
-- add_column(:delayed_messages, :root_account_id, :integer, {:limit=>8})
   -> 0.0082s
-- add_index(:messages, :root_account_id, {:algorithm=>:concurrently})
   -> 0.0750s
-- add_index(:delayed_messages, [:communication_channel_id, :root_account_id, :workflow_state, :send_at], {:algorithm=>:concurrently, :name=>"ccid_raid_ws_sa"})
   -> 0.0749s
-- remove_index(:delayed_messages, {:name=>"ccid_ws_sa"})
   -> 0.0082s
==  AddMessageAccountId: migrated (0.1741s) ===================================

==  CreateMigrationIssues: migrating ==========================================
-- create_table(:migration_issues)
NOTICE:  CREATE TABLE will create implicit sequence "migration_issues_id_seq" for serial column "migration_issues.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "migration_issues_pkey" for table "migration_issues"
   -> 0.1027s
-- add_index(:migration_issues, :content_migration_id)
   -> 0.0419s
==  CreateMigrationIssues: migrated (0.1448s) =================================

==  DropCustomFieldTables: migrating ==========================================
-- table_exists?("custom_fields")
   -> 0.0015s
-- drop_table("custom_fields")
   -> 0.0014s
-- table_exists?("custom_field_values")
   -> 0.0013s
-- drop_table("custom_field_values")
   -> 0.0013s
==  DropCustomFieldTables: migrated (0.0058s) =================================

==  AddSubmissionCachedDueDate: migrating =====================================
-- add_column(:submissions, :cached_due_date, :datetime)
   -> 0.0015s
==  AddSubmissionCachedDueDate: migrated (0.0016s) ============================

==  AddTypeToContentMigration: migrating ======================================
-- add_column(:content_migrations, :migration_type, :string)
   -> 0.0006s
==  AddTypeToContentMigration: migrated (0.0007s) =============================

==  CreateQuizStatisticsTable: migrating ======================================
-- create_table(:quiz_statistics)
NOTICE:  CREATE TABLE will create implicit sequence "quiz_statistics_id_seq" for serial column "quiz_statistics.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "quiz_statistics_pkey" for table "quiz_statistics"
   -> 0.0475s
-- add_index(:quiz_statistics, :quiz_id)
   -> 0.0597s
==  CreateQuizStatisticsTable: migrated (0.1074s) =============================

==  AddManageStorageQuotasPermission: migrating ===============================
==  AddManageStorageQuotasPermission: migrated (0.0010s) ======================

==  AddIndexOnAppointmentGroupSubContextsAppointmentGroupId: migrating ========
-- add_index(:appointment_group_sub_contexts, :appointment_group_id, {:algorithm=>:concurrently})
   -> 0.0659s
==  AddIndexOnAppointmentGroupSubContextsAppointmentGroupId: migrated (0.0660s) 

==  AddIndexOnAppointmentGroupContextsAppointmentGroupId: migrating ===========
-- add_index(:appointment_group_contexts, :appointment_group_id, {:algorithm=>:concurrently})
   -> 0.0635s
==  AddIndexOnAppointmentGroupContextsAppointmentGroupId: migrated (0.0636s) ==

==  FixBrokenFileLinksInAssignments: migrating ================================
==  FixBrokenFileLinksInAssignments: migrated (0.0040s) =======================

==  AddTableSubmissionVersions: migrating =====================================
-- create_table(:submission_versions)
NOTICE:  CREATE TABLE will create implicit sequence "submission_versions_id_seq" for serial column "submission_versions.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "submission_versions_pkey" for table "submission_versions"
   -> 0.0654s
-- add_index(:submission_versions, [:context_id, :version_id, :user_id, :assignment_id], {:name=>"index_submission_versions", :where=>{:context_type=>"Course"}, :unique=>true})
   -> 0.0340s
==  AddTableSubmissionVersions: migrated (0.0997s) ============================

==  DropCalendarEventsExternalFeedId: migrating ===============================
-- remove_column(:calendar_events, :external_feed_id)
   -> 0.0006s
==  DropCalendarEventsExternalFeedId: migrated (0.0007s) ======================

==  AddValidationTokenToQuizSubmissions: migrating ============================
-- add_column(:quiz_submissions, :validation_token, :string)
   -> 0.0004s
==  AddValidationTokenToQuizSubmissions: migrated (0.0004s) ===================

==  FixDissociatedDiscussionTopics: migrating =================================
==  FixDissociatedDiscussionTopics: migrated (0.1270s) ========================

==  AddReportTypeToQuizStatistics: migrating ==================================
-- add_column(:quiz_statistics, :report_type, :string)
   -> 0.0004s
-- add_index(:quiz_statistics, [:quiz_id, :report_type])
   -> 0.0333s
-- remove_index(:quiz_statistics, {:column=>:quiz_id})
   -> 0.0013s
==  AddReportTypeToQuizStatistics: migrated (0.0353s) =========================

==  AddIndicesToLearningOutcomeGroups: migrating ==============================
-- add_index(:learning_outcome_groups, [:context_id, :context_type], {:algorithm=>:concurrently, :where=>{:learning_outcome_group_id=>nil}})
   -> 0.0652s
-- add_index(:learning_outcome_groups, :learning_outcome_group_id, {:algorithm=>:concurrently, :where=>"learning_outcome_group_id IS NOT NULL"})
   -> 0.0915s
==  AddIndicesToLearningOutcomeGroups: migrated (0.1570s) =====================

==  AddTableEventStreamFailures: migrating ====================================
-- create_table(:event_stream_failures)
NOTICE:  CREATE TABLE will create implicit sequence "event_stream_failures_id_seq" for serial column "event_stream_failures.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "event_stream_failures_pkey" for table "event_stream_failures"
   -> 0.0771s
==  AddTableEventStreamFailures: migrated (0.0772s) ===========================

==  ChangeMigrationIssueStringsToText: migrating ==============================
-- change_column(:migration_issues, :description, :text)
   -> 0.0005s
-- change_column(:migration_issues, :error_message, :text)
   -> 0.0003s
==  ChangeMigrationIssueStringsToText: migrated (0.0011s) =====================

==  AddLastLoggedOutToUsers: migrating ========================================
-- add_column(:users, :last_logged_out, :timestamp)
   -> 0.0005s
==  AddLastLoggedOutToUsers: migrated (0.0006s) ===============================

==  DropUnusedIndices: migrating ==============================================
-- remove_index(:abstract_courses, :workflow_state)
   -> 0.0021s
-- remove_index(:abstract_courses, :enrollment_term_id)
   -> 0.0022s
-- remove_index(:abstract_courses, :account_id)
   -> 0.0019s
-- remove_index(:appointment_group_sub_contexts, :id)
   -> 0.0017s
-- remove_index(:appointment_groups, :context_code)
   -> 0.0017s
-- remove_index(:assignment_groups, :cloned_item_id)
   -> 0.0017s
-- remove_index(:assignments, :cloned_item_id)
   -> 0.0026s
-- remove_index(:calendar_events, :cloned_item_id)
   -> 0.0026s
-- remove_index(:cloned_items, {:name=>"cloned_items_original_item_id_and_type"})
   -> 0.0015s
-- remove_index(:content_exports, :user_id)
   -> 0.0016s
-- remove_index(:content_tags, :workflow_state)
   -> 0.0026s
-- remove_index(:course_sections, :enrollment_term_id)
   -> 0.0022s
-- remove_index(:courses, :abstract_course_id)
   -> 0.0030s
-- remove_index(:delayed_notifications, [:workflow_state, :created_at])
   -> 0.0016s
-- remove_index(:discussion_entries, :attachment_id)
   -> 0.0024s
-- remove_index(:discussion_topics, :cloned_item_id)
   -> 0.0034s
-- remove_index(:discussion_topics, :attachment_id)
   -> 0.0032s
-- remove_index(:discussion_topics, :context_code)
   -> 0.0031s
-- remove_index(:external_feed_entries, :user_id)
   -> 0.0019s
-- remove_index(:external_feeds, :user_id)
   -> 0.0017s
-- remove_index(:grading_standards, :user_id)
   -> 0.0019s
-- remove_index(:groups, :workflow_state)
   -> 0.0021s
-- remove_index(:oauth_requests, :user_id)
   -> 0.0014s
-- remove_index(:quizzes, :cloned_item_id)
   -> 0.0019s
-- remove_index(:rubrics, :context_code)
   -> 0.0022s
-- remove_index(:rubrics, :rubric_id)
   -> 0.0021s
-- remove_index(:scribd_mime_types, :extension)
   -> 0.0014s
-- remove_index(:submission_comments, :assessment_request_id)
   -> 0.0022s
-- remove_index(:thumbnails, [:id, :uuid])
   -> 0.0019s
-- remove_index(:wiki_page_comments, [:wiki_page_id, :workflow_state])
   -> 0.0014s
-- remove_index(:wiki_pages, :cloned_item_id)
   -> 0.0019s
==  DropUnusedIndices: migrated (0.0682s) =====================================

==  AddSomeIndices: migrating =================================================
-- add_index(:conversation_message_participants, :conversation_message_id, {:name=>"index_conversation_message_participants_on_message_id", :algorithm=>:concurrently})
   -> 0.0804s
-- add_index(:pseudonyms, :sis_communication_channel_id, {:algorithm=>:concurrently})
   -> 0.0750s
==  AddSomeIndices: migrated (0.1556s) ========================================

==  AddGroupLimitToGroupCategory: migrating ===================================
-- add_column(:group_categories, :group_limit, :integer)
   -> 0.0007s
==  AddGroupLimitToGroupCategory: migrated (0.0008s) ==========================

==  AddLockAtToDiscussionTopics: migrating ====================================
-- add_column(:discussion_topics, :lock_at, :datetime)
   -> 0.0005s
==  AddLockAtToDiscussionTopics: migrated (0.0007s) ===========================

==  AddForcedReadStateToDiscussionEntryParticipants: migrating ================
-- add_column(:discussion_entry_participants, :forced_read_state, :boolean)
   -> 0.0072s
==  AddForcedReadStateToDiscussionEntryParticipants: migrated (0.0073s) =======

==  AddQuizStatisticsForeignKey: migrating ====================================
-- add_foreign_key(:quiz_statistics, :quizzes)
   -> 0.0022s
==  AddQuizStatisticsForeignKey: migrated (0.0023s) ===========================

==  LengthenSubmissionAttachmentIds: migrating ================================
-- change_column(:submissions, :attachment_ids, :text)
   -> 0.0007s
==  LengthenSubmissionAttachmentIds: migrated (0.0007s) =======================

==  ChangeLearningOutcomeGroupIndex: migrating ================================
-- remove_index(:learning_outcome_groups, [:context_id, :context_type])
   -> 0.0158s
-- add_index(:learning_outcome_groups, [:context_id, :context_type], {:algorithm=>:concurrently})
   -> 0.0999s
==  ChangeLearningOutcomeGroupIndex: migrated (0.1159s) =======================

==  AddFrontPageAttributesToWikis: migrating ==================================
-- add_column(:wikis, :front_page_url, :text)
   -> 0.0382s
-- add_column(:wikis, :has_no_front_page, :boolean)
   -> 0.0004s
==  AddFrontPageAttributesToWikis: migrated (0.0388s) =========================

==  FixHiddenWikiFrontPages: migrating ========================================
==  FixHiddenWikiFrontPages: migrated (0.0011s) ===============================

==  AddDiscussionTopicMaterializedViewPk: migrating ===========================
-- execute("ALTER TABLE discussion_topic_materialized_views ALTER discussion_topic_id SET NOT NULL")
   -> 0.0082s
-- execute("ALTER TABLE discussion_topic_materialized_views ADD CONSTRAINT discussion_topic_materialized_views_pkey PRIMARY KEY USING INDEX index_discussion_topic_materialized_views")
NOTICE:  ALTER TABLE / ADD CONSTRAINT USING INDEX will rename index "index_discussion_topic_materialized_views" to "discussion_topic_materialized_views_pkey"
   -> 0.0082s
==  AddDiscussionTopicMaterializedViewPk: migrated (0.0239s) ==================

==  AddSmsSettingsTable: migrating ============================================
-- create_table("sms_settings", {:force=>true})
NOTICE:  CREATE TABLE will create implicit sequence "sms_settings_id_seq" for serial column "sms_settings.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "sms_settings_pkey" for table "sms_settings"
   -> 0.0810s
==  AddSmsSettingsTable: migrated (0.0811s) ===================================

==  DropOldAssignmentPublishingFields: migrating ==============================
-- remove_column(:courses, :publish_grades_immediately)
   -> 0.0006s
-- remove_column(:assignments, :previously_published)
   -> 0.0005s
-- remove_column(:submissions, :changed_since_publish)
   -> 0.0005s
==  DropOldAssignmentPublishingFields: migrated (0.0017s) =====================

==  DropRedundantSubmissionsIndex: migrating ==================================
-- remove_index(:submissions, [:user_id])
   -> 0.0031s
==  DropRedundantSubmissionsIndex: migrated (0.0032s) =========================

==  AddUniqueIndexToSettings: migrating =======================================
-- add_index(:settings, :name, {:unique=>true})
   -> 0.0417s
==  AddUniqueIndexToSettings: migrated (0.0418s) ==============================

==  AddSchemaMigrationsPrimaryKey: migrating ==================================
-- execute("ALTER TABLE schema_migrations ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY USING INDEX unique_schema_migrations")
NOTICE:  ALTER TABLE / ADD CONSTRAINT USING INDEX will rename index "unique_schema_migrations" to "schema_migrations_pkey"
   -> 0.0007s
==  AddSchemaMigrationsPrimaryKey: migrated (0.0008s) =========================

==  AddLastInlineViewToAttachments: migrating =================================
-- add_column(:attachments, :last_inline_view, :datetime)
   -> 0.0006s
==  AddLastInlineViewToAttachments: migrated (0.0007s) ========================

==  UnifyActiveAssignmentWorkflowStates: migrating ============================
==  UnifyActiveAssignmentWorkflowStates: migrated (0.0032s) ===================

==  AddNumberToVersionsIndex: migrating =======================================
-- add_index(:versions, [:versionable_id, :versionable_type, :number], {:unique=>true, :algorithm=>:concurrently, :name=>"index_versions_on_versionable_object_and_number"})
   -> 0.0917s
-- remove_index(:versions, [:versionable_id, :versionable_type])
   -> 0.0082s
==  AddNumberToVersionsIndex: migrated (0.2714s) ==============================

==  AddLastReplyAtIndexToDiscussionTopics: migrating ==========================
-- add_index(:discussion_topics, [:context_id, :last_reply_at], {:algorithm=>:concurrently, :name=>"index_discussion_topics_on_context_and_last_reply_at"})
   -> 0.0880s
==  AddLastReplyAtIndexToDiscussionTopics: migrated (0.0881s) =================

==  InitializeSubmissionCachedDueDate: migrating ==============================
==  InitializeSubmissionCachedDueDate: migrated (0.0027s) =====================

==  DropSubmissionLateColumn: migrating =======================================
-- remove_column(:submissions, :late)
   -> 0.0005s
==  DropSubmissionLateColumn: migrated (0.0006s) ==============================

==  AddPinnedFlagToDiscussionTopics: migrating ================================
-- add_column("discussion_topics", "pinned", :boolean)
   -> 0.0011s
==  AddPinnedFlagToDiscussionTopics: migrated (0.0013s) =======================

==  AddGroupCategoryIndexToGroups: migrating ==================================
-- add_index(:groups, :group_category_id, {:algorithm=>:concurrently})
   -> 0.0907s
==  AddGroupCategoryIndexToGroups: migrated (0.0908s) =========================

==  AddUpdatedAtIndexToStreamItems: migrating =================================
-- add_index(:stream_items, :updated_at, {:algorithm=>:concurrently})
   -> 0.0798s
==  AddUpdatedAtIndexToStreamItems: migrated (0.0799s) ========================

==  AddDefaultGroupStorageQuota: migrating ====================================
-- add_column(:accounts, :default_group_storage_quota, :bigint)
   -> 0.0005s
==  AddDefaultGroupStorageQuota: migrated (0.0006s) ===========================

==  ChangeEventStreamFailuresExceptionToText: migrating =======================
-- change_column(:event_stream_failures, :exception, :text)
   -> 0.0005s
==  ChangeEventStreamFailuresExceptionToText: migrated (0.0006s) ==============

==  AddForeignKeys1: migrating ================================================
-- add_foreign_key_if_not_exists(:abstract_courses, :accounts, {:delay_validation=>true})
   -> 0.0154s
-- add_foreign_key_if_not_exists(:abstract_courses, :enrollment_terms, {:delay_validation=>true})
   -> 0.1500s
-- add_foreign_key_if_not_exists(:abstract_courses, :accounts, {:column=>:root_account_id, :delay_validation=>true})
   -> 0.0167s
-- add_foreign_key_if_not_exists(:access_tokens, :users, {:delay_validation=>true})
   -> 0.0249s
-- add_foreign_key_if_not_exists(:account_authorization_configs, :accounts, {:delay_validation=>true})
   -> 0.0167s
-- add_foreign_key_if_not_exists(:account_notifications, :accounts, {:delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:account_reports, :accounts, {:delay_validation=>true})
   -> 0.0167s
-- add_foreign_key_if_not_exists(:account_reports, :attachments, {:delay_validation=>true})
   -> 0.0333s
-- add_foreign_key_if_not_exists(:account_users, :accounts, {:delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:accounts, :accounts, {:column=>:parent_account_id, :delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:accounts, :accounts, {:column=>:root_account_id, :delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:alert_criteria, :alerts, {:delay_validation=>true})
   -> 0.0167s
==  AddForeignKeys1: migrated (0.3577s) =======================================

==  AddForeignKeys2: migrating ================================================
-- add_foreign_key_if_not_exists(:assessment_requests, :rubric_associations, {:delay_validation=>true})
   -> 0.0211s
-- add_foreign_key_if_not_exists(:assignment_groups, :cloned_items, {:delay_validation=>true})
   -> 0.0333s
-- add_foreign_key_if_not_exists(:assignments, :cloned_items, {:delay_validation=>true})
   -> 0.0249s
-- add_foreign_key_if_not_exists(:calendar_events, :cloned_items, {:delay_validation=>true})
   -> 0.0250s
-- add_foreign_key_if_not_exists(:calendar_events, :calendar_events, {:column=>:parent_calendar_event_id, :delay_validation=>true})
   -> 0.0250s
-- add_foreign_key_if_not_exists(:collaborations, :users, {:delay_validation=>true})
   -> 0.0250s
-- add_foreign_key_if_not_exists(:collaborators, :collaborations, {:delay_validation=>true})
   -> 0.0249s
-- add_foreign_key_if_not_exists(:communication_channels, :users, {:delay_validation=>true})
   -> 0.0167s
-- add_foreign_key_if_not_exists(:content_exports, :content_migrations, {:delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:content_exports, :courses, {:delay_validation=>true})
   -> 0.0167s
-- add_foreign_key_if_not_exists(:content_migrations, :courses, {:column=>:source_course_id, :delay_validation=>true})
   -> 0.0167s
==  AddForeignKeys2: migrated (0.2468s) =======================================

==  AddForeignKeys3: migrating ================================================
-- add_foreign_key_if_not_exists(:content_tags, :cloned_items, {:delay_validation=>true})
   -> 0.0214s
-- add_foreign_key_if_not_exists(:content_tags, :context_modules, {:delay_validation=>true})
   -> 0.0248s
-- add_foreign_key_if_not_exists(:context_external_tools, :cloned_items, {:delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:context_modules, :cloned_items, {:delay_validation=>true})
   -> 0.0165s
-- add_foreign_key_if_not_exists(:course_imports, :courses, {:delay_validation=>true})
   -> 0.0249s
-- add_foreign_key_if_not_exists(:course_imports, :courses, {:column=>:source_id, :delay_validation=>true})
   -> 0.0167s
-- add_foreign_key_if_not_exists(:course_sections, :enrollment_terms, {:delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:course_sections, :courses, {:column=>:nonxlist_course_id, :delay_validation=>true})
   -> 0.0248s
-- add_foreign_key_if_not_exists(:course_sections, :accounts, {:column=>:root_account_id, :delay_validation=>true})
   -> 0.0342s
-- add_foreign_key_if_not_exists(:courses, :accounts, {:delay_validation=>true})
   -> 0.0157s
-- add_foreign_key_if_not_exists(:courses, :enrollment_terms, {:delay_validation=>true})
   -> 0.0167s
-- add_foreign_key_if_not_exists(:courses, :accounts, {:column=>:root_account_id, :delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:courses, :courses, {:column=>:template_course_id, :delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:courses, :wikis, {:delay_validation=>true})
   -> 0.0166s
==  AddForeignKeys3: migrated (0.2803s) =======================================

==  AddSubscribedToDiscussionTopicParticipants: migrating =====================
-- add_column(:discussion_topic_participants, :subscribed, :boolean)
   -> 0.0005s
==  AddSubscribedToDiscussionTopicParticipants: migrated (0.0006s) ============

==  AddSurveyFunctionalityToAccountNotifications: migrating ===================
-- add_column(:account_notifications, :required_account_service, :string)
   -> 0.0005s
-- add_column(:account_notifications, :months_in_display_cycle, :int)
   -> 0.0003s
-- add_index(:account_notifications, [:account_id, :end_at, :start_at], {:name=>"index_account_notifications_by_account_and_timespan"})
   -> 0.0445s
-- remove_index(:account_notifications, [:account_id, :start_at])
   -> 0.0018s
==  AddSurveyFunctionalityToAccountNotifications: migrated (0.0475s) ==========

==  AddForeignKeys4: migrating ================================================
-- add_foreign_key_if_not_exists(:discussion_topic_participants, :discussion_topics, {:delay_validation=>true})
   -> 0.0321s
-- add_foreign_key_if_not_exists(:discussion_topics, :assignments, {:delay_validation=>true})
   -> 0.0167s
-- add_foreign_key_if_not_exists(:discussion_topics, :attachments, {:delay_validation=>true})
   -> 0.0155s
-- add_foreign_key_if_not_exists(:discussion_topics, :cloned_items, {:delay_validation=>true})
   -> 0.0250s
-- add_foreign_key_if_not_exists(:discussion_topics, :assignments, {:column=>:old_assignment_id, :delay_validation=>true})
   -> 0.0167s
-- add_foreign_key_if_not_exists(:discussion_topics, :discussion_topics, {:column=>:root_topic_id, :delay_validation=>true})
   -> 0.0249s
-- add_foreign_key_if_not_exists(:enrollment_dates_overrides, :enrollment_terms, {:delay_validation=>true})
   -> 0.0250s
-- add_foreign_key_if_not_exists(:enrollment_terms, :accounts, {:column=>:root_account_id, :delay_validation=>true})
   -> 0.0250s
-- add_foreign_key_if_not_exists(:enrollments, :courses, {:delay_validation=>true})
   -> 0.0333s
-- add_foreign_key_if_not_exists(:enrollments, :accounts, {:column=>:root_account_id, :delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:eportfolio_categories, :eportfolios, {:delay_validation=>true})
   -> 0.0250s
-- add_foreign_key_if_not_exists(:eportfolio_entries, :eportfolio_categories, {:delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:eportfolio_entries, :eportfolios, {:delay_validation=>true})
   -> 0.0167s
-- add_foreign_key_if_not_exists(:eportfolios, :users, {:delay_validation=>true})
   -> 0.0166s
==  AddForeignKeys4: migrated (0.3079s) =======================================

==  FixImportedWikiPageWorkflow: migrating ====================================
==  FixImportedWikiPageWorkflow: migrated (0.0249s) ===========================

==  AddForeignKeys5: migrating ================================================
-- add_foreign_key_if_not_exists(:favorites, :users, {:delay_validation=>true})
   -> 0.0153s
-- add_foreign_key_if_not_exists(:folders, :cloned_items, {:delay_validation=>true})
   -> 0.0249s
-- add_foreign_key_if_not_exists(:folders, :folders, {:column=>:parent_folder_id, :delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:group_memberships, :groups, {:delay_validation=>true})
   -> 0.0167s
-- add_foreign_key_if_not_exists(:groups, :accounts, {:delay_validation=>true})
   -> 0.0167s
-- add_foreign_key_if_not_exists(:groups, :group_categories, {:delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:groups, :accounts, {:column=>:root_account_id, :delay_validation=>true})
   -> 0.0183s
-- add_foreign_key_if_not_exists(:groups, :wikis, {:delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:learning_outcome_groups, :learning_outcome_groups, {:delay_validation=>true})
   -> 0.0249s
-- add_foreign_key_if_not_exists(:learning_outcome_groups, :learning_outcome_groups, {:column=>:root_learning_outcome_group_id, :delay_validation=>true})
   -> 0.0167s
-- add_foreign_key_if_not_exists(:learning_outcome_results, :content_tags, {:delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:learning_outcome_results, :learning_outcomes, {:delay_validation=>true})
   -> 0.0250s
-- add_foreign_key_if_not_exists(:media_objects, :accounts, {:column=>:root_account_id, :delay_validation=>true})
   -> 0.0250s
-- add_foreign_key_if_not_exists(:oauth_requests, :users, {:delay_validation=>true})
   -> 0.0252s
==  AddForeignKeys5: migrated (0.2762s) =======================================

==  AddForeignKeys6: migrating ================================================
-- add_foreign_key_if_not_exists(:quizzes, :cloned_items, {:delay_validation=>true})
   -> 0.0131s
-- add_foreign_key_if_not_exists(:report_snapshots, :accounts, {:delay_validation=>true})
   -> 0.0248s
-- add_foreign_key_if_not_exists(:role_overrides, :accounts, {:column=>:context_id, :delay_validation=>true})
   -> 0.0167s
-- add_foreign_key_if_not_exists(:rubric_assessments, :rubric_associations, {:delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:rubric_assessments, :rubrics, {:delay_validation=>true})
   -> 0.0250s
-- add_foreign_key_if_not_exists(:rubric_associations, :rubrics, {:delay_validation=>true})
   -> 0.0165s
-- add_foreign_key_if_not_exists(:rubrics, :rubrics, {:delay_validation=>true})
   -> 0.0333s
-- add_foreign_key_if_not_exists(:session_persistence_tokens, :pseudonyms, {:delay_validation=>true})
   -> 0.0249s
-- add_foreign_key_if_not_exists(:sis_batches, :enrollment_terms, {:column=>:batch_mode_term_id, :delay_validation=>true})
   -> 0.0249s
-- add_foreign_key_if_not_exists(:submissions, :groups, {:delay_validation=>true})
   -> 0.0250s
-- add_foreign_key_if_not_exists(:submissions, :media_objects, {:delay_validation=>true})
   -> 0.0155s
==  AddForeignKeys6: migrated (0.2552s) =======================================

==  AddScoreBeforeRegradeToQuizSubmission: migrating ==========================
-- add_column(:quiz_submissions, :score_before_regrade, :float)
   -> 0.1274s
==  AddScoreBeforeRegradeToQuizSubmission: migrated (0.1275s) =================

==  CreateFeatureWishes: migrating ============================================
-- create_table(:feature_wishes)
   -> 0.0853s
==  CreateFeatureWishes: migrated (0.0854s) ===================================

==  AddCacheKeyToProgresses: migrating ========================================
-- add_column(:progresses, :cache_key_context, :string)
   -> 0.0004s
==  AddCacheKeyToProgresses: migrated (0.0005s) ===============================

==  CreateDemos: migrating ====================================================
-- create_table(:demos)
   -> 0.0776s
==  CreateDemos: migrated (0.0777s) ===========================================

==  AddIndexOnSectionsRootAccountId: migrating ================================
-- add_index(:course_sections, :root_account_id, {:algorithm=>:concurrently})
   -> 0.0737s
==  AddIndexOnSectionsRootAccountId: migrated (0.0739s) =======================

==  MakeSisIdsUnique: migrating ===============================================
-- add_index(:accounts, [:sis_source_id, :root_account_id], {:where=>"sis_source_id IS NOT NULL", :unique=>true, :algorithm=>:concurrently})
   -> 0.0795s
-- add_index(:accounts, :root_account_id, {:algorithm=>:concurrently})
   -> 0.0748s
-- add_index(:courses, [:sis_source_id, :root_account_id], {:where=>"sis_source_id IS NOT NULL", :unique=>true, :algorithm=>:concurrently})
   -> 0.0749s
-- add_index(:course_sections, [:sis_source_id, :root_account_id], {:where=>"sis_source_id IS NOT NULL", :unique=>true, :algorithm=>:concurrently})
   -> 0.0750s
-- add_index(:enrollment_terms, [:sis_source_id, :root_account_id], {:where=>"sis_source_id IS NOT NULL", :unique=>true, :algorithm=>:concurrently})
   -> 0.0750s
-- add_index(:enrollment_terms, :root_account_id, {:algorithm=>:concurrently})
   -> 0.0915s
-- execute("CREATE UNIQUE INDEX CONCURRENTLY index_pseudonyms_on_unique_id_and_account_id ON pseudonyms (LOWER(unique_id), account_id) WHERE workflow_state='active'")
   -> 0.0748s
-- remove_index(:pseudonyms, :unique_id)
   -> 0.0083s
-- add_index(:pseudonyms, [:sis_user_id, :account_id], {:where=>"sis_user_id IS NOT NULL", :unique=>true, :algorithm=>:concurrently})
   -> 0.0833s
-- add_index(:pseudonyms, :account_id, {:algorithm=>:concurrently})
   -> 0.0666s
-- add_index(:groups, [:sis_source_id, :root_account_id], {:where=>"sis_source_id IS NOT NULL", :unique=>true, :algorithm=>:concurrently})
   -> 0.0666s
-- remove_index(:accounts, :sis_source_id)
   -> 0.0083s
-- remove_index(:accounts, [:root_account_id, :sis_source_id])
   -> 0.0083s
-- remove_index(:courses, :sis_source_id)
   -> 0.0082s
-- remove_index(:course_sections, [:root_account_id, :sis_source_id])
   -> 0.0168s
-- remove_index(:enrollment_terms, :sis_source_id)
   -> 0.0082s
-- remove_index(:enrollment_terms, [:root_account_id, :sis_source_id])
   -> 0.0083s
-- remove_index(:pseudonyms, :sis_user_id)
   -> 0.0083s
==  MakeSisIdsUnique: migrated (0.8381s) ======================================

==  CreateQuizRegrades: migrating =============================================
-- create_table(:quiz_regrades)
   -> 0.0407s
-- add_index(:quiz_regrades, [:quiz_id, :quiz_version], {:unique=>true})
   -> 0.0418s
==  CreateQuizRegrades: migrated (0.0827s) ====================================

==  CreateQuizQuestionRegrades: migrating =====================================
-- create_table(:quiz_question_regrades)
   -> 0.0436s
-- add_index(:quiz_question_regrades, [:quiz_regrade_id, :quiz_question_id], {:unique=>true, :name=>"index_qqr_on_qr_id_and_qq_id"})
   -> 0.0463s
==  CreateQuizQuestionRegrades: migrated (0.0901s) ============================

==  AddLockedFlagToDiscussionTopics: migrating ================================
-- add_column("discussion_topics", "locked", :boolean)
   -> 0.0004s
==  AddLockedFlagToDiscussionTopics: migrated (0.0004s) =======================

==  AddTurnitinHostToAccounts: migrating ======================================
-- add_column(:accounts, :turnitin_host, :string)
   -> 0.0005s
==  AddTurnitinHostToAccounts: migrated (0.0005s) =============================

==  OptimizeScribdRecyclableIndex: migrating ==================================
-- remove_index(:attachments, {:name=>"scribd_attempts_smt_workflow_state"})
   -> 0.0160s
-- add_index(:attachments, :scribd_attempts, {:algorithm=>:concurrently, :where=>"workflow_state='errored' AND scribd_mime_type_id IS NOT NULL", :name=>"scribd_attempts_smt_workflow_state"})
   -> 0.0746s
==  OptimizeScribdRecyclableIndex: migrated (0.0910s) =========================

==  ResanitizeAssignmentsAllowedExtensions: migrating =========================
==  ResanitizeAssignmentsAllowedExtensions: migrated (0.0224s) ================

==  CreateDemoSettings: migrating =============================================
-- create_table(:demo_settings)
   -> 0.0655s
==  CreateDemoSettings: migrated (0.0656s) ====================================

==  AddCourseColumnToFeatureWish: migrating ===================================
-- add_column(:feature_wishes, :course, :text)
   -> 0.0004s
==  AddCourseColumnToFeatureWish: migrated (0.0005s) ==========================

==  ChangeDemoSettingsTableName: migrating ====================================
-- rename_table(:demo_settings, :demo_account_settings)
   -> 0.0005s
==  ChangeDemoSettingsTableName: migrated (0.0006s) ===========================

==  CreateDemoMessages: migrating =============================================
-- create_table(:demo_messages)
   -> 0.0798s
==  CreateDemoMessages: migrated (0.0800s) ====================================

==  CreateDemoConfigs: migrating ==============================================
-- create_table(:demo_configs)
   -> 0.0651s
==  CreateDemoConfigs: migrated (0.0652s) =====================================

==  AddSubdomainToDemo: migrating =============================================
-- add_column(:demos, :subdomain, :string)
   -> 0.0006s
==  AddSubdomainToDemo: migrated (0.0007s) ====================================

==  ChangeDemoToScbscription: migrating =======================================
-- rename_table(:demos, :subscriptions)
   -> 0.0005s
-- rename_table(:demo_account_settings, :subscription_account_settings)
   -> 0.0004s
-- rename_table(:demo_messages, :subscription_messages)
   -> 0.0004s
-- rename_table(:demo_configs, :subscription_configs)
   -> 0.0004s
==  ChangeDemoToScbscription: migrated (0.0021s) ==============================

==  AddAccountIdToSubscription: migrating =====================================
-- remove_column(:subscription_account_settings, :account_id)
   -> 0.0005s
-- add_column(:subscriptions, :account_id, :integer, {:limit=>8})
   -> 0.0005s
-- add_column(:subscription_account_settings, :subscription_id, :integer, {:limit=>8})
   -> 0.0003s
==  AddAccountIdToSubscription: migrated (0.0015s) ============================

==  SubscriptionIdAdd: migrating ==============================================
-- remove_column(:subscription_messages, :organization)
   -> 0.0005s
-- add_column(:subscription_messages, :subscription_id, :integer, {:limit=>8})
   -> 0.0003s
==  SubscriptionIdAdd: migrated (0.0010s) =====================================

==  AddWasPreviewToQuizSubmission: migrating ==================================
-- add_column("quiz_submissions", "was_preview", :boolean)
   -> 0.0005s
==  AddWasPreviewToQuizSubmission: migrated (0.0006s) =========================

==  LoadSubmissionNeedsGradingNotification: migrating =========================
==  LoadSubmissionNeedsGradingNotification: migrated (0.0385s) ================

==  CreateQuizRegradeRuns: migrating ==========================================
-- create_table(:quiz_regrade_runs)
   -> 0.0406s
==  CreateQuizRegradeRuns: migrated (0.0408s) =================================

==  LoadQuizRegradeFinishedNotification: migrating ============================
==  LoadQuizRegradeFinishedNotification: migrated (0.1302s) ===================

==  FilterPageViewUrlParams: migrating ========================================
==  FilterPageViewUrlParams: migrated (0.0150s) ===============================

==  AddSubjectToConversations: migrating ======================================
-- add_column(:conversations, :subject, :string)
   -> 0.0004s
==  AddSubjectToConversations: migrated (0.0004s) =============================

==  AddWorkflowStateToConversationMessageParticipants: migrating ==============
-- add_column(:conversation_message_participants, :workflow_state, :string)
   -> 0.0005s
==  AddWorkflowStateToConversationMessageParticipants: migrated (0.0006s) =====

==  AddContextToConversationsAndConversationBatches: migrating ================
-- add_column(:conversations, :context_type, :string)
   -> 0.0005s
-- add_column(:conversations, :context_id, :integer, {:limit=>8})
   -> 0.0004s
-- add_column(:conversation_batches, :context_type, :string)
   -> 0.0005s
-- add_column(:conversation_batches, :context_id, :integer, {:limit=>8})
   -> 0.0004s
==  AddContextToConversationsAndConversationBatches: migrated (0.0021s) =======

==  AddSubjectToConversationBatch: migrating ==================================
-- add_column(:conversation_batches, :subject, :string)
   -> 0.0006s
==  AddSubjectToConversationBatch: migrated (0.0007s) =========================

==  CreateAuthenticateSubscriptions: migrating ================================
-- create_table(:authenticate_subscriptions)
   -> 0.1095s
==  CreateAuthenticateSubscriptions: migrated (0.1096s) =======================

==  MakeColumnsNotNull: migrating =============================================
-- change_column_null_with_less_locking(:abstract_courses, :workflow_state)
   -> 0.0042s
-- change_column_null_with_less_locking(:abstract_courses, :account_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:abstract_courses, :root_account_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:abstract_courses, :enrollment_term_id)
   -> 0.0067s
-- change_column_null_with_less_locking(:account_authorization_configs, :account_id)
   -> 0.0081s
-- change_column_null_with_less_locking(:account_notifications, :start_at)
   -> 0.0082s
-- change_column_null_with_less_locking(:account_notifications, :end_at)
   -> 0.0166s
-- change_column_null_with_less_locking(:account_notifications, :account_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:account_users, :account_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:account_users, :user_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:account_users, :membership_type)
   -> 0.0167s
-- change_column_null_with_less_locking(:account_reports, :account_id)
   -> 0.0082s
-- change_column_null_with_less_locking(:account_reports, :user_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:account_reports, :workflow_state)
   -> 0.0166s
-- change_column_null_with_less_locking(:accounts, :workflow_state)
   -> 0.0166s
-- change_column_null_with_less_locking(:alerts, :context_id)
   -> 0.0082s
-- change_column_null_with_less_locking(:alerts, :context_type)
   -> 0.0082s
-- change_column_null_with_less_locking(:alerts, :recipients)
   -> 0.0082s
-- change_column_null_with_less_locking(:appointment_groups, :workflow_state)
   -> 0.0083s
-- change_column_null_with_less_locking(:assessment_question_bank_users, :workflow_state)
   -> 0.0166s
-- change_column_null_with_less_locking(:assessment_question_bank_users, :user_id)
   -> 0.0165s
-- change_column_null_with_less_locking(:assessment_question_bank_users, :assessment_question_bank_id)
   -> 0.1416s
-- change_column_null_with_less_locking(:assessment_question_banks, :workflow_state)
   -> 0.0166s
-- change_column_null_with_less_locking(:assessment_requests, :workflow_state)
   -> 0.0082s
-- change_column_null_with_less_locking(:assessment_requests, :user_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:assessment_requests, :asset_id)
   -> 0.0165s
-- change_column_null_with_less_locking(:assessment_requests, :asset_type)
   -> 0.0164s
-- change_column_null_with_less_locking(:assessment_requests, :assessor_asset_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:assessment_requests, :assessor_asset_type)
   -> 0.0164s
-- change_column_null_with_less_locking(:assessment_requests, :assessor_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:assignments, :context_type)
   -> 0.0082s
-- change_column_null_with_less_locking(:assignments, :context_id)
   -> 0.0082s
-- change_column_null_with_less_locking(:assignments, :workflow_state)
   -> 0.0082s
-- change_column_null_with_less_locking(:assignment_groups, :context_id)
   -> 0.0082s
-- change_column_null_with_less_locking(:assignment_groups, :context_type)
   -> 0.0082s
-- change_column_null_with_less_locking(:assignment_groups, :workflow_state)
   -> 0.0082s
-- change_column_null_with_less_locking(:assignment_overrides, :title)
   -> 0.0166s
-- change_column_null_with_less_locking(:calendar_events, :context_id)
   -> 0.0082s
-- change_column_null_with_less_locking(:calendar_events, :context_type)
   -> 0.0166s
-- change_column_null_with_less_locking(:calendar_events, :workflow_state)
   -> 0.0165s
-- change_column_null_with_less_locking(:collaborations, :title)
   -> 0.0082s
-- change_column_null_with_less_locking(:collaborations, :workflow_state)
   -> 0.0166s
-- change_column_null_with_less_locking(:collections, :workflow_state)
   -> 0.0083s
-- change_column_null_with_less_locking(:collections, :context_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:collections, :context_type)
   -> 0.0082s
-- change_column_null_with_less_locking(:collection_items, :collection_id)
   -> 0.0082s
-- change_column_null_with_less_locking(:collection_items, :collection_item_data_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:collection_items, :user_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:collection_items, :workflow_state)
   -> 0.0167s
-- change_column_null_with_less_locking(:collection_item_datas, :link_url)
   -> 0.0166s
-- change_column_null_with_less_locking(:collection_item_upvotes, :collection_item_data_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:collection_item_upvotes, :user_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:communication_channels, :path)
   -> 0.0083s
-- change_column_null_with_less_locking(:communication_channels, :path_type)
   -> 0.0166s
-- change_column_null_with_less_locking(:communication_channels, :user_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:communication_channels, :workflow_state)
   -> 0.0166s
-- change_column_null_with_less_locking(:content_exports, :workflow_state)
   -> 0.0083s
-- change_column_null_with_less_locking(:content_exports, :course_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:content_migrations, :workflow_state)
   -> 0.0082s
-- change_column_null_with_less_locking(:content_migrations, :context_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:content_participations, :workflow_state)
   -> 0.0166s
-- change_column_null_with_less_locking(:content_participations, :content_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:content_participations, :content_type)
   -> 0.0166s
-- change_column_null_with_less_locking(:content_participations, :user_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:content_tags, :context_type)
   -> 0.0082s
-- change_column_null_with_less_locking(:content_tags, :context_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:content_tags, :workflow_state)
   -> 0.0083s
-- change_column_null_with_less_locking(:context_external_tools, :name)
   -> 0.0083s
-- change_column_null_with_less_locking(:context_external_tools, :consumer_key)
   -> 0.0082s
-- change_column_null_with_less_locking(:context_external_tools, :shared_secret)
   -> 0.0083s
-- change_column_null_with_less_locking(:context_external_tools, :workflow_state)
   -> 0.0083s
-- change_column_null_with_less_locking(:context_module_progressions, :workflow_state)
   -> 0.0166s
-- change_column_null_with_less_locking(:context_modules, :workflow_state)
   -> 0.0083s
-- change_column_null_with_less_locking(:context_modules, :context_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:context_modules, :context_type)
   -> 0.0166s
-- change_column_null_with_less_locking(:conversation_batches, :workflow_state)
   -> 0.0167s
-- change_column_null_with_less_locking(:conversation_batches, :user_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:conversation_batches, :root_conversation_message_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:conversation_participants, :workflow_state)
   -> 0.0083s
-- change_column_null_with_less_locking(:conversation_participants, :conversation_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:conversation_participants, :user_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:course_account_associations, :depth)
   -> 0.0083s
-- change_column_null_with_less_locking(:course_account_associations, :course_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:course_account_associations, :account_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:course_imports, :workflow_state)
   -> 0.0166s
-- change_column_null_with_less_locking(:course_imports, :course_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:course_imports, :import_type)
   -> 0.0166s
-- change_column_null_with_less_locking(:course_imports, :workflow_state)
   -> 0.0085s
-- change_column_null_with_less_locking(:course_sections, :course_id)
   -> 0.0080s
-- change_column_null_with_less_locking(:course_sections, :root_account_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:course_sections, :workflow_state)
   -> 0.0166s
-- change_column_null_with_less_locking(:courses, :workflow_state)
   -> 0.0083s
-- change_column_null_with_less_locking(:courses, :account_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:courses, :root_account_id)
   -> 0.0082s
-- change_column_null_with_less_locking(:courses, :enrollment_term_id)
   -> 0.0084s
-- change_column_null_with_less_locking(:delayed_notifications, :workflow_state)
   -> 0.0166s
-- change_column_null_with_less_locking(:delayed_notifications, :notification_id)
   -> 0.0165s
-- change_column_null_with_less_locking(:delayed_notifications, :asset_id)
   -> 0.0288s
-- change_column_null_with_less_locking(:delayed_notifications, :asset_type)
   -> 0.0127s
-- change_column_null_with_less_locking(:discussion_entry_participants, :workflow_state)
   -> 0.0083s
-- change_column_null_with_less_locking(:discussion_entry_participants, :user_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:discussion_entry_participants, :discussion_entry_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:discussion_topic_participants, :workflow_state)
   -> 0.0083s
-- change_column_null_with_less_locking(:discussion_topic_participants, :user_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:discussion_topic_participants, :discussion_topic_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:discussion_topic_participants, :unread_entry_count)
   -> 0.0166s
-- change_column_null_with_less_locking(:discussion_topics, :context_type)
   -> 0.0083s
-- change_column_null_with_less_locking(:discussion_topics, :context_id)
   -> 0.0167s
-- change_column_null_with_less_locking(:discussion_topics, :workflow_state)
   -> 0.0167s
-- change_column_null_with_less_locking(:enrollment_terms, :root_account_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:enrollment_terms, :workflow_state)
   -> 0.0166s
-- change_column_null_with_less_locking(:enrollments, :user_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:enrollments, :course_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:enrollments, :type)
   -> 0.0082s
-- change_column_null_with_less_locking(:enrollments, :root_account_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:enrollments, :course_section_id)
   -> 0.0070s
-- change_column_null_with_less_locking(:enrollments, :workflow_state)
   -> 0.0083s
-- change_column_null_with_less_locking(:eportfolios, :user_id)
   -> 0.0082s
-- change_column_null_with_less_locking(:eportfolios, :workflow_state)
   -> 0.0166s
-- change_column_null_with_less_locking(:eportfolio_categories, :eportfolio_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:eportfolio_entries, :eportfolio_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:eportfolio_entries, :eportfolio_category_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:external_feed_entries, :workflow_state)
   -> 0.0166s
-- change_column_null_with_less_locking(:external_feed_entries, :external_feed_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:external_feeds, :url)
   -> 0.0082s
-- change_column_null_with_less_locking(:external_feeds, :context_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:external_feeds, :context_type)
   -> 0.0166s
-- change_column_null_with_less_locking(:folders, :context_type)
   -> 0.0083s
-- change_column_null_with_less_locking(:folders, :context_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:folders, :workflow_state)
   -> 0.0166s
-- change_column_null_with_less_locking(:grading_standards, :workflow_state)
   -> 0.0166s
-- change_column_null_with_less_locking(:grading_standards, :context_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:grading_standards, :context_type)
   -> 0.0166s
-- change_column_null_with_less_locking(:group_memberships, :group_id)
   -> 0.0082s
-- change_column_null_with_less_locking(:group_memberships, :user_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:group_memberships, :workflow_state)
   -> 0.0083s
-- change_column_null_with_less_locking(:groups, :context_id)
   -> 0.0082s
-- change_column_null_with_less_locking(:groups, :context_type)
   -> 0.0083s
-- change_column_null_with_less_locking(:groups, :account_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:groups, :root_account_id)
   -> 0.0084s
-- change_column_null_with_less_locking(:groups, :workflow_state)
   -> 0.0166s
-- change_column_null_with_less_locking(:learning_outcomes, :short_description)
   -> 0.0071s
-- change_column_null_with_less_locking(:learning_outcomes, :workflow_state)
   -> 0.0165s
-- change_column_null_with_less_locking(:learning_outcome_groups, :title)
   -> 0.0076s
-- change_column_null_with_less_locking(:learning_outcome_groups, :workflow_state)
   -> 0.0166s
-- change_column_null_with_less_locking(:media_objects, :workflow_state)
   -> 0.0082s
-- change_column_null_with_less_locking(:media_objects, :media_id)
   -> 0.0167s
-- change_column_null_with_less_locking(:media_tracks, :media_object_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:media_tracks, :content)
   -> 0.0166s
-- change_column_null_with_less_locking(:migration_issues, :workflow_state)
   -> 0.0083s
-- change_column_null_with_less_locking(:migration_issues, :content_migration_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:migration_issues, :issue_type)
   -> 0.0166s
-- change_column_null_with_less_locking(:notification_policies, :communication_channel_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:notification_policies, :broadcast)
   -> 0.0083s
-- change_column_null_with_less_locking(:notifications, :workflow_state)
   -> 0.0082s
-- change_column_null_with_less_locking(:page_views, :user_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:profiles, :root_account_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:profiles, :context_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:profiles, :context_type)
   -> 0.0166s
-- change_column_null_with_less_locking(:progresses, :context_id)
   -> 0.0082s
-- change_column_null_with_less_locking(:progresses, :context_type)
   -> 0.0166s
-- change_column_null_with_less_locking(:progresses, :workflow_state)
   -> 0.0166s
-- change_column_null_with_less_locking(:pseudonyms, :workflow_state)
   -> 0.0083s
-- change_column_null_with_less_locking(:pseudonyms, :account_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:pseudonyms, :user_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:quizzes, :context_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:quizzes, :context_type)
   -> 0.0166s
-- change_column_null_with_less_locking(:quizzes, :workflow_state)
   -> 0.0166s
-- change_column_null_with_less_locking(:quiz_groups, :quiz_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:quiz_submissions, :workflow_state)
   -> 0.0083s
-- change_column_null_with_less_locking(:quiz_submissions, :quiz_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:roles, :workflow_state)
   -> 0.0083s
-- change_column_null_with_less_locking(:rubric_assessments, :assessment_type)
   -> 0.0082s
-- change_column_null_with_less_locking(:rubric_assessments, :rubric_id)
   -> 0.0167s
-- change_column_null_with_less_locking(:rubric_assessments, :artifact_id)
   -> 0.0167s
-- change_column_null_with_less_locking(:rubric_assessments, :artifact_type)
   -> 0.0166s
-- change_column_null_with_less_locking(:rubric_associations, :purpose)
   -> 0.0082s
-- change_column_null_with_less_locking(:rubric_associations, :rubric_id)
   -> 0.0333s
-- change_column_null_with_less_locking(:rubric_associations, :association_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:rubric_associations, :association_type)
   -> 0.0165s
-- change_column_null_with_less_locking(:rubric_associations, :context_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:rubric_associations, :context_type)
   -> 0.0166s
-- change_column_null_with_less_locking(:rubrics, :workflow_state)
   -> 0.0083s
-- change_column_null_with_less_locking(:rubrics, :context_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:rubrics, :context_type)
   -> 0.0083s
-- change_column_null_with_less_locking(:session_persistence_tokens, :crypted_token)
   -> 0.0083s
-- change_column_null_with_less_locking(:session_persistence_tokens, :pseudonym_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:session_persistence_tokens, :token_salt)
   -> 0.0166s
-- change_column_null_with_less_locking(:sis_batches, :workflow_state)
   -> 0.0083s
-- change_column_null_with_less_locking(:sis_batches, :account_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:stream_items, :data)
   -> 0.0166s
-- change_column_null_with_less_locking(:stream_items, :asset_type)
   -> 0.0083s
-- change_column_null_with_less_locking(:stream_item_instances, :user_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:stream_item_instances, :stream_item_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:submissions, :assignment_id)
   -> 0.0082s
-- change_column_null_with_less_locking(:submissions, :user_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:submissions, :workflow_state)
   -> 0.0166s
-- change_column_null_with_less_locking(:thumbnails, :size)
   -> 0.0083s
-- change_column_null_with_less_locking(:thumbnails, :content_type)
   -> 0.0169s
-- change_column_null_with_less_locking(:thumbnails, :filename)
   -> 0.0081s
-- change_column_null_with_less_locking(:user_account_associations, :user_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:user_account_associations, :account_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:user_follows, :following_user_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:user_follows, :followed_item_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:user_notes, :workflow_state)
   -> 0.0166s
-- change_column_null_with_less_locking(:user_services, :user_id)
   -> 0.0083s
-- change_column_null_with_less_locking(:user_services, :service)
   -> 0.0166s
-- change_column_null_with_less_locking(:user_services, :service_user_id)
   -> 0.0082s
-- change_column_null_with_less_locking(:user_services, :workflow_state)
   -> 0.0165s
-- change_column_null_with_less_locking(:users, :workflow_state)
   -> 0.0083s
-- change_column_null_with_less_locking(:web_conferences, :conference_type)
   -> 0.0166s
-- change_column_null_with_less_locking(:web_conferences, :title)
   -> 0.0163s
-- change_column_null_with_less_locking(:web_conferences, :context_id)
   -> 0.0165s
-- change_column_null_with_less_locking(:web_conferences, :context_type)
   -> 0.0166s
-- change_column_null_with_less_locking(:web_conferences, :user_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:wiki_pages, :workflow_state)
   -> 0.0083s
-- change_column_null_with_less_locking(:wiki_pages, :wiki_id)
   -> 0.0165s
-- change_column_null_with_less_locking(:zip_file_imports, :context_id)
   -> 0.0166s
-- change_column_null_with_less_locking(:zip_file_imports, :context_type)
   -> 0.0165s
-- change_column_null_with_less_locking(:zip_file_imports, :workflow_state)
   -> 0.0166s
==  MakeColumnsNotNull: migrated (2.9796s) ====================================

==  ChangeSubmissionNeedsGradingNotificationTypeToAllSubmissions: migrating ===
==  ChangeSubmissionNeedsGradingNotificationTypeToAllSubmissions: migrated (0.0007s) 

==  DropTypeFromPseudonyms: migrating =========================================
-- remove_column(:pseudonyms, :type)
   -> 0.0006s
==  DropTypeFromPseudonyms: migrated (0.0007s) ================================

==  DropWikiPageComments: migrating ===========================================
-- drop_table(:wiki_page_comments)
   -> 0.0015s
==  DropWikiPageComments: migrated (0.0016s) ==================================

==  FixOutOfSyncOutcomeAlignments: migrating ==================================
==  FixOutOfSyncOutcomeAlignments: migrated (0.0374s) =========================

==  AddIndexOnCourseWikiId: migrating =========================================
-- add_index(:courses, :wiki_id, {:algorithm=>:concurrently, :where=>"wiki_id IS NOT NULL"})
   -> 0.0653s
-- remove_index(:groups, :wiki_id)
   -> 0.0082s
-- add_index(:groups, :wiki_id, {:algorithm=>:concurrently, :where=>"wiki_id IS NOT NULL"})
   -> 0.0750s
==  AddIndexOnCourseWikiId: migrated (0.1488s) ================================

==  AddContentMigrationIndex: migrating =======================================
-- add_index(:content_migrations, :context_id, {:algorithm=>:concurrently})
   -> 0.0713s
==  AddContentMigrationIndex: migrated (0.0715s) ==============================

==  AddIndexOnCccc: migrating =================================================
-- add_index(:communication_channels, :confirmation_code, {:algorithm=>:concurrently})
   -> 0.0869s
==  AddIndexOnCccc: migrated (0.0870s) ========================================

==  DropEnrollmentsIndexOnIdAndType: migrating ================================
-- remove_index(:enrollments, [:id, :type])
   -> 0.0034s
==  DropEnrollmentsIndexOnIdAndType: migrated (0.0035s) =======================

==  RemoveUnneededGistIndexes: migrating ======================================
-- execute("drop index if exists index_trgm_wiki_pages_title;")
   -> 0.0002s
-- execute("drop index if exists index_trgm_context_external_tools_name;")
   -> 0.0002s
-- execute("drop index if exists index_trgm_assignments_title;")
   -> 0.0002s
-- execute("drop index if exists index_trgm_quizzes_title;")
   -> 0.0002s
-- execute("drop index if exists index_trgm_discussion_topics_title;")
   -> 0.0002s
-- execute("drop index if exists index_trgm_attachments_display_name;")
   -> 0.0002s
-- execute("drop index if exists index_trgm_context_modules_name;")
   -> 0.0002s
-- execute("drop index if exists index_trgm_content_tags_title;")
   -> 0.0002s
==  RemoveUnneededGistIndexes: migrated (0.0020s) =============================

==  AddQuizRegradeForeignKeys: migrating ======================================
-- add_foreign_key_if_not_exists(:quiz_regrades, :users)
   -> 0.0031s
-- add_foreign_key_if_not_exists(:quiz_regrades, :quizzes)
   -> 0.0024s
-- add_foreign_key_if_not_exists(:quiz_regrade_runs, :quiz_regrades)
   -> 0.0024s
-- add_foreign_key_if_not_exists(:quiz_question_regrades, :quiz_regrades)
   -> 0.0023s
-- add_foreign_key_if_not_exists(:quiz_question_regrades, :quiz_questions)
   -> 0.0025s
==  AddQuizRegradeForeignKeys: migrated (0.0130s) =============================

==  FixImportedWikiFrontPages: migrating ======================================
==  FixImportedWikiFrontPages: migrated (0.1284s) =============================

==  AddWorkflowStateToQuizQuestion: migrating =================================
-- add_column(:quiz_questions, :workflow_state, :string)
   -> 0.0006s
==  AddWorkflowStateToQuizQuestion: migrated (0.0007s) ========================

==  AddContextModuleProgressionsUniqueIndex: migrating ========================
-- add_index(:context_module_progressions, [:user_id, :context_module_id], {:unique=>true, :name=>"index_cmp_on_user_id_and_module_id", :algorithm=>:concurrently})
   -> 0.0748s
-- remove_index(:context_module_progressions, {:name=>"u_id_module_id"})
   -> 0.0081s
==  AddContextModuleProgressionsUniqueIndex: migrated (0.1241s) ===============

==  RemoveUnusedFolderIndex: migrating ========================================
-- remove_index(:folders, {:name=>"index_folders_on_parent_folder_id_and_workflow_state_and_name"})
   -> 0.0021s
-- remove_index(:folders, {:name=>"index_folders_on_parent_folder_id_and_workflow_state_an_position"})
   -> 0.0019s
==  RemoveUnusedFolderIndex: migrated (0.0043s) ===============================

==  AddForeignKeys7: migrating ================================================
-- add_foreign_key_if_not_exists(:user_account_associations, :accounts, {:delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:user_account_associations, :users, {:delay_validation=>true})
   -> 0.0159s
-- add_foreign_key_if_not_exists(:user_services, :users, {:delay_validation=>true})
   -> 0.0248s
-- add_foreign_key_if_not_exists(:web_conferences, :users, {:delay_validation=>true})
   -> 0.0662s
-- add_foreign_key_if_not_exists(:wiki_pages, :cloned_items, {:delay_validation=>true})
   -> 0.0339s
-- add_foreign_key_if_not_exists(:wiki_pages, :users, {:delay_validation=>true})
   -> 0.0164s
-- add_foreign_key_if_not_exists(:wiki_pages, :wikis, {:delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:zip_file_imports, :attachments, {:delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:zip_file_imports, :folders, {:delay_validation=>true})
   -> 0.0253s
==  AddForeignKeys7: migrated (0.2413s) =======================================

==  ChangeExternalFeedEntryIndexes: migrating =================================
-- add_index(:external_feed_entries, :external_feed_id, {:algorithm=>:concurrently})
   -> 0.1131s
-- add_index(:external_feed_entries, :uuid, {:algorithm=>:concurrently})
   -> 0.0669s
-- add_index(:external_feed_entries, :url, {:algorithm=>:concurrently})
   -> 0.0749s
-- remove_index(:external_feed_entries, {:name=>"external_feed_id_uuid"})
   -> 0.0082s
-- remove_index(:external_feed_entries, [:asset_id, :asset_type])
   -> 0.0120s
==  ChangeExternalFeedEntryIndexes: migrated (0.2756s) ========================

==  AddForeignKeys8: migrating ================================================
-- add_foreign_key_if_not_exists(:account_notifications, :users, {:delay_validation=>true})
   -> 0.0190s
-- add_foreign_key_if_not_exists(:account_reports, :users, {:delay_validation=>true})
   -> 0.0419s
-- add_foreign_key_if_not_exists(:account_users, :users, {:delay_validation=>true})
   -> 0.0250s
-- add_foreign_key_if_not_exists(:assessment_requests, :users, {:column=>:assessor_id, :delay_validation=>true})
   -> 0.0667s
-- add_foreign_key_if_not_exists(:assessment_requests, :users, {:delay_validation=>true})
   -> 0.0250s
-- add_foreign_key_if_not_exists(:calendar_events, :users, {:delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:collaborators, :users, {:delay_validation=>true})
   -> 0.0418s
-- add_foreign_key_if_not_exists(:content_exports, :users, {:delay_validation=>true})
   -> 0.0333s
-- add_foreign_key_if_not_exists(:content_migrations, :users, {:delay_validation=>true})
   -> 0.0249s
-- add_foreign_key_if_not_exists(:context_module_progressions, :users, {:delay_validation=>true})
   -> 0.0334s
-- add_foreign_key_if_not_exists(:discussion_entries, :users, {:column=>:editor_id, :delay_validation=>true})
   -> 0.0249s
-- add_foreign_key_if_not_exists(:discussion_entries, :users, {:delay_validation=>true})
   -> 0.0252s
==  AddForeignKeys8: migrated (0.3789s) =======================================

==  AddForeignKeys9: migrating ================================================
-- add_foreign_key_if_not_exists(:discussion_entry_participants, :users, {:delay_validation=>true})
   -> 0.0127s
-- add_foreign_key_if_not_exists(:discussion_topic_participants, :users, {:delay_validation=>true})
   -> 0.0165s
-- add_foreign_key_if_not_exists(:discussion_topics, :users, {:column=>:editor_id, :delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:discussion_topics, :users, {:delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:enrollments, :users, {:column=>:associated_user_id, :delay_validation=>true})
   -> 0.0167s
-- add_foreign_key_if_not_exists(:enrollments, :users, {:delay_validation=>true})
   -> 0.0182s
-- add_foreign_key_if_not_exists(:external_feed_entries, :users, {:delay_validation=>true})
   -> 0.0165s
-- add_foreign_key_if_not_exists(:external_feeds, :users, {:delay_validation=>true})
   -> 0.0250s
-- add_foreign_key_if_not_exists(:grading_standards, :users, {:delay_validation=>true})
   -> 0.0167s
-- add_foreign_key_if_not_exists(:group_memberships, :users, {:delay_validation=>true})
   -> 0.0166s
==  AddForeignKeys9: migrated (0.1731s) =======================================

==  AddGroupToBatchConversations: migrating ===================================
-- add_column(:conversation_batches, :group, :boolean)
   -> 0.0005s
==  AddGroupToBatchConversations: migrated (0.0007s) ==========================

==  AddForeignKeys10: migrating ===============================================
-- add_foreign_key_if_not_exists(:learning_outcome_results, :users, {:delay_validation=>true})
   -> 0.0734s
-- add_foreign_key_if_not_exists(:media_objects, :users, {:delay_validation=>true})
   -> 0.0167s
-- add_foreign_key_if_not_exists(:page_comments, :users, {:delay_validation=>true})
   -> 0.0167s
-- add_foreign_key_if_not_exists(:page_views, :users, {:column=>:real_user_id, :delay_validation=>true})
   -> 0.0165s
-- add_foreign_key_if_not_exists(:page_views, :users, {:delay_validation=>true})
   -> 0.0167s
-- add_foreign_key_if_not_exists(:pseudonyms, :users, {:delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:quiz_submissions, :users, {:delay_validation=>true})
   -> 0.0168s
-- add_foreign_key_if_not_exists(:rubric_assessments, :users, {:column=>:assessor_id, :delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:rubric_assessments, :users, {:delay_validation=>true})
   -> 0.0166s
-- add_foreign_key_if_not_exists(:rubrics, :users, {:delay_validation=>true})
   -> 0.0167s
==  AddForeignKeys10: migrated (0.2240s) ======================================

==  AddPageViewsRemoteIp: migrating ===========================================
-- add_column(:page_views, :remote_ip, :string)
   -> 0.0005s
==  AddPageViewsRemoteIp: migrated (0.0006s) ==================================

==  DropDownstreamModulesFromContextModules: migrating ========================
-- remove_column(:context_modules, :downstream_modules)
   -> 0.0006s
==  DropDownstreamModulesFromContextModules: migrated (0.0007s) ===============

==  AddCompletionEventsToContextModules: migrating ============================
-- add_column(:context_modules, :completion_events, :text)
   -> 0.0005s
==  AddCompletionEventsToContextModules: migrated (0.0006s) ===================

==  PopulateSubmissionVersions: migrating =====================================
==  PopulateSubmissionVersions: migrated (0.0244s) ============================

==  RemoveOrphanedContextModuleProgressions: migrating ========================
==  RemoveOrphanedContextModuleProgressions: migrated (0.1347s) ===============

==  AddPushColumns: migrating =================================================
-- add_column(:developer_keys, :sns_arn, :string)
   -> 0.0004s
-- add_column(:communication_channels, :access_token_id, :integer, {:limit=>8})
   -> 0.0003s
-- add_column(:communication_channels, :internal_path, :string)
   -> 0.0003s
-- add_foreign_key(:communication_channels, :access_tokens)
   -> 0.0014s
==  AddPushColumns: migrated (0.0029s) ========================================

==  CreateFeatureFlags: migrating =============================================
-- create_table(:feature_flags)
   -> 0.0988s
-- add_index(:feature_flags, [:context_id, :context_type, :feature], {:unique=>true, :name=>"index_feature_flags_on_context_and_feature"})
   -> 0.0398s
==  CreateFeatureFlags: migrated (0.1389s) ====================================

==  AddScoreVisibilityToQuizzes: migrating ====================================
-- add_column(:quizzes, :show_correct_answers_at, :datetime)
   -> 0.0007s
-- add_column(:quizzes, :hide_correct_answers_at, :datetime)
   -> 0.0004s
==  AddScoreVisibilityToQuizzes: migrated (0.0013s) ===========================

==  AddStaleScribdIndexToAttachments: migrating ===============================
-- add_index(:attachments, [:last_inline_view, :created_at], {:where=>"scribd_doc IS NOT NULL", :algorithm=>:concurrently})
   -> 0.0739s
==  AddStaleScribdIndexToAttachments: migrated (0.0741s) ======================

==  RemoveScribdAccount: migrating ============================================
-- drop_table(:scribd_accounts)
   -> 0.0017s
-- remove_column(:attachments, :scribd_account_id)
   -> 0.0005s
-- remove_column(:attachments, :scribd_user)
   -> 0.0004s
==  RemoveScribdAccount: migrated (0.0029s) ===================================

==  UndeleteSomeOutcomeAlignments: migrating ==================================
==  UndeleteSomeOutcomeAlignments: migrated (0.0052s) =========================

==  AddAssociationToLearningOutcomeResultsIndex: migrating ====================
-- rename_index(:learning_outcome_results, "index_learning_outcome_results_association", "temp_index_learning_outcome")
   -> 0.0059s
-- add_index(:learning_outcome_results, [:user_id, :content_tag_id, :association_id, :association_type, :associated_asset_id, :associated_asset_type], {:unique=>true, :name=>"index_learning_outcome_results_association", :algorithm=>:concurrently})
   -> 0.0748s
-- remove_index(:learning_outcome_results, {:name=>"temp_index_learning_outcome"})
   -> 0.0082s
==  AddAssociationToLearningOutcomeResultsIndex: migrated (0.1315s) ===========

==  FixSubmissionVersionsIndex: migrating =====================================
==  FixSubmissionVersionsIndex: migrated (0.0004s) ============================

==  FixNameOfSisBatchesPendingIndex: migrating ================================
==  FixNameOfSisBatchesPendingIndex: migrated (0.0005s) =======================

==  FixAttachmentSortingIndexes: migrating ====================================
-- remove_index(:attachments, :folder_id)
   -> 0.0091s
==  FixAttachmentSortingIndexes: migrated (0.0096s) ===========================

==  AddReportSnapshotsIndex: migrating ========================================
-- add_index(:report_snapshots, [:report_type, :account_id, :created_at], {:algorithm=>:concurrently, :name=>"index_on_report_snapshots"})
   -> 0.0713s
==  AddReportSnapshotsIndex: migrated (0.0714s) ===============================

==  AddMoreGistIndexes: migrating =============================================
==  AddMoreGistIndexes: migrated (0.0005s) ====================================

==  UpdateIcuSortableNameIndex: migrating =====================================
==  UpdateIcuSortableNameIndex: migrated (0.0006s) ============================

==  DropOldSortableNameIndex: migrating =======================================
-- remove_index("users", {:name=>"index_users_on_sortable_name_old"})
   -> 0.0018s
-- remove_index("users", {:name=>"index_attachments_on_folder_id_and_file_state_and_display_name2"})
   -> 0.0016s
==  DropOldSortableNameIndex: migrated (0.0038s) ==============================

==  ChangeGradedSurveySubmissionsToNotNeedGrading: migrating ==================
==  ChangeGradedSurveySubmissionsToNotNeedGrading: migrated (0.0020s) =========

==  PopulateOverriddenDueAtForDueDateCacher: migrating ========================
==  PopulateOverriddenDueAtForDueDateCacher: migrated (0.1489s) ===============

==  MoveScribdDocsToRootAttachments: migrating ================================
==  MoveScribdDocsToRootAttachments: migrated (0.0035s) =======================

==  DeleteEmptyConversations: migrating =======================================
==  DeleteEmptyConversations: migrated (0.0046s) ==============================

==  ActsAsTaggableOnMigration: migrating ======================================
-- create_table(:tags)
   -> 0.0324s
-- create_table(:taggings)
   -> 0.1108s
-- add_index(:taggings, :tag_id)
   -> 0.0336s
-- add_index(:taggings, [:taggable_id, :taggable_type, :context])
   -> 0.0337s
==  ActsAsTaggableOnMigration: migrated (0.2108s) =============================

==  CreateComments: migrating =================================================
-- create_table(:comments)
   -> 0.0903s
-- add_index(:comments, :commentable_type)
   -> 0.0377s
-- add_index(:comments, :commentable_id)
   -> 0.0337s
-- add_index(:comments, :user_id)
   -> 0.0420s
==  CreateComments: migrated (0.2040s) ========================================

==  AddCoursePricings: migrating ==============================================
-- add_column(:courses, :course_price, :float)
   -> 0.0005s
==  AddCoursePricings: migrated (0.0006s) =====================================

==  CreateCoursePricings: migrating ===========================================
-- create_table(:course_pricings)
   -> 0.0379s
==  CreateCoursePricings: migrated (0.0380s) ==================================

==  CreateCourseDescriptions: migrating =======================================
-- create_table(:course_descriptions)
   -> 0.0720s
==  CreateCourseDescriptions: migrated (0.0721s) ==============================

==  CreateAccountHeaders: migrating ===========================================
-- create_table(:account_headers)
   -> 0.0389s
==  CreateAccountHeaders: migrated (0.0390s) ==================================

==  CreateKnowledgePartners: migrating ========================================
-- create_table(:knowledge_partners)
   -> 0.0979s
==  CreateKnowledgePartners: migrated (0.0981s) ===============================

==  LearnersReview: migrating =================================================
-- create_table(:learners_reviews)
   -> 0.0820s
==  LearnersReview: migrated (0.0821s) ========================================

==  CreateAccountSliders: migrating ===========================================
-- create_table(:account_sliders)
   -> 0.0570s
==  CreateAccountSliders: migrated (0.0571s) ==================================

==  ChangeNameAccountSliderUrlInAccountStatistics: migrating ==================
-- rename_column(:account_sliders, :account_slider_url, :account_slider_attachment_id)
   -> 0.0004s
==  ChangeNameAccountSliderUrlInAccountStatistics: migrated (0.0004s) =========

==  CreateCourseImages: migrating =============================================
-- create_table(:course_images)
   -> 0.0352s
==  CreateCourseImages: migrated (0.0353s) ====================================

]0;sysadmin@system-dualboot: ~/dev/canvas-lmssysadmin@system-dualboot:~/dev/canvas-lms$ bundle exe [Kc rake db:initial_sd[Ketup
ELEARNING: true
LMSENABLED:false
ELEARNING: true
LMSENABLED:false
What email address will the site administrator account use? > admin
Please confirm > admin
What password will the site administrator use? > *********
Please confirm > *********
What do you want users to see as the account name? This should probably be the name of your organization. > arrivu
To help our developers better serve you, Arrivu would like to collect some usage data about your Sublime installation. You can change this setting at any time.:
1. Opt in
2. Only send anonymized data
3. Opt out completely
> 3
You have opted out.
You can change this feature at any time by running the rake task 'rake db:configure_statistics_collection'
........................................................................
Notifications Loaded
........................Scribd Mime Types added
No notification files found for Assignment Publishing Reminder
No notification files found for